[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analytics for Accounting Data",
    "section": "",
    "text": "Welcome to the online home of Analytics for Accounting Data, which is slated to be published future. It will be available for purchase in both paperback and hardback, with pre-ordering available now on both Amazon and online.\n\n\nPreface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2\n\n\n\n# To get more idea about how to develop a book in Quarto\n# Please see the following links -\n# https://bradcongelio.com/nfl-analytics-with-r-book/\n# https://github.com/bcongelio/nfl-analytics-with-r-book\n# https://github.com/hadley/r4ds/\n# https://r4ds.hadley.nz/\n\n\n\nAbout the Book\nThe book is written for the students in undergraduate and graduate programs.\n\n\nAbout the Author\n\n\n\n\nSharif Islam, DBA, CPA, CMA is an Assistant professor in School of Accountancy in Southern Illinois University Carbondale (SIUC). He is a licensed CPA in Illinois and a Certified Management Accountant (CMA). He teaches Machine Learning, Analytics for Accounting Data, Auditing, and Accounting Information Systems. He did his doctorate from Louisiana Tech University in Computer Information Systems and Accounting. He published research in Accounting Horizons, Journal of Accounting and Public Policy, Journal of Emerging Technologies in Accounting, Issues in Accounting Education, Advances in Accounting and Managerial Auditing Journal. His research interests lie at the intersection of Accounting and Data Science.\n\n\n\nHow to Read the Book\n\n\nAcknowledgment\n\nTo prepare the book, I took help from many sources on the internet and published materials. Many of them are cited in the book. I acknowledge the contribution of all of those resources that help me to prepare the books for the students.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "advanced_analytics.html",
    "href": "advanced_analytics.html",
    "title": "9  Web Scraping and Textual Analytics",
    "section": "",
    "text": "Learning Objectives of the Chapter",
    "crumbs": [
      "Advanced Techniques and Applications",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Web Scraping and Textual Analytics</span>"
    ]
  },
  {
    "objectID": "advanced_analytics.html#what-is-web-scraping",
    "href": "advanced_analytics.html#what-is-web-scraping",
    "title": "9  Web Scraping and Textual Analytics",
    "section": "9.1 What is Web Scraping?",
    "text": "9.1 What is Web Scraping?\n\n     Web scraping refers to the techniques of accessing websites and collecting information from them. Having web scraping knowledge is important nowadays because a vast amount of data is available on websites and in many occasions we need to access, collect, and analyze those data. Web scraping is also called “web harvesting” or “web data extraction”.\n     Web scraping is employed in different kinds of practical applications. For example, companies scrape websites of their competitors to keep track of their pricing, which can help companies to form a competitive pricing strategy. Moreover, marketers and analysts scrape different social media platforms to analyze public sentiment about their products, brands, or events, which help them to gauge public opinions and ultimately tailor their products or services to meet or exceed customers’ expectations.",
    "crumbs": [
      "Advanced Techniques and Applications",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Web Scraping and Textual Analytics</span>"
    ]
  },
  {
    "objectID": "advanced_analytics.html#legal-and-ethical-consideration-of-web-scraping",
    "href": "advanced_analytics.html#legal-and-ethical-consideration-of-web-scraping",
    "title": "9  Web Scraping and Textual Analytics",
    "section": "9.2 Legal and Ethical Consideration of Web Scraping",
    "text": "9.2 Legal and Ethical Consideration of Web Scraping\n\n     As good citizens on the internet, it is incumbent on us to respect the policies of the websites we plan to scrape. Therefore, before we decide to scrape a website, we must take into consideration the legal and ethical aspects of scraping.\n\n\n9.2.1 Legal Framework of Web Scraping\n\n     Before scraping a website, we must evaluate the following legal considerations -\n\nTerms of Service: Please check the terms of service of the website because some sites explicitly prohibit scraping and violating terms of service might result in legal action.\nCopyright Law: In most cases, data published online is protected by copyright. As such, it is important to know beforehand what you can legally collect from the website by scraping and how you can use the scraped data.\nComputer Fraud and Abuse Act (CFAA): In the US, the Computer Fraud and Abuse Act (CFAA) was enacted in 1986. The CFAA prohibits intentionally accessing a computer without authorization or in excess of authorization. You might violate CFAA if a website has taken steps to block scraping and you circumvent those measures.\nData Protection Law: Beacause of different kinds of data protection law such as General Data Protection Regulation (GDPR) in Europe or similar law in other jurisdictions, it has become very critical to deal with personal data. If you scrape personal data, you must comply with such laws, which typically include requirements for consent, data minimization, and secure handling of the data.\n\n\n\n\n9.2.2 Ethical Considerations of Web Scraping\n\n     In addition to legal considerations, you should also behave ethically when you try to scrape a website. Ethical considerations though aligns with legal considerations, they extend to the idea of good citizenship on the web. Some important ethical considerations during webscraping include -\n\nWeb scraping might be equivalent to Distriubted of Denial of Service (DDOS) attack if too many requests are sent to the targeted websites, thus disrupting the regular functioning of the website. Therefore, while web scraping, we should scrape in such a way so that it does not disrupt the usage of the website by other legitimate users. Further, you should not try to scrape a website if it prohibits web scraping. Some websites have robots.txt file, which defines what can be scraped from the website. So please invesitage a website well before you decide to scrape it.\nHow the scraped data will be used is an important considerations even if the data are publicly available. Using the web scraped data in a way that is detrimental to individual or businesses is unethical. Further, you should also consider the ramifications of publishing or sharing the scraped data.",
    "crumbs": [
      "Advanced Techniques and Applications",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Web Scraping and Textual Analytics</span>"
    ]
  },
  {
    "objectID": "advanced_analytics.html#understanding-html-and-css-selectors",
    "href": "advanced_analytics.html#understanding-html-and-css-selectors",
    "title": "9  Web Scraping and Textual Analytics",
    "section": "9.3 Understanding HTML and CSS Selectors",
    "text": "9.3 Understanding HTML and CSS Selectors\n\n     Websites are usually created by using HTML - HyperText Markup Language, which describes the structure of a web page and includes cues for the apperance of a website. Therefore, having some knowledge on HTML will help you to scrape a website. HTML document uses different kinds of tags to identify or refer to different elements. A typical HTML document has following elements -\n&lt;!DOCTYPE&gt; : Defines the document type\n&lt;html&gt; : Defines the HTML document\n&lt;head&gt; : Contains metadata or information for the document\n&lt;body&gt; : Defines the document body such as text, images, and other media\n     More about HTML tags can be found here. Here is an example of a basic HTML structure -\n\n&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p class=\"title\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;\n&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were\n&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;Elsie&lt;/a&gt;,\n&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and\n&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;\nand they lived at the bottom of a well.&lt;/p&gt;\n&lt;/body&gt;&lt;/html&gt;\n\n     In addition to HTML tags, CSS (Cascading Style Sheets) selectors are used to style different elements in the website. In web scraping, we use CSS selectors to identify the data we want to extract. There are different types of CSS selectors:\n\nElement Selector: Selects all elements of a specific type. For example, p selects all &lt;p&gt; elements.\nID Selector: Selects a single element with a specific id. The ID selector is defined with a hash (#). For example, #navbar selects the element with id=\"navbar\".\nClass Selector: Selects all elements with a specific class. The class selector is defined with a dot (.). For example, .menu-item selects all elements with class=\"menu-item\".\nAttribute Selector: Selects elements with a specific attribute or attribute value. For example, [href] selects all elements with an href attribute.\n\n     Below is an example of CSS selectors -\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;style&gt;\n        #header {\n            background-color: #f2f2f2;\n        }\n        .highlight {\n            font-weight: bold;\n        }\n        a[href^=\"https\"] {\n            color: green;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"header\"&gt;This is the header&lt;/div&gt;\n    &lt;p class=\"highlight\"&gt;This paragraph is highlighted.&lt;/p&gt;\n    &lt;a href=\"https://example.com\"&gt;This link is green because it uses HTTPS.&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n     In the above code, #header selects the &lt;div&gt; with the ID of “header,” .highlight selects any element with the “highlight” class, and a[href^=\"https\"] selects anchor tags (&lt;a&gt;) whose href attribute value begins with “https”. Understanding how to use these CSS selectors are very important while web scraping websites.",
    "crumbs": [
      "Advanced Techniques and Applications",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Web Scraping and Textual Analytics</span>"
    ]
  },
  {
    "objectID": "advanced_analytics.html#an-overview-of-beautiful-soup",
    "href": "advanced_analytics.html#an-overview-of-beautiful-soup",
    "title": "9  Web Scraping and Textual Analytics",
    "section": "9.4 An Overview of Beautiful Soup",
    "text": "9.4 An Overview of Beautiful Soup\n\n     Beautifulsoup is a python module that is widely used to scrape and parse websites. Beautifulsoup has many useful functions that can be easily used to extract data from HTML. Figure 9.1 shows the basic work process Beautifulsoup uses. It is clear from Figure 9.1 that using Beautifulsoup, we can extract data by finding HTML tag names, by CSS class names, and so on.\n\n\n\n\n\n\nFigure 9.1: Beautiful Soup Process\n\n\n\n     The following python code can be run to install and import Beautifulsoup module.\n\n# installing beautifulsoup \npip install beautifulsoup4\n\n# importing beautifulsoup\nfrom bs4 import BeautifulSoup\n\n     When we use BeautifulSoup to scrape a website, one of the most critical tasks is to identify the tags or CSS selectors from which we want to extract text or data. These targets are called Document Object Model (DOM). The DOM is a programming interface for web documents. Visualize HTML code of a webpage as an upside-down tree. Each HTML element - headings, paragraphs, and links - is a node in the tree. Figure 9.2 shows a basic tree structure of an HTML page.\n\n\n\n\n\n\nFigure 9.2: Tree Structure of HTML Page\n\n\n\n\n\n9.4.1 An Example of Web Scraping\n\n     Below we provide a small example of webscraping. We create a webpage called html, which includes different tags and CSS selectors.\n\n# an HTML file data \n\nhtml = \"\"\"\n&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p class=\"title\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;\n&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were\n&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;Elsie&lt;/a&gt;,\n&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and\n&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;\nand they lived at the bottom of a well.&lt;/p&gt;\n&lt;/body&gt;&lt;/html&gt;\"\"\"\n\n     Then we import BeautifulSoup from beautifulsoup.\n\n# importing beautiful soup \nfrom bs4 import BeautifulSoup\n\n     Next, we convert the html into beautifulsoup object and name it soup. In BeautifulSoup ()function, we use the built-in parser called html.parser. We can also use other parsers such as lxml or html5lib. Each of these parsers has their own pros and cons. For example, lxml is the fastest and html.parser does not need extra dependencies.\n\n# Converting HTML data into Beautiful Soup Object \nsoup = BeautifulSoup(html, \"html.parser\")\n\n     The prettify() function will turn a soup object into a nicely formatted Unicode string, witha a separate line for each tag and each string.\n\nsoup.prettify()\n\n'&lt;html&gt;\\n &lt;head&gt;\\n  &lt;title&gt;\\n   The Dormouse\\'s story\\n  &lt;/title&gt;\\n &lt;/head&gt;\\n &lt;body&gt;\\n  &lt;p class=\"title\"&gt;\\n   &lt;b&gt;\\n    The Dormouse\\'s story\\n   &lt;/b&gt;\\n  &lt;/p&gt;\\n  &lt;p class=\"story\"&gt;\\n   Once upon a time there were three little sisters; and their names were\\n   &lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;\\n    Elsie\\n   &lt;/a&gt;\\n   ,\\n   &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;\\n    Lacie\\n   &lt;/a&gt;\\n   and\\n   &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;\\n    Tillie\\n   &lt;/a&gt;\\n   ;\\nand they lived at the bottom of a well.\\n  &lt;/p&gt;\\n &lt;/body&gt;\\n&lt;/html&gt;\\n'\n\n\n     We can use get_text() function to see the text element of the tags. text is a property (attribute) of soup object, which calls get_text function.\n\nsoup.get_text()\n\n\"\\nThe Dormouse's story\\n\\nThe Dormouse's story\\nOnce upon a time there were three little sisters; and their names were\\nElsie,\\nLacie and\\nTillie;\\nand they lived at the bottom of a well.\\n\"\n\n\n\nsoup.text\n\n\"\\nThe Dormouse's story\\n\\nThe Dormouse's story\\nOnce upon a time there were three little sisters; and their names were\\nElsie,\\nLacie and\\nTillie;\\nand they lived at the bottom of a well.\\n\"\n\n\n\nprint(soup.text)\n\n\nThe Dormouse's story\n\nThe Dormouse's story\nOnce upon a time there were three little sisters; and their names were\nElsie,\nLacie and\nTillie;\nand they lived at the bottom of a well.\n\n\n\n     To see the title of the document, we run the following codes -\n\n# Navigating to Specific Tags \nsoup.head.title\n\n&lt;title&gt;The Dormouse's story&lt;/title&gt;\n\n\n\n# Getting Text from a Specific Tag\nsoup.head.title.text\n\n\"The Dormouse's story\"\n\n\n     To see the text, from a tag, we run the following code -\n\nsoup.body.a.text\n\n'Elsie'\n\n\n     To see the text, from p tag, we run the following code -\n\nsoup.body.p.text\n\n\"The Dormouse's story\"",
    "crumbs": [
      "Advanced Techniques and Applications",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Web Scraping and Textual Analytics</span>"
    ]
  },
  {
    "objectID": "advanced_analytics.html#searching-the-elements-of-tags",
    "href": "advanced_analytics.html#searching-the-elements-of-tags",
    "title": "9  Web Scraping and Textual Analytics",
    "section": "9.5 Searching the Elements of Tags",
    "text": "9.5 Searching the Elements of Tags\n\n     The find_all() function from beautifulsoup takes an HTML tag as an string argument and returns the list of elements that match the tag. For example, if we want to have all a tags in html data above, we will run the following code. Please note that there is another similar function called find(), which will return the first tag element.\n\nsoup.find_all('a')\n\n[&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;Elsie&lt;/a&gt;,\n &lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt;,\n &lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;]\n\n\n\nsoup.find('a')\n\n&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;Elsie&lt;/a&gt;\n\n\n     We can also search for tags of a specific class as well by providing class_ argument. Beasutiful soup uses class_ because class is a reserved keyword in python. For example, let’s search for p tags that have element story.\n\nsoup.find_all(\"p\", class_ = \"title\")\n\n[&lt;p class=\"title\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;]\n\n\n\nsoup.find(\"p\", class_=\"story\")\n\n&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were\n&lt;a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\"&gt;Elsie&lt;/a&gt;,\n&lt;a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\"&gt;Lacie&lt;/a&gt; and\n&lt;a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\"&gt;Tillie&lt;/a&gt;;\nand they lived at the bottom of a well.&lt;/p&gt;\n\n\n\nsoup.find(\"p\", class_=\"story\").get_text()\n\n'Once upon a time there were three little sisters; and their names were\\nElsie,\\nLacie and\\nTillie;\\nand they lived at the bottom of a well.'",
    "crumbs": [
      "Advanced Techniques and Applications",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Web Scraping and Textual Analytics</span>"
    ]
  },
  {
    "objectID": "advanced_analytics.html#sec-usebeautifulsoup",
    "href": "advanced_analytics.html#sec-usebeautifulsoup",
    "title": "9  Web Scraping and Textual Analytics",
    "section": "9.6 Scrape a Website Using BeautifulSoup",
    "text": "9.6 Scrape a Website Using BeautifulSoup\n\n     We have mastered some basic knowledge of Beautifulsoup. Therefore, it is now time to put our knowledge into practice. We are going to parse a website, which includes information about books. We would like to extract some data from the website. The data include - book url, title of the book, ratings of the book, price, and availability of the book. Before we start scraping the website, we need to identify the tags or CSS selectors that are relevant for our targeted data. Figure 9.3 shows how we can identify the tags or selectors relevant for our search. We should hover our cursor over the information that we plan to extract and then click right button of the mouse (on Windows) and click \"inspect\". Then we can see all tags and CSS selectors and other tags of the website. Figure 9.3 visualizes the whole process.\n\n\n\n\n\n\nFigure 9.3: How to Find the HTML tags and CSS Class\n\n\n\n     First, we need to import necessary python modules. We use requests module to get the website information.\n\n# importing requests \nimport requests\n# importing beautifulsoup\nfrom bs4 import BeautifulSoup\n# importing pandas \nimport pandas as pd\n\n     Then, we convert the data into soup object.\n\n# Fetch the website page \nurl = 'https://books.toscrape.com/catalogue/page-1.html'\nhtml = requests.get(url)\npage = html.text\n# Converting it into Soup Object \nsoup = BeautifulSoup(page, \"html.parser\")\n\n     After inspecting the tags and CSS selectors, we identify that article tag and product_pod class contains the information that we would like to extract. We use the find function from beautifulsuop to see our expected data. As noted before, find function identifies the first instance of the elements whereas find_all identifies all elements of the parsed HTML.\n\nsoup.find(\"article\", class_=\"product_pod\")\n\n&lt;article class=\"product_pod\"&gt;\n&lt;div class=\"image_container\"&gt;\n&lt;a href=\"a-light-in-the-attic_1000/index.html\"&gt;&lt;img alt=\"A Light in the Attic\" class=\"thumbnail\" src=\"../media/cache/2c/da/2cdad67c44b002e7ead0cc35693c0e8b.jpg\"/&gt;&lt;/a&gt;\n&lt;/div&gt;\n&lt;p class=\"star-rating Three\"&gt;\n&lt;i class=\"icon-star\"&gt;&lt;/i&gt;\n&lt;i class=\"icon-star\"&gt;&lt;/i&gt;\n&lt;i class=\"icon-star\"&gt;&lt;/i&gt;\n&lt;i class=\"icon-star\"&gt;&lt;/i&gt;\n&lt;i class=\"icon-star\"&gt;&lt;/i&gt;\n&lt;/p&gt;\n&lt;h3&gt;&lt;a href=\"a-light-in-the-attic_1000/index.html\" title=\"A Light in the Attic\"&gt;A Light in the ...&lt;/a&gt;&lt;/h3&gt;\n&lt;div class=\"product_price\"&gt;\n&lt;p class=\"price_color\"&gt;Â£51.77&lt;/p&gt;\n&lt;p class=\"instock availability\"&gt;\n&lt;i class=\"icon-ok\"&gt;&lt;/i&gt;\n    \n        In stock\n    \n&lt;/p&gt;\n&lt;form&gt;\n&lt;button class=\"btn btn-primary btn-block\" data-loading-text=\"Adding...\" type=\"submit\"&gt;Add to basket&lt;/button&gt;\n&lt;/form&gt;\n&lt;/div&gt;\n&lt;/article&gt;\n\n\n\nsoup.find_all(\"article\", class_=\"product_pod\")\n\n     Next, we check the url of each book. The a tag defines a hyperlink and the href is an attribute of a tag. Below, we use a tag to identify the link of each book.\n\nbooks = soup.find_all(\"article\", class_=\"product_pod\")\n\n\nsource_url = \"https://books.toscrape.com/catalogue\"\n\n\n# Book url \nfor h in soup.find_all(\"article\", class_=\"product_pod\"):\n    print(source_url+\"/\"+h.find('a')['href'])\n\nhttps://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html\nhttps://books.toscrape.com/catalogue/tipping-the-velvet_999/index.html\nhttps://books.toscrape.com/catalogue/soumission_998/index.html\nhttps://books.toscrape.com/catalogue/sharp-objects_997/index.html\nhttps://books.toscrape.com/catalogue/sapiens-a-brief-history-of-humankind_996/index.html\nhttps://books.toscrape.com/catalogue/the-requiem-red_995/index.html\nhttps://books.toscrape.com/catalogue/the-dirty-little-secrets-of-getting-your-dream-job_994/index.html\nhttps://books.toscrape.com/catalogue/the-coming-woman-a-novel-based-on-the-life-of-the-infamous-feminist-victoria-woodhull_993/index.html\nhttps://books.toscrape.com/catalogue/the-boys-in-the-boat-nine-americans-and-their-epic-quest-for-gold-at-the-1936-berlin-olympics_992/index.html\nhttps://books.toscrape.com/catalogue/the-black-maria_991/index.html\nhttps://books.toscrape.com/catalogue/starving-hearts-triangular-trade-trilogy-1_990/index.html\nhttps://books.toscrape.com/catalogue/shakespeares-sonnets_989/index.html\nhttps://books.toscrape.com/catalogue/set-me-free_988/index.html\nhttps://books.toscrape.com/catalogue/scott-pilgrims-precious-little-life-scott-pilgrim-1_987/index.html\nhttps://books.toscrape.com/catalogue/rip-it-up-and-start-again_986/index.html\nhttps://books.toscrape.com/catalogue/our-band-could-be-your-life-scenes-from-the-american-indie-underground-1981-1991_985/index.html\nhttps://books.toscrape.com/catalogue/olio_984/index.html\nhttps://books.toscrape.com/catalogue/mesaerion-the-best-science-fiction-stories-1800-1849_983/index.html\nhttps://books.toscrape.com/catalogue/libertarianism-for-beginners_982/index.html\nhttps://books.toscrape.com/catalogue/its-only-the-himalayas_981/index.html\n\n\n\n# Book url (Alternative) \nfor h in soup.find_all(\"article\", class_=\"product_pod\"):\n    print(h.h3.find('a')['href'])\n\na-light-in-the-attic_1000/index.html\ntipping-the-velvet_999/index.html\nsoumission_998/index.html\nsharp-objects_997/index.html\nsapiens-a-brief-history-of-humankind_996/index.html\nthe-requiem-red_995/index.html\nthe-dirty-little-secrets-of-getting-your-dream-job_994/index.html\nthe-coming-woman-a-novel-based-on-the-life-of-the-infamous-feminist-victoria-woodhull_993/index.html\nthe-boys-in-the-boat-nine-americans-and-their-epic-quest-for-gold-at-the-1936-berlin-olympics_992/index.html\nthe-black-maria_991/index.html\nstarving-hearts-triangular-trade-trilogy-1_990/index.html\nshakespeares-sonnets_989/index.html\nset-me-free_988/index.html\nscott-pilgrims-precious-little-life-scott-pilgrim-1_987/index.html\nrip-it-up-and-start-again_986/index.html\nour-band-could-be-your-life-scenes-from-the-american-indie-underground-1981-1991_985/index.html\nolio_984/index.html\nmesaerion-the-best-science-fiction-stories-1800-1849_983/index.html\nlibertarianism-for-beginners_982/index.html\nits-only-the-himalayas_981/index.html\n\n\n\n# Book Title \nfor h in soup.find_all(\"article\", class_=\"product_pod\"):\n    print(h.h3.find('a')['title'])\n\nA Light in the Attic\nTipping the Velvet\nSoumission\nSharp Objects\nSapiens: A Brief History of Humankind\nThe Requiem Red\nThe Dirty Little Secrets of Getting Your Dream Job\nThe Coming Woman: A Novel Based on the Life of the Infamous Feminist, Victoria Woodhull\nThe Boys in the Boat: Nine Americans and Their Epic Quest for Gold at the 1936 Berlin Olympics\nThe Black Maria\nStarving Hearts (Triangular Trade Trilogy, #1)\nShakespeare's Sonnets\nSet Me Free\nScott Pilgrim's Precious Little Life (Scott Pilgrim #1)\nRip it Up and Start Again\nOur Band Could Be Your Life: Scenes from the American Indie Underground, 1981-1991\nOlio\nMesaerion: The Best Science Fiction Stories 1800-1849\nLibertarianism for Beginners\nIt's Only the Himalayas\n\n\n\n# ratings \nsoup.find('p', class_='star-rating')['class'][1]\n\n'Three'\n\n\n\n# price \nsoup.find('p', class_='price_color').get_text().replace(\"Â\",'')\n\n'£51.77'\n\n\n\n# availability \nsoup.find('p', class_='instock availability').get_text().replace('\\n','').strip()\n\n'In stock'\n\n\n\n9.6.1 Putting All of the Above Actions Together\n     In Section 9.6, we identify and extract individual tags and data that we want to extract. Now, we will put all of them together and create a data frame. For this purpose, we will use for loop.\n\n# Fetch the Page \nurl = 'https://books.toscrape.com/catalogue/page-1.html'\nhtml = requests.get(url)\npage = html.text\n# Parse HTML Content\nsoup = BeautifulSoup(page, \"html.parser\")\n\n# Information We need \n\nbook_url = []\ntitle = []\nratings = []\nprice = []\navailability = []\n\n# Extract listings from the page\nbooks = soup.find_all(\"article\", class_=\"product_pod\")\nsource_url = \"https://books.toscrape.com/catalogue\"\n\nfor book in books:\n    # extract book url \n    book_url_text = source_url+\"/\"+book.find('a')['href']\n    book_url.append(book_url_text)\n\n    # extract title \n    title_text = book.h3.find('a')['title']\n    title.append(title_text)\n\n    # extract ratings \n    ratings_text = book.find('p', class_='star-rating')['class'][1]\n    ratings.append(ratings_text)\n\n    # extract price \n    price_text = book.find('p', class_='price_color').get_text().replace(\"Â\",'')\n    price.append(price_text)\n\n    # extract availability \n    availability_text = book.find('p', class_='instock availability').get_text().replace('\\n','').strip()\n    availability.append(availability_text)\n\n# Creating the Data Frame \n\npd.DataFrame({\n    'book_url':book_url,\n    'title':title,\n    'ratings':ratings,\n    'price':price,\n    'availability':availability\n})\n\n\n\n\n\n\n\n\n\nbook_url\ntitle\nratings\nprice\navailability\n\n\n\n\n0\nhttps://books.toscrape.com/catalogue/a-light-i...\nA Light in the Attic\nThree\n£51.77\nIn stock\n\n\n1\nhttps://books.toscrape.com/catalogue/tipping-t...\nTipping the Velvet\nOne\n£53.74\nIn stock\n\n\n2\nhttps://books.toscrape.com/catalogue/soumissio...\nSoumission\nOne\n£50.10\nIn stock\n\n\n3\nhttps://books.toscrape.com/catalogue/sharp-obj...\nSharp Objects\nFour\n£47.82\nIn stock\n\n\n4\nhttps://books.toscrape.com/catalogue/sapiens-a...\nSapiens: A Brief History of Humankind\nFive\n£54.23\nIn stock\n\n\n5\nhttps://books.toscrape.com/catalogue/the-requi...\nThe Requiem Red\nOne\n£22.65\nIn stock\n\n\n6\nhttps://books.toscrape.com/catalogue/the-dirty...\nThe Dirty Little Secrets of Getting Your Dream...\nFour\n£33.34\nIn stock\n\n\n7\nhttps://books.toscrape.com/catalogue/the-comin...\nThe Coming Woman: A Novel Based on the Life of...\nThree\n£17.93\nIn stock\n\n\n8\nhttps://books.toscrape.com/catalogue/the-boys-...\nThe Boys in the Boat: Nine Americans and Their...\nFour\n£22.60\nIn stock\n\n\n9\nhttps://books.toscrape.com/catalogue/the-black...\nThe Black Maria\nOne\n£52.15\nIn stock\n\n\n10\nhttps://books.toscrape.com/catalogue/starving-...\nStarving Hearts (Triangular Trade Trilogy, #1)\nTwo\n£13.99\nIn stock\n\n\n11\nhttps://books.toscrape.com/catalogue/shakespea...\nShakespeare's Sonnets\nFour\n£20.66\nIn stock\n\n\n12\nhttps://books.toscrape.com/catalogue/set-me-fr...\nSet Me Free\nFive\n£17.46\nIn stock\n\n\n13\nhttps://books.toscrape.com/catalogue/scott-pil...\nScott Pilgrim's Precious Little Life (Scott Pi...\nFive\n£52.29\nIn stock\n\n\n14\nhttps://books.toscrape.com/catalogue/rip-it-up...\nRip it Up and Start Again\nFive\n£35.02\nIn stock\n\n\n15\nhttps://books.toscrape.com/catalogue/our-band-...\nOur Band Could Be Your Life: Scenes from the A...\nThree\n£57.25\nIn stock\n\n\n16\nhttps://books.toscrape.com/catalogue/olio_984/...\nOlio\nOne\n£23.88\nIn stock\n\n\n17\nhttps://books.toscrape.com/catalogue/mesaerion...\nMesaerion: The Best Science Fiction Stories 18...\nOne\n£37.59\nIn stock\n\n\n18\nhttps://books.toscrape.com/catalogue/libertari...\nLibertarianism for Beginners\nTwo\n£51.33\nIn stock\n\n\n19\nhttps://books.toscrape.com/catalogue/its-only-...\nIt's Only the Himalayas\nTwo\n£45.17\nIn stock\n\n\n\n\n\n\n\n\n\n\n9.6.2 Doing the Same Things for All Pages\n     In Section 9.6.1, we scrape the first page of the website, but now we would like to scrape all pages of the website.\n\nurl1 = 'https://books.toscrape.com/catalogue/page-'\npages = range(51)\nurl2 = '.html'\n\n# Information We need \nbook_url = []\ntitle = []\nratings = []\nprice = []\navailability = []\n# Some other Information \nsource_url = \"https://books.toscrape.com/catalogue\"\n\nfor page in pages:\n    url = url1+str(page)+url2\n    r = requests.get(url)\n    soup = BeautifulSoup(r.text, 'html.parser')\n    books = soup.find_all(\"article\", class_=\"product_pod\")\n\n    for book in books:\n        # extract book url \n        book_url_text = source_url+\"/\"+book.find('a')['href']\n        book_url.append(book_url_text)\n\n        # extract title \n        title_text = book.h3.find('a')['title']\n        title.append(title_text)\n\n        # extract ratings \n        ratings_text = book.find('p', class_='star-rating')['class'][1]\n        ratings.append(ratings_text)\n\n        # extract price \n        price_text = book.find('p', class_='price_color').get_text().replace(\"Â\",'')\n        price.append(price_text)\n\n        # extract availability \n        availability_text = book.find('p', class_='instock availability').get_text().replace('\\n','').strip()\n        availability.append(availability_text)\n    \n\n\n\n# Creating the Data Frame \npd.DataFrame({\n    'book_url':book_url,\n    'title':title,\n    'ratings':ratings,\n    'price':price,\n    'availability':availability\n})\n\n\n\n\n\n\n\n\n\nbook_url\ntitle\nratings\nprice\navailability\n\n\n\n\n0\nhttps://books.toscrape.com/catalogue/a-light-i...\nA Light in the Attic\nThree\n£51.77\nIn stock\n\n\n1\nhttps://books.toscrape.com/catalogue/tipping-t...\nTipping the Velvet\nOne\n£53.74\nIn stock\n\n\n2\nhttps://books.toscrape.com/catalogue/soumissio...\nSoumission\nOne\n£50.10\nIn stock\n\n\n3\nhttps://books.toscrape.com/catalogue/sharp-obj...\nSharp Objects\nFour\n£47.82\nIn stock\n\n\n4\nhttps://books.toscrape.com/catalogue/sapiens-a...\nSapiens: A Brief History of Humankind\nFive\n£54.23\nIn stock\n\n\n...\n...\n...\n...\n...\n...\n\n\n995\nhttps://books.toscrape.com/catalogue/alice-in-...\nAlice in Wonderland (Alice's Adventures in Won...\nOne\n£55.53\nIn stock\n\n\n996\nhttps://books.toscrape.com/catalogue/ajin-demi...\nAjin: Demi-Human, Volume 1 (Ajin: Demi-Human #1)\nFour\n£57.06\nIn stock\n\n\n997\nhttps://books.toscrape.com/catalogue/a-spys-de...\nA Spy's Devotion (The Regency Spies of London #1)\nFive\n£16.97\nIn stock\n\n\n998\nhttps://books.toscrape.com/catalogue/1st-to-di...\n1st to Die (Women's Murder Club #1)\nOne\n£53.98\nIn stock\n\n\n999\nhttps://books.toscrape.com/catalogue/1000-plac...\n1,000 Places to See Before You Die\nFive\n£26.08\nIn stock\n\n\n\n\n1000 rows × 5 columns\n\n\n\n\n\n\n9.7 Conclusion",
    "crumbs": [
      "Advanced Techniques and Applications",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Web Scraping and Textual Analytics</span>"
    ]
  },
  {
    "objectID": "advanced_analytics.html#conclusion",
    "href": "advanced_analytics.html#conclusion",
    "title": "9  Web Scraping and Textual Analytics",
    "section": "9.7 Conclusion",
    "text": "9.7 Conclusion",
    "crumbs": [
      "Advanced Techniques and Applications",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Web Scraping and Textual Analytics</span>"
    ]
  },
  {
    "objectID": "fraud.html",
    "href": "fraud.html",
    "title": "10  Fraud Detection and Risk Management",
    "section": "",
    "text": "10.1 Techniques for Fraud Detection",
    "crumbs": [
      "Advanced Techniques and Applications",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Fraud Detection and Risk Management</span>"
    ]
  },
  {
    "objectID": "fraud.html#risk-assessment-models",
    "href": "fraud.html#risk-assessment-models",
    "title": "10  Fraud Detection and Risk Management",
    "section": "10.2 Risk Assessment Models",
    "text": "10.2 Risk Assessment Models",
    "crumbs": [
      "Advanced Techniques and Applications",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Fraud Detection and Risk Management</span>"
    ]
  },
  {
    "objectID": "fraud.html#case-studies-in-fraud-detection",
    "href": "fraud.html#case-studies-in-fraud-detection",
    "title": "10  Fraud Detection and Risk Management",
    "section": "10.3 Case Studies in Fraud Detection",
    "text": "10.3 Case Studies in Fraud Detection",
    "crumbs": [
      "Advanced Techniques and Applications",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Fraud Detection and Risk Management</span>"
    ]
  },
  {
    "objectID": "performance_measurement.html",
    "href": "performance_measurement.html",
    "title": "11  Performance Measurement and Management",
    "section": "",
    "text": "11.1 Key Performance Indicators (KPIs)",
    "crumbs": [
      "Advanced Techniques and Applications",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Performance Measurement and Management</span>"
    ]
  },
  {
    "objectID": "performance_measurement.html#balanced-scorecard",
    "href": "performance_measurement.html#balanced-scorecard",
    "title": "11  Performance Measurement and Management",
    "section": "11.2 Balanced Scorecard",
    "text": "11.2 Balanced Scorecard",
    "crumbs": [
      "Advanced Techniques and Applications",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Performance Measurement and Management</span>"
    ]
  },
  {
    "objectID": "performance_measurement.html#financial-ratio-analysis",
    "href": "performance_measurement.html#financial-ratio-analysis",
    "title": "11  Performance Measurement and Management",
    "section": "11.3 Financial Ratio Analysis",
    "text": "11.3 Financial Ratio Analysis",
    "crumbs": [
      "Advanced Techniques and Applications",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Performance Measurement and Management</span>"
    ]
  },
  {
    "objectID": "ethics.html",
    "href": "ethics.html",
    "title": "12  Regulatory and Ethical Considerations",
    "section": "",
    "text": "12.1 Compliance and Regulatory Requirements",
    "crumbs": [
      "Practical Considerations and Future Directions",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Regulatory and Ethical Considerations</span>"
    ]
  },
  {
    "objectID": "ethics.html#ethichal-use-of-data",
    "href": "ethics.html#ethichal-use-of-data",
    "title": "12  Regulatory and Ethical Considerations",
    "section": "12.2 Ethichal Use of Data",
    "text": "12.2 Ethichal Use of Data",
    "crumbs": [
      "Practical Considerations and Future Directions",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Regulatory and Ethical Considerations</span>"
    ]
  },
  {
    "objectID": "ethics.html#data-privacy-security",
    "href": "ethics.html#data-privacy-security",
    "title": "12  Regulatory and Ethical Considerations",
    "section": "12.3 Data Privacy & Security",
    "text": "12.3 Data Privacy & Security",
    "crumbs": [
      "Practical Considerations and Future Directions",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Regulatory and Ethical Considerations</span>"
    ]
  },
  {
    "objectID": "future.html",
    "href": "future.html",
    "title": "13  Future Directions in Accounting Analytics",
    "section": "",
    "text": "13.1 Emerging Technologies",
    "crumbs": [
      "Practical Considerations and Future Directions",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Future Directions in Accounting Analytics</span>"
    ]
  },
  {
    "objectID": "future.html#trends-predictions",
    "href": "future.html#trends-predictions",
    "title": "13  Future Directions in Accounting Analytics",
    "section": "13.2 Trends & Predictions",
    "text": "13.2 Trends & Predictions",
    "crumbs": [
      "Practical Considerations and Future Directions",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Future Directions in Accounting Analytics</span>"
    ]
  },
  {
    "objectID": "future.html#preparing-for-the-future-accounting-analytics",
    "href": "future.html#preparing-for-the-future-accounting-analytics",
    "title": "13  Future Directions in Accounting Analytics",
    "section": "13.3 Preparing for the Future Accounting Analytics",
    "text": "13.3 Preparing for the Future Accounting Analytics",
    "crumbs": [
      "Practical Considerations and Future Directions",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Future Directions in Accounting Analytics</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Alles, Michael G. 2015. “Drivers of the Use and Facilitators and\nObstacles of the Evolution of Big Data by the Audit Profession.”\nAccounting Horizons 29 (2): 439–49. https://publications.aaahq.org/accounting-horizons/article-abstract/29/2/439/2188.\n\n\nAlles, Michael, and Glen L. Gray. 2016. “Incorporating Big Data in\nAudits: Identifying Inhibitors and a Research Agenda to\nAddress Those Inhibitors.” International Journal of\nAccounting Information Systems 22: 44–59. https://www.sciencedirect.com/science/article/pii/S1467089516300811.\n\n\nAmerican Institute of Certified Public Accountants (AICPA). 2015.\n“Audit Analytics and Continuous\nAudit: Looking Toward the\nFuture.”\n\n\n———. 2017. “Description Criteria for\nManagement’s Description of the\nEntity’s Cybersecurity Risk\nManagement Program.”\n\n\nAppelbaum, Deniz. 2016. “Securing Big Data Provenance for\nAuditors: The Big Data Provenance Black Box as Reliable\nEvidence.” Journal of Emerging Technologies in\nAccounting 13 (1): 17–36. https://publications.aaahq.org/jeta/article-abstract/13/1/17/9219.\n\n\nAppelbaum, Deniz, Alexander Kogan, and Miklos A. Vasarhelyi. 2017.\n“Big Data and Analytics in the Modern Audit\nEngagement: Research Needs.” Auditing: A Journal\nof Practice & Theory 36 (4): 1–27. https://publications.aaahq.org/ajpt/article-abstract/36/4/1/6016.\n\n\nBarr-Pulliam, Dereck, Helen L. Brown-Liburd, and Amanda G. Carlson.\n2023. “Do Audit Data\nAnalytics Influence Juror\nPerceptions of Audit Quality and\nAuditor Negligence?” Current Issues\nin Auditing 17 (2): P1–10. https://publications.aaahq.org/cia/article/17/2/P1/10096.\n\n\nBarton, Dominic, and David Court. 2012. “Making Advanced Analytics\nWork for You.” Harvard Business Review 90 (10): 78–83.\nhttp://www.buyukverienstitusu.com/s/1870/i/Making_Advanced_Analytics_Work_For_You.pdf.\n\n\nBollen, Johan, Huina Mao, and Xiaojun Zeng. 2011. “Twitter Mood\nPredicts the Stock Market.” Journal of Computational\nScience 2 (1): 1–8. https://www.sciencedirect.com/science/article/pii/S187775031100007X.\n\n\nCao, Min, Roman Chychyla, and Trevor Stewart. 2015. “Big Data\nAnalytics in Financial Statement Audits.” Accounting\nHorizons 29 (2): 423–29. https://publications.aaahq.org/accounting-horizons/article-abstract/29/2/423/2177.\n\n\nColumbus. 2017. “53% Of Companies\nAre Adopting Big\nData Analytics.” Forbes. https://www.forbes.com/sites/louiscolumbus/2017/12/24/53-of-companies-are-adopting-big-data-analytics/?sh=6c98f39939a1.\n\n\nCrawley, Michael, and James Wahlen. 2014. “Analytics in\nEmpirical/Archival Financial Accounting Research.” Business\nHorizons 57 (5): 583–93. https://www.sciencedirect.com/science/article/pii/S0007681314000792.\n\n\nDai, Jun, and Miklos A. Vasarhelyi. 2016. “Imagineering\nAudit 4.0.” Journal of Emerging Technologies in\nAccounting 13 (1): 1–15. https://publications.aaahq.org/jeta/article-abstract/13/1/1/9242.\n\n\nDavis, Angela K., Jeremy M. Piger, and Lisa M. Sedor. 2012.\n“Beyond the Numbers: Measuring the\nInformation Content of Earnings\nPress Release Language.”\nContemporary Accounting Research 29 (3): 845–68. https://doi.org/10.1111/j.1911-3846.2011.01130.x.\n\n\nDeloitte. 2016. “Tax Data Analytics\nA New Era for Tax\nPlanning and Compliance.” https://www2.deloitte.com/content/dam/Deloitte/us/Documents/Tax/us-tax-data-analytics-a-new-era-for-tax-planning-and-compliance.pdf.\n\n\nFeldman, Ronen, Suresh Govindaraj, Joshua Livnat, and Benjamin Segal.\n2010. “Management’s Tone Change, Post Earnings Announcement Drift\nand Accruals.” Review of Accounting Studies 15 (4):\n915–53. https://doi.org/10.1007/s11142-009-9111-x.\n\n\nKrahel, John Peter, and William R. Titera. 2015. “Consequences of\nBig Data and Formalization on Accounting and Auditing Standards.”\nAccounting Horizons 29 (2): 409–22. https://publications.aaahq.org/accounting-horizons/article/29/2/409/2149.\n\n\nLehavy, Reuven, Feng Li, and Kenneth Merkley. 2011. “The Effect of\nAnnual Report Readability on Analyst Following and the Properties of\nTheir Earnings Forecasts.” The Accounting Review 86 (3):\n1087–1115. https://publications.aaahq.org/accounting-review/article-abstract/86/3/1087/3300.\n\n\nLi, Feng. 2008. “Annual Report Readability, Current Earnings, and\nEarnings Persistence.” Journal of Accounting and\nEconomics 45 (2-3): 221–47. https://www.sciencedirect.com/science/article/pii/S0165410108000141.\n\n\n———. 2010. “The Information Content of\nForward‐Looking Statements in\nCorporate Filings—A\nNaïve Bayesian Machine\nLearning Approach.” Journal of\nAccounting Research 48 (5): 1049–1102. https://doi.org/10.1111/j.1475-679X.2010.00382.x.\n\n\nLi, Feng, Russell Lundholm, and Michael Minnis. 2013. “A\nMeasure of Competition Based on\n10‐K Filings.” Journal of\nAccounting Research 51 (2): 399–436. https://doi.org/10.1111/j.1475-679X.2012.00472.x.\n\n\nProtiviti. 2017. “Embracing Analytics in\nAuditing.” https://www.protiviti.com/sites/default/files/2022-06/2017-internal-audit-capabilities-and-needs-survey-protiviti.pdf.\n\n\nProvost, Foster, and Tom Fawcett. 2013. “Data Science\nand Its Relationship to Big Data\nand Data-Driven Decision\nMaking.” Big Data 1 (1): 51–59. https://doi.org/10.1089/big.2013.1508.\n\n\nRichins, Greg, Andrea Stapleton, Theophanis C. Stratopoulos, and\nChristopher Wong. 2017. “Big Data Analytics: Opportunity or Threat\nfor the Accounting Profession?” Journal of Information\nSystems 31 (3): 63–79. https://publications.aaahq.org/jis/article-abstract/31/3/63/1114.\n\n\nRose, Anna M., Jacob M. Rose, Kerri-Ann Sanderson, and Jay C. Thibodeau.\n2017. “When Should Audit Firms Introduce Analyses of Big Data into\nthe Audit Process?” Journal of Information Systems 31\n(3): 81–99. https://publications.aaahq.org/jis/article-abstract/31/3/81/1123.\n\n\nSchneider, Gary P., Jun Dai, Diane J. Janvrin, Kemi Ajayi, and Robyn L.\nRaschke. 2015. “Infer, Predict, and Assure:\nAccounting Opportunities in Data Analytics.”\nAccounting Horizons 29 (3): 719–42. https://publications.aaahq.org/accounting-horizons/article-abstract/29/3/719/2262.\n\n\nSivarajah, Uthayasankar, Muhammad Mustafa Kamal, Zahir Irani, and\nVishanth Weerakkody. 2017. “Critical Analysis of Big\nData Challenges and Analytical Methods.” Journal\nof Business Research 70: 263–86. https://www.sciencedirect.com/science/article/pii/S014829631630488X.\n\n\nThe Economist. 2017. “The World’s Most Valuable Resource Is No\nLonger Oil, but Data.” https://www.economist.com/leaders/2017/05/06/the-worlds-most-valuable-resource-is-no-longer-oil-but-data.\n\n\nVasarhelyi, Miklos A., Alexander Kogan, and Brad M. Tuttle. 2015.\n“Big Data in Accounting: An Overview.”\nAccounting Horizons 29 (2): 381–96. https://publications.aaahq.org/accounting-horizons/article-abstract/29/2/381/2184.\n\n\nVerver, John. 2015. “Six Audit Analytics\nSuccess Factors.” Internal\nAuditor 72 (3).\n\n\nWarren, J. Donald, Kevin C. Moffitt, and Paul Byrnes. 2015. “How\nBig Data Will Change Accounting.” Accounting Horizons 29\n(2): 397–407. https://publications.aaahq.org/accounting-horizons/article/29/2/397/2168.\n\n\nYoon, Kyunghee, Lucas Hoogduin, and Li Zhang. 2015. “Big Data as\nComplementary Audit Evidence.” Accounting Horizons 29\n(2): 431–38. https://publications.aaahq.org/accounting-horizons/article/29/2/431/2215.\n\n\nZhang, Juan, Xiongsheng Yang, and Deniz Appelbaum. 2015. “Toward\nEffective Big Data Analysis in Continuous Auditing.”\nAccounting Horizons 29 (2): 469–76. https://publications.aaahq.org/accounting-horizons/article/29/2/469/2160.",
    "crumbs": [
      "Appendices",
      "References"
    ]
  },
  {
    "objectID": "dashboard.html",
    "href": "dashboard.html",
    "title": "5  Dashboard for Visualization",
    "section": "",
    "text": "Learning Objectives of the Chapter",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dashboard for Visualization</span>"
    ]
  },
  {
    "objectID": "dashboard.html#what-is-dashboard",
    "href": "dashboard.html#what-is-dashboard",
    "title": "5  Dashboard for Visualization",
    "section": "5.1 What is Dashboard?",
    "text": "5.1 What is Dashboard?\n\n     A dashboard for visualization is a user interface that displays a collection of visual data representations, such as charts, graphs, tables, and metrics, to provide users with an interactive and comprehensive overview of key information. Dashboards are commonly used in business, data science, finance, healthcare, and other fields to monitor performance, track metrics, and explore data trends in real time.\n     The main goal of a dashboard is to present complex data in an easy-to-understand format, enabling users to quickly grasp insights and make data-driven decisions. Dashboards often combine multiple visual elements into a single screen or page, allowing users to view different aspects of the data simultaneously. They typically include interactive features like filters, drill-downs, and tooltips, which allow users to interact with the data and explore deeper insights without needing to understand the underlying data structures. Some benefits of dashboards are -\n\nData Aggregation: Dashboards bring together data from various sources, providing a unified view of different datasets.\nVisualization Elements: They use visual elements such as bar charts, line graphs, pie charts, heatmaps, and more to represent data in a visually appealing and informative way.\nInteractivity: Users can interact with the visual elements, applying filters, adjusting time frames, or drilling down into specific data points to gain more detailed insights.\nReal-Time Data: Dashboards can display real-time data, updating visualizations dynamically to reflect the latest information, which is especially useful for monitoring live systems or business performance.\nCustomization: Dashboards are highly customizable, allowing users to tailor the layout, visualizations, and data to meet their specific needs.\n\n     Dashboards for visualization are widely used for performance monitoring (e.g., tracking KPIs), data exploration (e.g., identifying trends), and decision-making (e.g., comparing metrics). They make data analysis more accessible to a wider audience by simplifying the complexity of raw data into clear and actionable insights.",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dashboard for Visualization</span>"
    ]
  },
  {
    "objectID": "dashboard.html#importance-of-dashboard",
    "href": "dashboard.html#importance-of-dashboard",
    "title": "5  Dashboard for Visualization",
    "section": "5.2 Importance of Dashboard",
    "text": "5.2 Importance of Dashboard",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dashboard for Visualization</span>"
    ]
  },
  {
    "objectID": "dashboard.html#interactive-dashboard",
    "href": "dashboard.html#interactive-dashboard",
    "title": "5  Dashboard for Visualization",
    "section": "5.3 Interactive Dashboard",
    "text": "5.3 Interactive Dashboard\n     For interactive visualization, see Figure 5.3.",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dashboard for Visualization</span>"
    ]
  },
  {
    "objectID": "dashboard.html#quarto---r-and-python-dashboard",
    "href": "dashboard.html#quarto---r-and-python-dashboard",
    "title": "5  Dashboard for Visualization",
    "section": "5.4 Quarto - R and Python Dashboard",
    "text": "5.4 Quarto - R and Python Dashboard\n\n     Quarto Dashboard is a powerful and flexible open-source tool to create interactive dashboard in R or Python. Quarto dashboards are easy to create and support a wide variety of visualization and interactive components1. More about quarto dashboard can be learned from Quarto Dashboard Website. To learn more about interactivity on quarto dashboard using Shiny, please visit webpages for R and Python. However, it is recommended to use Python for quarto dashboard if you want to include interactive applications on your dashboard.\n     There are several components of quarto dashboard:\n\nNavigation Bar - Top page bar with icon, title of the dashboard, name of author and links to sub-pages\nPages, Rows, Columns, and Tabsets - Using markdown headings (#) - pages, rows and columns are defined. Tabsets are used to further divide the content within a row or column\nCards, Sidebar, and Toolbars - Cards are containers for text, images, charts, and interactive elements and useful for organizing information into distinct sections within a dashboard. Typically, the contents of cards map to cells in the dashboard. Sidebar is another layout component of quarto dashboard, which contain navigation menus, filters, and controls that allow users to adjust or explore the data presented in the main content. Toolbars ….\n\n     The first step to create a quarto dashboard is to structure YAML in .qmd file. A quarto dashboard YAML look like -\n\n\n\n\n\n\nFigure 5.1: Quarto Dashboard YAML\n\n\n\n     In quarto dashboard, each level 1 header (#) introduces a new page, each level 2 header (##) introduces a new row within the given page, and each code chunk within a given row introduces a new column.\n\n\n\n\n\n\nFigure 5.2: Quarto Dashboard Structure\n\n\n\n     Some other attributes (Table 5.1) that can be added to the quarto dashboard’s rows or columns include -\n\n\n\nTable 5.1: Some Additional Attributes\n\n\n\n\n\n\n\n\n\nAttribute\nExplanation\n\n\n\n\n{width=} and {height=}\nSet the size of columns, rows, and boxes\n\n\n{orientation=}\nsets the dashboard layout to either rows or columns. This is a global option set in the YAML. However, if your dashboard has multiple pages and you want to specify the orientation for each page, remove orientation: from the YAML and use this attribute instead\n\n\n{.tabset}\ndivide columns, rows, or charts into tabs\n\n\n{.sidebar}\ntypically creates a sidebar on the page\n\n\n{.hidden}\nexcludes a specific page from the navigation bar",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dashboard for Visualization</span>"
    ]
  },
  {
    "objectID": "dashboard.html#vizro---python-dashboard",
    "href": "dashboard.html#vizro---python-dashboard",
    "title": "5  Dashboard for Visualization",
    "section": "5.5 Vizro - Python Dashboard",
    "text": "5.5 Vizro - Python Dashboard\n\n     Built on top of Dash and Plottly, Vizro is a powerful python module to create a dashboard. A vizro dashboard consists of several objects. The first object is Page. Each page contains several other sub-objects such as Comonents, which can include Graphs and Tables, Filters, which can be sliders, dropdown boxes and other buttons, and optional Actions. To learn more about Vizro, we can explore Vizro document website and developer website. The key benefits of Vizro include:\n\nLow-code and Configuration - Vizro only needs a few lines of code code, thus replacing thousand lines of codes and saving valuable time\nIn-built Best Practices - Vizro already incorporates standards for visual design and software development.\nSelf-service Visualization - Vizro readily assemble dashboards without advanced design or coding experience\nOptional High-code Extensions - Vizro enables limitless customization for advanced users with complex needs\nModularity - Vizro leverage components that are simple to swap, reuse, maintain, share and scale\nFlexibilit and Scalability - Vizro enables data science ready and to develop python based data visualization applications\n\n\n\n# Dashboard Creation \nfrom vizro import Vizro\nimport vizro.models as vm\nimport vizro.plotly.express as px\n\n# Data Visualization \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n\n# loading dataset \nimport palmerpenguins\ndf = palmerpenguins.load_penguins()\n\n\n5.5.1 Standalone Page on Vizro Dashboard (Example # 01)\n\nVizro._reset()\n\nfirst_page = vm.Page(\n    title= \" \", \n    components= [\n        vm.Graph(\n            id = 'boxplot', \n            figure = px.box (df, x = 'species', y = 'bill_length_mm', \n            color = 'species', \n            labels={'species':'Species', 'bill_length_mm':'Bill Length (mm)'})\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[first_page])\nVizro().build(dashboard).run()\n\n\n\n\n        \n        \n\n\nFigure 5.3: A Sample of Vizro Dashboard\n\n\n\n\n\n\n5.5.2 Standalone Page on Vizro Dashboard (Example # 02)\n\n# loading dataset \ndf = px.data.gapminder()\ngapminder_data = (\n        df.groupby(by=[\"continent\", \"year\"]).\n            agg({\"lifeExp\": \"mean\", \"pop\": \"sum\", \"gdpPercap\": \"mean\"}).reset_index()\n    )\n\n\nVizro._reset()\nsecond_page = vm.Page(\n    title=\"First Page\",\n    components=[\n        vm.Card(\n            text=\"\"\"\n                # First dashboard page\n                This pages shows the inclusion of markdown text in a page and how components\n                can be structured using Layout.\n            \"\"\",\n        ),\n        vm.Graph(\n            figure=px.box(gapminder_data, x=\"continent\", y=\"lifeExp\", color=\"continent\",\n                            labels={\"lifeExp\": \"Life Expectancy\", \"continent\": \"Continent\"}),\n        ),\n        vm.Graph(\n            figure=px.line(gapminder_data, x=\"year\", y=\"gdpPercap\", color=\"continent\",\n                            labels={\"year\": \"Year\", \"continent\": \"Continent\",\n                            \"gdpPercap\":\"GDP Per Cap\"}, title=''),\n        ),\n\n    ],\n)\n\ndashboard2 = vm.Dashboard(pages=[second_page])\nVizro().build(dashboard2).run()\n\n\n\n5.5.3 Multiple Pages on Vizro Dashboard\n\nVizro._reset()\n\nthird_page = vm.Page(\n    title=\"First Page\",\n    layout=vm.Layout(grid=[[0, 0], [1, 2], [1, 2], [1, 2]]),\n    components=[\n        vm.Card(\n            text=\"\"\"\n                # First dashboard page\n                This pages shows the inclusion of markdown text in a page and how components\n                can be structured using Layout.\n            \"\"\",\n        ),\n        vm.Graph(\n            figure=px.box(gapminder_data, x=\"continent\", y=\"lifeExp\", color=\"continent\",\n                            labels={\"lifeExp\": \"Life Expectancy\", \"continent\": \"Continent\"}),\n        ),\n        vm.Graph(\n            figure=px.line(gapminder_data, x=\"year\", y=\"gdpPercap\", color=\"continent\",\n                            labels={\"year\": \"Year\", \"continent\": \"Continent\",\n                            \"gdpPercap\":\"GDP Per Cap\"}),\n            ),\n    ],\n)\n\ndashboard3 = vm.Dashboard(pages=[third_page])\nVizro().build(dashboard3).run()\n\n\nVizro._reset()\n\nsecond_page = vm.Page(\n    title=\"Second Page\",\n    components=[\n        vm.Card(\n            text=\"\"\"\n                # First dashboard page\n                This pages shows the inclusion of markdown text in a page and how components\n                can be structured using Layout.\n            \"\"\",\n        ),\n        vm.Graph(\n            figure=px.box(gapminder_data, x=\"continent\", y=\"lifeExp\", color=\"continent\",\n                            labels={\"lifeExp\": \"Life Expectancy\", \"continent\": \"Continent\"}),\n        ),\n        vm.Graph(\n            figure=px.line(gapminder_data, x=\"year\", y=\"gdpPercap\", color=\"continent\",\n                            labels={\"year\": \"Year\", \"continent\": \"Continent\",\n                            \"gdpPercap\":\"GDP Per Cap\"}, title=''),\n        ),\n\n    ],\n)\n\nthird_page = vm.Page(\n    title=\"Third Page\",\n    layout=vm.Layout(grid=[[0, 0], [1, 2], [1, 2], [1, 2]]),\n    components=[\n        vm.Card(\n            text=\"\"\"\n                # First dashboard page\n                This pages shows the inclusion of markdown text in a page and how components\n                can be structured using Layout.\n            \"\"\",\n        ),\n        vm.Graph(\n            figure=px.box(gapminder_data, x=\"continent\", y=\"lifeExp\", color=\"continent\",\n                            labels={\"lifeExp\": \"Life Expectancy\", \"continent\": \"Continent\"}),\n        ),\n        vm.Graph(\n            figure=px.line(gapminder_data, x=\"year\", y=\"gdpPercap\", color=\"continent\",\n                            labels={\"year\": \"Year\", \"continent\": \"Continent\",\n                            \"gdpPercap\":\"GDP Per Cap\"}),\n            ),\n    ],\n)\n\ndashboard4 = vm.Dashboard(pages=[second_page, third_page])\nVizro().build(dashboard4).run()",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dashboard for Visualization</span>"
    ]
  },
  {
    "objectID": "dashboard.html#conclusions",
    "href": "dashboard.html#conclusions",
    "title": "5  Dashboard for Visualization",
    "section": "5.6 Conclusions",
    "text": "5.6 Conclusions",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dashboard for Visualization</span>"
    ]
  },
  {
    "objectID": "dashboard.html#exercises",
    "href": "dashboard.html#exercises",
    "title": "5  Dashboard for Visualization",
    "section": "5.7 Exercises",
    "text": "5.7 Exercises\n\nCreate a dashboard from Adidas (Ticker:ADR) sales data (Adidas US Sales Datasets.csv).",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dashboard for Visualization</span>"
    ]
  },
  {
    "objectID": "dashboard.html#footnotes",
    "href": "dashboard.html#footnotes",
    "title": "5  Dashboard for Visualization",
    "section": "",
    "text": "Shiny widgets and functionality can be incorporated in the quarto dashboard. Therefore, quarto dashboard is a powerful tool for creating interactive visualization.↩︎",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dashboard for Visualization</span>"
    ]
  },
  {
    "objectID": "overview.html",
    "href": "overview.html",
    "title": "1  Overview of Accounting Analytics",
    "section": "",
    "text": "Learning Objectives of the Chapter",
    "crumbs": [
      "Introduction to Accounting Analytics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview of Accounting Analytics</span>"
    ]
  },
  {
    "objectID": "overview.html#data-analytics-big-data",
    "href": "overview.html#data-analytics-big-data",
    "title": "1  Overview of Accounting Analytics",
    "section": "1.1 Data Analytics & Big Data",
    "text": "1.1 Data Analytics & Big Data\n\n     Given the availability of vast amount of data, companies in numerous industries exploit such data for competitive advantage, aiming to either increase revenues or decrease costs. Data Driven Decisions (DDD) are making significant differences in productivity, on Return on Assets (ROA), Return on Equity (ROE), asset utilization, and on market value (Provost and Fawcett 2013). Firms using data analytics in their operations can outperform their competitors by 5% in productivity and 6% in profitability (Barton and Court 2012). In 2017, 53% companies have adopted big data, as compared to only 17% in 2015 (Columbus 2017). Additionally, regulators are increasingly calling for organizations to use analytics (Protiviti 2017). This evolving landascape in industry emphasizes the significance of data analytics in organizations.\n     Analytics is a means of extracting value from data. Analytics is the assessment of data with technology tools. Today, there are more powerful analytics tools to more efficiently and effectively analyze a broader range of data and types of data than in the past. Thus, there is an increased opportunity for enhanced insights about what stories data can tell to address business issues and transform the way decisions are made.\n     The meaning of (big) data analytics varies across different disciplines and there is substantive confusion between the slightly differing characterizations of “big data,” “business intelligence,” and “data analytics” (Vasarhelyi, Kogan, and Tuttle 2015). Though many people consider big data in terms of quantities, it is also related to large-scale analysis of large amounts of data to generate insights and knowledge (Verver 2015). Big data is characterized by four Vs: Volume; Velocity; Variety; and Veracity. Volume refers to the size of the dataset, velocity to the speed of data generation, variety to the multiplicity of data sources, and veracity to the elimination of noise and obtaining truthful information from big data. Sometimes big data are characterized by six Vs: Volume, Velocity, Variety, Veracity, Variability, and Value; or, even seven Vs: Volume, Velocity, Variety, Veracity, Variability, Value, and Visualization (Sivarajah et al. 2017). Some people also identify sometimes eight Vs for big data. Figure 1.1 and Figure 1.2 depict the six and eight Vs of big data respectively.\n\n\n\n\n\n\nFigure 1.1: Six Vs of Big Data\n\n\n\n     Data analytics is defined as “the art and science of discovering and analyzing patterns, identifying anomalies, and extracting other useful information in data underlying or related to the subject matter of an audit through analysis, modeling, and visualization for the purpose of planning or performing the audit” (American Institute of Certified Public Accountants (AICPA) 2015, 105). Cao, Chychyla, and Stewart (2015) define big data analytics as the process of inspecting, cleaning, transforming, and modeling big data to discover and communicate useful information and patterns, suggest conclusions, and to provide support for decision-making.\n\n\n\n\n\n\nFigure 1.2: Eight Vs of Big Data\n\n\n\n      Data analytics promises significant potential in auditing. Therefore, in accounting, sometimes data analytics becomes synonymous with audit analytics. Audit analytics involves the application of data analytics in the audit. Specifically, American Institute of Certified Public Accountants (AICPA) (2017) defines audit data analytics as “the science and art of discovering and analyzing patterns, identifying anomalies and extracting other useful information in data underlying or related to the subject matter of an audit through analysis, modeling and visualization for the purpose of planning or performing the audit.” In other words, audit data analytics are techniques that can be used to perform a number of audit procedures such as risk assessment, tests of details, and substantive analytical procedure to gather audit evidence. The benefits of using audit data analytics include improved understanding of an entity’s operations and associated risk including the risk of fraud, increased potential for detecting material misstatements, and improved communications with those charged with governance of audited entities.\n\n\n1.1.1 Big Data Spectrum\n\n     The data dynamics and the way businesses are using data are relatively new to the world of business and something that accounting and business students must become more familiar with. Figure 1.3 depicts the big data spectrum. You’ll notice that the data in yellow at the left bottom portion of the spectrum has less of the four V’s. This typically is data that is sourced from enterprise resource planning (ERP) systems. This is also the type of data that a business analyst, especially an accountant, most often works with.\n     Continuing along the trajectory, you’ll see data generated from operating systems, such as call center records, email, voicemail, etc. From there, you’ll see data that comes from the web, including shopping cart information, web logs, browser history, promotion information, etc. This then moves beyond to the “biggest” category of data, which includes videos, radio-frequency identification (RFID), global positioning system (GPS) coordinates, social media feeds and more.\n\n\n\n\n\n\nFigure 1.3: Big Data Spectrum",
    "crumbs": [
      "Introduction to Accounting Analytics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview of Accounting Analytics</span>"
    ]
  },
  {
    "objectID": "overview.html#importance-of-data-analytics-in-accounting",
    "href": "overview.html#importance-of-data-analytics-in-accounting",
    "title": "1  Overview of Accounting Analytics",
    "section": "1.2 Importance of Data Analytics in Accounting",
    "text": "1.2 Importance of Data Analytics in Accounting\n\n     Data analytics is important for accounting profession because data gathering and analytics technologies have the potential to fundamentally change accounting and auditing task processes (Schneider et al. 2015). Scholars note that the emergence of data analytics will significantly change the infer/predict/assure (e.g., insight/foresight/oversight) tasks performed by accountants and auditors. Big data and analytics have increasingly important implications for accounting and will provide the means to improve managerial accounting, financial accounting, and financial reporting practices (Warren, Moffitt, and Byrnes 2015). It is further suggested that big data offers an unprecedented potential for diverse, voluminous datasets and sophisticated analyses. Research indicates that big data has great potential to produce better forecast estimates, going concern calculations, fraud, and other variables that are of concern to both internal and external auditors (M. G. Alles 2015). Moreover, auditors might reduce audit costs and enhance profitability and effectiveness by means of big data or data analytics. Sixty-six percent of internal audit departments currently utilize some form of data analytics as part of the audit process (Protiviti 2017).\n\n\n1.2.1 Data Analytics in Financial Accounting\n\n     Warren, Moffitt, and Byrnes (2015) note that “in financial accounting, big data will improve the quality and relevance of accounting information, thereby enhancing transparency and stakeholder decision-making. In reporting, big data can assist with the creation and refinement of accounting standards, helping to ensure that the accounting profession will continue to provide useful information as the dynamic, real-time, global economy evolves.” In particular, they suggest that big data could significantly impact the future of financial accounting and Generally Accepted Accounting Principles (GAAP). Big data can also help to supplement financial statement disclosures by accumulating, processing, and analyzing information about a given intangible of interest. Furthermore, big data or data analytics can help in narrowing the differences between accounting standards such US GAAP and International Financial Reporting Standards (IFRS) and facilitate different measurement processes such as Fair Value Accounting (FVA) by analyzing different kinds of unstructured data (Warren, Moffitt, and Byrnes 2015).\n     Crawley and Wahlen (2014) noted that data analytics allows researchers to explore a large amount of qualitative information disclosed by organizations, and examines the consequences of such disclosures. Moreover, data analytics now provides the opportunity to judge the informational content of qualitative financial information. For example, Davis, Piger, and Sedor (2012) found that the extent of optimism expressed in firms’ earnings announcements is positively associated with Return on Assets (ROA) and stock reactions. By the same token, Li (2010) suggested that the tone of forward-looking statements is positively associated with future earnings performance. In addition, Feldman et al. (2010) found that changes in disclosure tone is indicative of future changes in earnings. Interestingly, research shows that even information on social media such as Twitter can predict stock market responses (Bollen, Mao, and Zeng 2011).\n     Data analytics helps to relate textual data to earnings quality. For example, firms having more complicated and less transparent financial statement disclosures are more likely to have poor quality earnings, less persistent positive earnings and more persistent negative earnings (Li 2008). Li, Lundholm, and Minnis (2013) confirmed that firms discussing their competition frequently have ROAs that mean returns more severely than the firms discussing the competition infrequently.\n     With the help of textual data analytics, researchers recently documented the role that qualitative disclosures have in forming the information environment of organizations; such information environments include factors such as the number of analyst following a firm, characteristics of its investors, its trading activities, and the litigation it is involved with. Less readable 10-Ks are associated with greater number of analysts following the firm and a greater amount of effort needed to generate report about it (Lehavy, Li, and Merkley 2011). They also find that less readable 10-Ks are associated with greater dispersion, lower accuracy, and greater uncertainty in analyst’s earnings forecasts about a given firm.\n\n\n\n\n\n\n\nSummary Point\n\n\n\n\n\nData analytics in Financial Accounnting - A. has potential to enhance quality and relevance of accounting information, B. can supplemental financial statement disclosures, C. can facilitate different measurement processes, and D. allows to explore a large amount of qualitative information\n\n\n\n\n\n1.2.2 Data Analytics in Management Accounting\n\n     Warren et al. (2015, 397) noted that “in managerial accounting, big data will contribute to the development and evolution of effective management control systems and budgeting processes. In particular, they elaborate on how big data or data analytics can play a role in management control systems by discovering behaviors that have correlation with specific goal outcomes. Essentially, big data analytics can locate new kinds of behaviors that might impact goal outcomes by simplifying the identification of important motivational measurement tools linked to organizational goals. Moreover, by analyzing non-structured data, big data analytics can help discern employee morale, productivity, and customer satisfaction. Data analytics can also be used to improve “beyond budgeting practices” since traditional budgeting sometimes creates barriers to creativity and flexibility (Warren, Moffitt, and Byrnes 2015).\n     Richins et al. (2017) uggest that big data analytics could improve customer service quality. They suggest that most of the time organizations use structured data that are in their records to evaluate customer service quality; however, this approach does not take into account the customer perspective. Big data analytics allow organizations to evaluate this customer perspective by using unstructured data from social media or e-commerce sites, thus permitting organizations to have a holistic view of customer service quality.\n     Managers recognize that financial measures, alone, are insufficient to forecast future financial success or to use for performance management. Big data analytics provides opportunities to incorporate non-financial measures by incorporating unstructured data (Richins et al. 2017). Using big data analytics (particularly the analysis of unstructured data) accountants can identify the causes of underlying problems, understand ramifications, and develop plans to mitigate adverse impacts (Richins et al. 2017). Data analytics can also provide accountants with additional tools to monitor operations and product quality, discover opportunities to reduce costs, and contribute to decision-making (Dai and Vasarhelyi 2016).\n\n\n\n\n\n\n\nSummary Point\n\n\n\n\n\nData analytics in Management Accounnting - A. will contribute to the development of effective management control systems and budgeting processes, B. can enhance employee morale, productivity, and customer satisfaction, C. can enhance customer service quality by evaluating customer perspectives using unstructured data from social media or e-commerce, D. creates opportunities to incorporate non-financial measures by incorporating unstructured data, and E. provide accountants with additional tools to monitor operations and product quality, and discover opportunities to reduce costs.\n\n\n\n\n\n1.2.3 Data Analytics in Auditing\n\n     Data analytics has the potential to improve the effectiveness of auditing by providing new forms of audit evidence. Data analytics can be used in both auditing planning and in audit procedures, helping auditors to identify and assess risk by analyzing large volumes of data. Even organizations that have very immature capabilities indicate that a strong level of value is derived from including analytics in the audit process (Protiviti 2017).\n     Big data is being seen by practitioners as an essential part of assurance services (M. Alles and Gray 2016), but its application in auditing is not as straightforward as it is in marketing and medical research. Appelbaum (2016) and Cao, Chychyla, and Stewart (2015) identified several areas that are likely to benefit from the use of big data analytics. Some of the areas are:\n\nAt the engagement phase – supplementing auditors’ industry and client knowledge\nAt the planning phase – supplementing auditors’ risk assessment process\nAt the substantive test phase – verifying the management assertions\nAt the review phase – advanced data analytical tools as analytical procedures\nAt the continuous auditing phase – enhancing knowledge about the clients\n\n     Yoon, Hoogduin, and Zhang (2015) suggest that big data create great opportunities through providing audit evidence. They focused on the “sufficiency” and “appropriate” criteria and noted that though there are some issues about the propriety of big data due to different kinds of “noise,” big data can be used as complementary audit evidence. Additionally, they discussed how big data can be integrated with traditional audit evidence in order to add value in the process. Big data or data analytics can also help auditors to test the existence of assertions (e.g. fixed assets) using non-conventional data such as video recording (Warren, Moffitt, and Byrnes 2015). In the world of big data, potential types and sources of audit evidence have changed (Appelbaum 2016). For this reason, Krahel and Titera (2015) suggest that big data might change the focus of auditors, shifting emphasis from management to the verification of data.\n     Data quality and reliability or verifiability have become important issues in auditors’ evaluations of audit evidence. In this way, big data can be used as part of analytical procedures, which are required at the planning and review phase, but which are optional at the substantive procedure phase. However, many issues remain unresolved about how to use big data since analytical procedures and auditing standards are not very specific about the selection of analytical audit procedures; the choice depends on the professional judgment of auditors (Appelbaum, Kogan, and Vasarhelyi 2017). For this reason, auditors need to exercise increased professional skepticism in the big data era because in many cases sources of big data lack provenance and, subsequently, veracity, and sometimes auditors (particularly internal auditors) have little or no involvement in data quality evaluation of such sources (Appelbaum 2016). Considering the prediction that analytics will spell the demise of auditing, Richins et al. (2017) suggest that auditors in the big data era are still essential because they know “the language of business.” Particularly, they suggest that big data analytics cannot replace the professional judgment used by auditors, suggesting that analytics will instead complement auditors’ professional judgment.\n     M. Alles and Gray (2016) identify four potential advantages of incorporating big data into audit practices: strong predictive power to set expectations for financial statement audits, great opportunities to identify potential fraudulent activities, increased probabilities of discovering red flags, and the possibility of developing more predictive models for going concern assumptions. To that end, internal audit groups with dedicated analytics functions and organizations that have attained a managed or optimized to the state of analytics maturity are far more likely to conduct continuous auditing (Protiviti 2017). Though big data creates many opportunities for improving auditing, it also suffers from different shortcomings that hinder its application in Continuous Auditing (CA). For example, Zhang, Yang, and Appelbaum (2015) suggest big data characteristics such as volume, velocity, variety, and veracity creates problems in its application in CA through different gaps such as data consistency, data integrity, data identification, data aggregation, and data confidentiality.\n     Rose et al. (2017) found that the timing of the introduction of data analytics tools into the audit process affects the evaluation of evidence and professional judgment. Barr-Pulliam, Brown-Liburd, and Carlson (2023) found that jurors consider auditors more negligent when they use traditional auditing technique rather than audit data analytics techniques. Additionally, they confirmed that audit data analytics tools increase the perceptions of audit quality. Schneider et al. (2015) suggest that data analytics can be used by auditors to evaluate the internal control effectiveness and policy compliance. They further suggest that by analyzing unusual data flows, unexpected large volumes of data, high frequency transactions, or duplicate vendor payments, auditors can better detect fraud.\n\n\n\n1.2.4 Data Analytics in Tax Accounting\n\n     Traditionally, tax analytics has focused on hindsight, particularly dealing with data from transactions that have already occurred. However, recently tax organizations are looking to use data more for gaining insight and sometimes for foresight. Analytics can help to move tax toward insight and foresight, thus changing the mindset from “what do I need to do?” to “what do I need to know?” (Deloitte 2016).\n     Data analytics can help an organization and its tax function drive toward becoming an insight-driven organization, or IDO (Deloitte 2016). Various types of analytics can be applied to tax issues. Organizations have used tax analytics mostly in creating descriptive scorecards and visualizations (hindsight). These kinds of tax analytics help to determine where to allocate resources, focus on anomalies in results, and identify potential areas of risk.",
    "crumbs": [
      "Introduction to Accounting Analytics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview of Accounting Analytics</span>"
    ]
  },
  {
    "objectID": "overview.html#types-of-data-analytics",
    "href": "overview.html#types-of-data-analytics",
    "title": "1  Overview of Accounting Analytics",
    "section": "1.3 Types of Data Analytics",
    "text": "1.3 Types of Data Analytics\n\n     Data analytics can be classified in many ways, but usually there are four types of data analytics. Figure 1.4 depicts the types -\n\nDescriptive Analytics (Business Intelligence & Data Mining)\nDiagnostic Analytics\nPredictive Analytics (Forecasting)\nPrescriptive Analytics (Optimization & Simulation)\n\n\n1.3.1 Descriptive Analytics\n     Descriptive analytics looks at data and analyze past event for insight as to how to approach future events. It looks at past performance and understands the performance by mining historical data to understand the cause of success or failure in the past. Almost all management reporting such as sales, marketing, operations, and finance uses this type of analysis. Common types of descriptive analytis are -\n\nData Queries\nReports\nDescriptive Statistics\nData Dashboard\n\n\n\n\n\n\n\nFigure 1.4: Types of Data Analytics\n\n\n\n\n\n1.3.2 Diagnostic Analytics\n     In this analysis, we generally use historical data over other data to answer any question or for the solution of any problem. We try to find any dependency and pattern in the historical data of the particular problem. For example, companies go for this analysis because it gives a great insight into a problem, and they also keep detailed information about their disposal otherwise data collection may turn out individual for every problem and it will be very time-consuming. Common techniques used for Diagnostic Analytics are:\n\nData Discovery\nData Mining\nCorrelations\n\n\n\n1.3.3 Predictive Analytics\n     Predictive analytics turn the data into valuable, actionable information. predictive analytics uses data to determine the probable outcome of an event or a likelihood of a situation occurring. Predictive analytics holds a variety of statistical techniques from modeling, machine learning, data mining, and game theory that analyze current and historical facts to make predictions about a future event. Techniques that are used for predictive analytics are:\n\nLinear Regression\nTime Series Analysis and Forecasting\nData Mining\n\n\n\n1.3.4 Prescriptive Analytics\n     Prescriptive Analytics automatically synthesize big data, mathematical science, business rule, and machine learning to make a prediction and then suggests a decision option to take advantage of the prediction. Prescriptive analytics goes beyond predicting future outcomes by also suggesting action benefits from the predictions and showing the decision maker the implication of each decision option. Prescriptive Analytics not only anticipates what will happen and when to happen but also why it will happen. Further, Prescriptive Analytics can suggest decision options on how to take advantage of a future opportunity or mitigate a future risk and illustrate the implication of each decision option.",
    "crumbs": [
      "Introduction to Accounting Analytics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview of Accounting Analytics</span>"
    ]
  },
  {
    "objectID": "overview.html#data-analytics-processes",
    "href": "overview.html#data-analytics-processes",
    "title": "1  Overview of Accounting Analytics",
    "section": "1.4 Data Analytics Processes",
    "text": "1.4 Data Analytics Processes\n\n     As in in any scientific discipline, data analytics involves a rigorous step-by-step process. Each step demands different skills and know-how. However, to realize the full potential of data analytics, understanding the whole process is important. Figure 1.5 delineates the whole process.\n\n1.4.1 Defining the Questions\n     The first step in any data analysis process is to define your objective. In data analytics jargon, this is sometimes called the ‘problem statement’. Defining your objective means coming up with a hypothesis and figuring how to test it. For instance, your organization’s senior management might pose an issue, such as: “Why are we losing customers?” It’s possible, though, that this doesn’t get to the core of the problem. A data analyst’s job is to understand the business and its goals in enough depth that they can frame the problem the right way.\n\n\n1.4.2 Collecting the Data\n     \n\n\n1.4.3 Cleaning the Data\n     \n\n\n\n\n\n\nFigure 1.5: Data Analytics Process\n\n\n\n\n\n1.4.4 Analyzing the Data\n     \n\n\n1.4.5 Sharing Your Results",
    "crumbs": [
      "Introduction to Accounting Analytics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview of Accounting Analytics</span>"
    ]
  },
  {
    "objectID": "overview.html#analytics-mindset",
    "href": "overview.html#analytics-mindset",
    "title": "1  Overview of Accounting Analytics",
    "section": "1.5 Analytics Mindset",
    "text": "1.5 Analytics Mindset\n\n     Having an analytics mindset is important while performing data analytics processes. An analytics mindset is the ability to:\n\nAsk the right questions\nExtract, transform and load relevant data (i.e., the ETL process)\nApply appropriate data analytics techniques\nInterpret and share the results with stakeholders\n\n\n1.5.1 Ask the Right Questions\n     To drive better decisions, one must ask the right questions first and then seek answers in the data. Then one looks to find relevant data and the appropriate data sources to perform the analytics. These analytics will provide the insights and answer the business questions being asked, which then drive the decisions. Throughtout the process, there is a continuous feedback loop that makes the process iterative. An analytics mindset keeps asking questions until the right answers emerge. The right questions are those that lead to the right answers. Figure 1.6 depicts how analytics mindset works.\n\n\n\n\n\n\nFigure 1.6: Analytics Mindset Decision Making\n\n\n\n     Being able to ask the right question is not easy; rather it heavily relies on several factors. First, the analyst needs to understand who the relevant stakeholders are and their objectives. Knowing your audience and what they want to accomplish is critical to understanding value and how to identify a right question. Second, the analyst needs to have an understanding of the business and the underlying business processes — the overall business context. As an example, if you were asked to perform a competitive analysis across the high-tech industry and if you didn’t have a strong understanding of the industry and key performance indicators, you might not ask the right questions (e.g., select the right indicators to analyze).\n\n\n1.5.2 Extract, Transform, and Load Relevant Data (The ETL Process)\n     The first focus with this competency is understanding data characteristics and their relevance. In terms of data characteristics, we already discussed the four/six V’s and the big data spectrum. In determining relevance, this is a focus on what data aligns with the analysis you need to perform to answer your question.It is also important to understand the flow of data in an accounting information system to understand where your data is coming from and how it is generated. This understanding includes - type of accounting information systems, what modules are in the context, capabilities and the limitations of the data and so on. Once this understanding is established, the ETL process can begin. This starts with the extraction of data. For extraction, key things need to be known, including: what data to ask for, how to ask for data, how to manage data security, what format the data needs to be in.\n     The next step is transformation, which also is referred to as data cleansing. This involves converting data from one format to another to load it into an analytics tool. This includes making certain that only the data needed is extracted and that this data is complete and accurate. Data cleansing needs to be performed both before and after the data loading process. Loading data includes knowing which tool the data should be loaded into for the most efficient and effective analysis. For example, this might be driven by the amount of data and the capacity of a given analytics tool. Throughout the ETL process, it is important to maintain the integrity of your data. This is often done through data validation, for example, a control total of your data matching an account balance total in the general ledger.\n\n\n1.5.3 Apply Appropriate Data Analytics Techniques\n     In determining how to apply appropriate data analytics techniques, it is important to understand: the purpose of different types of data analytics techniques, how to determine which techniques are most appropriate for the objectives of your analysis. objectives might include a need to prove or disprove your expectation if one was developed. For example, during the planning phase of an audit, the auditor is required to assess risk. One way of doing this is by exploring the data and looking for anomalies. As the audit progresses into the execution phase, the auditor considers the risk of error or intentional misstatement, the effectiveness of controls and the amounts actually recorded. The objective is to confirm or disconfirm an expectation regarding recorded amounts.\n     There are many ways to analyze data. Some of the more fundamental analyses that you should be able to understand and apply include:\n– Ratios (e.g., gross margin or a day’s sales in accounts receivable)\n– Sorting (e.g., by industry or month)\n– Aggregation (e.g., total of an account balance)\n– Trends (e.g., the movement in inventory associated with both purchases and sales)\n– Comparisons (e.g., sales month to month)\n– Forecasting (e.g., budgeted expenses)\n     It is also important to gain familiarity with analytics tools. There are many tools capable of performing analytics and it isn’t necessary for you to know how to use each one, but you should have some hands-on experience with a few of the more fundamental tools that are most readily used by an analyst. Some of the fundamental tools include: Excel, Basic databases (Access), Visualization (Tableau, Power BI). It is also good to have a working knowledge or awareness of other tools, including those that might be specific to the career path you are choosing. Note that beyond these fundamental tools, there are other tools students should be familiar with, to a lesser extent (a working knowledge or awareness level).\n\n\n1.5.4 Interpret and Share the Results\n     As discussed previously, the end goal is to provide insights to your stakeholders based on the objectives that were identified. Your insights are derived from your interpretation of the analytics results. Therefore, it is important that you interpret the outcomes of your analysis appropriately, based on your question and expectation, if you had one. When you look at the results of your analysis, use your critical thinking and ask yourself:\n– What do you see?\n– Do you see what you expected to see?\n– Do your results make sense to you?\n– Is any further analysis required to meet your objective?\n     Once you have interpreted your results, you need to summarize them in a manner conducive to and compelling for your stakeholder. Visualization can be used as a technique and a way to present findings as well. You can make choices about displaying your analysis in a variety of ways, which might include tables, area charts, map charts, heat maps, Gantt charts, horizontal or vertical bar charts, pie charts, line charts, scatter plots, bubble charts and more. When making choices about which visualization is appropriate, there are many design principles to consider. These might include color, sizing, labeling, visual simplicity (e.g., elimination of visual clutter), etc",
    "crumbs": [
      "Introduction to Accounting Analytics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview of Accounting Analytics</span>"
    ]
  },
  {
    "objectID": "overview.html#data-analytics-skillset",
    "href": "overview.html#data-analytics-skillset",
    "title": "1  Overview of Accounting Analytics",
    "section": "1.6 Data Analytics Skillset",
    "text": "1.6 Data Analytics Skillset\n\n     Proficiency in data analytics involves a combination of skills. For example, a solid understanding in mathematics and statistics helps one to gain the foundational knowledge in data science.@fig-datascienceroadmap depicts the skills necessary to be proficient in data science.\n\n\n\n\n\n\nFigure 1.7: Data Science Skillset\n\n\n\n\n\n\n\n\nAlles, Michael G. 2015. “Drivers of the Use and Facilitators and Obstacles of the Evolution of Big Data by the Audit Profession.” Accounting Horizons 29 (2): 439–49. https://publications.aaahq.org/accounting-horizons/article-abstract/29/2/439/2188.\n\n\nAlles, Michael, and Glen L. Gray. 2016. “Incorporating Big Data in Audits: Identifying Inhibitors and a Research Agenda to Address Those Inhibitors.” International Journal of Accounting Information Systems 22: 44–59. https://www.sciencedirect.com/science/article/pii/S1467089516300811.\n\n\nAmerican Institute of Certified Public Accountants (AICPA). 2015. “Audit Analytics and Continuous Audit: Looking Toward the Future.”\n\n\n———. 2017. “Description Criteria for Management’s Description of the Entity’s Cybersecurity Risk Management Program.”\n\n\nAppelbaum, Deniz. 2016. “Securing Big Data Provenance for Auditors: The Big Data Provenance Black Box as Reliable Evidence.” Journal of Emerging Technologies in Accounting 13 (1): 17–36. https://publications.aaahq.org/jeta/article-abstract/13/1/17/9219.\n\n\nAppelbaum, Deniz, Alexander Kogan, and Miklos A. Vasarhelyi. 2017. “Big Data and Analytics in the Modern Audit Engagement: Research Needs.” Auditing: A Journal of Practice & Theory 36 (4): 1–27. https://publications.aaahq.org/ajpt/article-abstract/36/4/1/6016.\n\n\nBarr-Pulliam, Dereck, Helen L. Brown-Liburd, and Amanda G. Carlson. 2023. “Do Audit Data Analytics Influence Juror Perceptions of Audit Quality and Auditor Negligence?” Current Issues in Auditing 17 (2): P1–10. https://publications.aaahq.org/cia/article/17/2/P1/10096.\n\n\nBarton, Dominic, and David Court. 2012. “Making Advanced Analytics Work for You.” Harvard Business Review 90 (10): 78–83. http://www.buyukverienstitusu.com/s/1870/i/Making_Advanced_Analytics_Work_For_You.pdf.\n\n\nBollen, Johan, Huina Mao, and Xiaojun Zeng. 2011. “Twitter Mood Predicts the Stock Market.” Journal of Computational Science 2 (1): 1–8. https://www.sciencedirect.com/science/article/pii/S187775031100007X.\n\n\nCao, Min, Roman Chychyla, and Trevor Stewart. 2015. “Big Data Analytics in Financial Statement Audits.” Accounting Horizons 29 (2): 423–29. https://publications.aaahq.org/accounting-horizons/article-abstract/29/2/423/2177.\n\n\nColumbus. 2017. “53% Of Companies Are Adopting Big Data Analytics.” Forbes. https://www.forbes.com/sites/louiscolumbus/2017/12/24/53-of-companies-are-adopting-big-data-analytics/?sh=6c98f39939a1.\n\n\nCrawley, Michael, and James Wahlen. 2014. “Analytics in Empirical/Archival Financial Accounting Research.” Business Horizons 57 (5): 583–93. https://www.sciencedirect.com/science/article/pii/S0007681314000792.\n\n\nDai, Jun, and Miklos A. Vasarhelyi. 2016. “Imagineering Audit 4.0.” Journal of Emerging Technologies in Accounting 13 (1): 1–15. https://publications.aaahq.org/jeta/article-abstract/13/1/1/9242.\n\n\nDavis, Angela K., Jeremy M. Piger, and Lisa M. Sedor. 2012. “Beyond the Numbers: Measuring the Information Content of Earnings Press Release Language.” Contemporary Accounting Research 29 (3): 845–68. https://doi.org/10.1111/j.1911-3846.2011.01130.x.\n\n\nDeloitte. 2016. “Tax Data Analytics A New Era for Tax Planning and Compliance.” https://www2.deloitte.com/content/dam/Deloitte/us/Documents/Tax/us-tax-data-analytics-a-new-era-for-tax-planning-and-compliance.pdf.\n\n\nFeldman, Ronen, Suresh Govindaraj, Joshua Livnat, and Benjamin Segal. 2010. “Management’s Tone Change, Post Earnings Announcement Drift and Accruals.” Review of Accounting Studies 15 (4): 915–53. https://doi.org/10.1007/s11142-009-9111-x.\n\n\nKrahel, John Peter, and William R. Titera. 2015. “Consequences of Big Data and Formalization on Accounting and Auditing Standards.” Accounting Horizons 29 (2): 409–22. https://publications.aaahq.org/accounting-horizons/article/29/2/409/2149.\n\n\nLehavy, Reuven, Feng Li, and Kenneth Merkley. 2011. “The Effect of Annual Report Readability on Analyst Following and the Properties of Their Earnings Forecasts.” The Accounting Review 86 (3): 1087–1115. https://publications.aaahq.org/accounting-review/article-abstract/86/3/1087/3300.\n\n\nLi, Feng. 2008. “Annual Report Readability, Current Earnings, and Earnings Persistence.” Journal of Accounting and Economics 45 (2-3): 221–47. https://www.sciencedirect.com/science/article/pii/S0165410108000141.\n\n\n———. 2010. “The Information Content of Forward‐Looking Statements in Corporate Filings—A Naïve Bayesian Machine Learning Approach.” Journal of Accounting Research 48 (5): 1049–1102. https://doi.org/10.1111/j.1475-679X.2010.00382.x.\n\n\nLi, Feng, Russell Lundholm, and Michael Minnis. 2013. “A Measure of Competition Based on 10‐K Filings.” Journal of Accounting Research 51 (2): 399–436. https://doi.org/10.1111/j.1475-679X.2012.00472.x.\n\n\nProtiviti. 2017. “Embracing Analytics in Auditing.” https://www.protiviti.com/sites/default/files/2022-06/2017-internal-audit-capabilities-and-needs-survey-protiviti.pdf.\n\n\nProvost, Foster, and Tom Fawcett. 2013. “Data Science and Its Relationship to Big Data and Data-Driven Decision Making.” Big Data 1 (1): 51–59. https://doi.org/10.1089/big.2013.1508.\n\n\nRichins, Greg, Andrea Stapleton, Theophanis C. Stratopoulos, and Christopher Wong. 2017. “Big Data Analytics: Opportunity or Threat for the Accounting Profession?” Journal of Information Systems 31 (3): 63–79. https://publications.aaahq.org/jis/article-abstract/31/3/63/1114.\n\n\nRose, Anna M., Jacob M. Rose, Kerri-Ann Sanderson, and Jay C. Thibodeau. 2017. “When Should Audit Firms Introduce Analyses of Big Data into the Audit Process?” Journal of Information Systems 31 (3): 81–99. https://publications.aaahq.org/jis/article-abstract/31/3/81/1123.\n\n\nSchneider, Gary P., Jun Dai, Diane J. Janvrin, Kemi Ajayi, and Robyn L. Raschke. 2015. “Infer, Predict, and Assure: Accounting Opportunities in Data Analytics.” Accounting Horizons 29 (3): 719–42. https://publications.aaahq.org/accounting-horizons/article-abstract/29/3/719/2262.\n\n\nSivarajah, Uthayasankar, Muhammad Mustafa Kamal, Zahir Irani, and Vishanth Weerakkody. 2017. “Critical Analysis of Big Data Challenges and Analytical Methods.” Journal of Business Research 70: 263–86. https://www.sciencedirect.com/science/article/pii/S014829631630488X.\n\n\nThe Economist. 2017. “The World’s Most Valuable Resource Is No Longer Oil, but Data.” https://www.economist.com/leaders/2017/05/06/the-worlds-most-valuable-resource-is-no-longer-oil-but-data.\n\n\nVasarhelyi, Miklos A., Alexander Kogan, and Brad M. Tuttle. 2015. “Big Data in Accounting: An Overview.” Accounting Horizons 29 (2): 381–96. https://publications.aaahq.org/accounting-horizons/article-abstract/29/2/381/2184.\n\n\nVerver, John. 2015. “Six Audit Analytics Success Factors.” Internal Auditor 72 (3).\n\n\nWarren, J. Donald, Kevin C. Moffitt, and Paul Byrnes. 2015. “How Big Data Will Change Accounting.” Accounting Horizons 29 (2): 397–407. https://publications.aaahq.org/accounting-horizons/article/29/2/397/2168.\n\n\nYoon, Kyunghee, Lucas Hoogduin, and Li Zhang. 2015. “Big Data as Complementary Audit Evidence.” Accounting Horizons 29 (2): 431–38. https://publications.aaahq.org/accounting-horizons/article/29/2/431/2215.\n\n\nZhang, Juan, Xiongsheng Yang, and Deniz Appelbaum. 2015. “Toward Effective Big Data Analysis in Continuous Auditing.” Accounting Horizons 29 (2): 469–76. https://publications.aaahq.org/accounting-horizons/article/29/2/469/2160.",
    "crumbs": [
      "Introduction to Accounting Analytics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview of Accounting Analytics</span>"
    ]
  },
  {
    "objectID": "visualization.html",
    "href": "visualization.html",
    "title": "4  Data Visualization",
    "section": "",
    "text": "Learning Objectives of the Chapter",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "visualization.html#what-is-visualization",
    "href": "visualization.html#what-is-visualization",
    "title": "4  Data Visualization",
    "section": "4.1 What is Visualization?",
    "text": "4.1 What is Visualization?\n\n     To learn more about different kinds of visualization in R, you should visit - https://r-graph-gallery.com/ and https://www.kaggle.com/code/ruchiraperera/seaborn-vs-plotly-express.",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "visualization.html#importance-of-visualization",
    "href": "visualization.html#importance-of-visualization",
    "title": "4  Data Visualization",
    "section": "4.2 Importance of Visualization",
    "text": "4.2 Importance of Visualization",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "visualization.html#visualization-packages-in-r-and-python",
    "href": "visualization.html#visualization-packages-in-r-and-python",
    "title": "4  Data Visualization",
    "section": "4.3 Visualization Packages in R and Python",
    "text": "4.3 Visualization Packages in R and Python\n\nRPython\n\n\n\n     ggplot2 is a powerful package for visualization in R. In addition, some other packages enhance the functionalities of ggplot2. These packages include - gganimate, ggthemes, ggpubr, ggridges, ggmap, ggrepel, ggextra, ggpattern, ggcorrplot and so on.\n\n\n# Loading tidyverse package\nlibrary(tidyverse)\n# Loading dataset \ntips = read_csv(\n    'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv'\n)\n\n\n\n\n     In Python, matplotlib and seaborn are two of the powerful packages for visualization. Additionally, plotly, plotnine, altair, and bokeh are some other python packages that enhances visualization in python.\n\n\n# Loading Necessary Python Packages \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n\n# ggplot style \nplt.style.use('ggplot')\n# Loading dataset\ntips = sns.load_dataset('tips')",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "visualization.html#ggplot---grammar-of-graphics",
    "href": "visualization.html#ggplot---grammar-of-graphics",
    "title": "4  Data Visualization",
    "section": "4.4 ggplot - Grammar of Graphics",
    "text": "4.4 ggplot - Grammar of Graphics\n\n     In ggplot, a plot consists of at least four elements -\n\nData - the data frame\nAesthetic Mappings - aesthetic mappings map variable from the data frame to different kinds of aesthetics such as x coordinate, y coordinate, color, shape, size and so on.\nCoordinate System - the positioning of points\nGeom - geoms are geometirc objects such as points or lines.\n\n     You can also use cheatsheet of ggplot to know more about the ggplot. Another good source to learn more about visualization in R is The R Graph Library. Similarly, for Python, you can use The Python Graph Library.",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "visualization.html#types-of-visualization",
    "href": "visualization.html#types-of-visualization",
    "title": "4  Data Visualization",
    "section": "4.5 Types of Visualization",
    "text": "4.5 Types of Visualization\n\n4.5.1 Bar Diagram (Bar Plot)\n\n4.5.1.1 One Categorical Variable\n\nRPython\n\n\n\ntips |&gt; \n    count (sex) |&gt;\n    ggplot(mapping = aes(x = sex, y = n))+\n    geom_bar(stat = 'identity', width = 0.5, fill = \"orangered3\") + \n    labs(x = 'Sex', y = 'Total Observations')\n\n\n\n\nBar Plot of Gender (geom_bar)\n\n\n\n\n      Either of the the following code will also produce the same visualization.\n\ntips |&gt; \n    ggplot(mapping = aes(x = sex))+\n    geom_bar(width = 0.5, fill = \"maroon\") + \n    labs(x = 'Sex', y = 'Total Observations')\n\n\ntips |&gt; \n    ggplot(mapping = aes(x = sex))+\n    stat_count(width = 0.5, fill = \"maroon\") + \n    labs(x = 'Sex', y = 'Total Observations')\n\n\n\n\nsns.countplot(data = tips, x = \"sex\", width=0.5)\nplt.xlabel('Sex')\nplt.ylabel('Total Observations')\n\n\n\n\nBar Plot of Gender (sns.countplot)\n\n\n\n\n\n\n\n\n\n4.5.1.2 One Categorical Variable and One Continuous Variable\n\n     Barplot can also be used for two variables - both discrete (categorical) variables or one discrete (categorical) and one continuous variable. Below is bar plot for one discrete (categorical) and one continuous variable.\n\n\nRPython\n\n\n\ntips |&gt; \n    group_by(sex) |&gt;\n    summarize(total_bill = mean(total_bill)) |&gt;\n    ggplot(aes(x = sex, y = total_bill)) + \n    geom_col(width =0.6, fill = \"pink\") + \n    labs(x = \"Sex\", y = \"Total Bill\") + \n    geom_text(aes(label = round(total_bill,2)), vjust = -0.2)\n\n\n\n\n\n\n\n\n     The following code will produce the same results.\n\ntips |&gt; \n    ggplot(mapping = aes(x = sex, y = total_bill))+\n    geom_bar(stat = 'summary', fun = \"mean\", position = \"dodge\",\n    width = 0.60, fill = \"pink\") + \n    labs(x = \"Sex\", y = \"Total Bill\")\n\n\n\n\n\n\n\n\n\n\n\nsns.barplot(data = tips, x = \"sex\", y = \"total_bill\",\n            width= 0.5, \n            errorbar= None)\nplt.xlabel('Sex')\nplt.ylabel('Total Bill')\n\n\n\n\nBar Plot of Gender (sns.barplot)\n\n\n\n\n     The following code will add text value on the bars in barplot.\n\nax = sns.barplot(data = tips, x = \"sex\", y = \"total_bill\",\n            width= 0.5, \n            errorbar= None)\n\nfor i in ax.containers:\n    ax.bar_label(i,)\n\nplt.xlabel('Sex')\nplt.ylabel('Total Bill')\n\n\n\n\n\n\n4.5.1.3 Two Categorical Variables\n     Below is a bar plot for both discrete (categorical) variables.\n\nRPython\n\n\n\ntips |&gt; \n    count (sex, day) |&gt;\n    ggplot(mapping = aes(x = sex, y = n, fill = day))+\n    geom_bar(stat = 'identity', position = \"dodge\") + \n    labs(x = \"Sex\", y = \"Total Observations\")\n\n\n\n\nBar Plot of Gender (geom_bar - unstacking bar)\n\n\n\n\n     The following code will also produce the same visualization.\n\ntips |&gt; \n    #count (sex, day) |&gt;\n    ggplot(mapping = aes(x = sex, fill = day))+\n    geom_bar(stat = 'count', position = \"dodge\") + \n    labs(x = \"Sex\", y = \"Total Observations\"\n         ,fill = \"Day\"\n    )\n\n\n\n\n\n\n\n\n\ntips |&gt; \n    count (sex, day) |&gt;\n    ggplot(mapping = aes(x = sex, y = n, fill = day))+\n    geom_bar(stat = 'identity', position = \"stack\") + # position = \"fill\"\n    labs(x = \"Sex\", y = \"Total Observations\")\n\n\n\n\n\n\n\n\n     The following code will also produce the same visualization.\n\ntips |&gt; \n    #count (sex, day) |&gt;\n    ggplot(mapping = aes(x = sex, fill = day))+\n    geom_bar(stat = 'count', position = \"stack\") + # position = \"fill\"\n    labs(x = \"Sex\", y = \"Total Observations\"\n         ,fill = \"Day\"\n    )\n\n\n\n\n\n\n\n\n\n\n\nsns.countplot(data = tips, x = \"sex\", hue = \"day\")\nplt.xlabel('Sex')\nplt.ylabel('Total Observations')\n\n\n\n\nBar Plot of Gender (sns.countplot - unstacking bar)\n\n\n\n\n     Stacked barchart cannot be created using seaborn. So, we use alternatives -\n\ntips[['sex', 'day']].value_counts().reset_index() \\\n    .pivot(index = \"sex\", columns = \"day\", values = 'count') \\\n    .plot(kind = \"bar\", stacked = True)\nplt.xticks(rotation = 360)\n\n(array([0, 1]), [Text(0, 0, 'Male'), Text(1, 0, 'Female')])\n\nplt.xlabel(\"Sex\")\nplt.ylabel(\"Total Observations\")\nplt.legend(loc = \"upper right\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.5.2 Histogram\n\n4.5.2.1 One Continuous Variable\n\nRPython\n\n\n\ntips |&gt;\n    ggplot(aes(x = total_bill))+\n    geom_histogram(binwidth = 2.25, fill = \"orangered3\") + \n    labs(x = \"Total Bill\", y = \"Count\") \n\n\n\n\n\n\n\n\n     The following code will generate the same results with a little modification -\n\ntips |&gt;\n    ggplot(aes(x = total_bill))+\n    geom_histogram(binwidth = 2.25, fill = \"orangered3\", col = \"white\") + \n    labs(x = \"Total Bill\", y = \"Count\")\n\n\n\n\nsns.histplot(data = tips, x = \"total_bill\", binwidth=2.25)\nplt.xlabel(\"Total Bill\")\nplt.ylabel(\"Count\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.5.2.2 One Continuous and One Categorical Variable\n\nRPython\n\n\n\ntips |&gt;\n    ggplot(aes(x = total_bill, fill = sex))+\n    geom_histogram(binwidth = 2.25)+\n    labs(x = \"Total Bill\")\n\n\n\n\n\n\n\n\n     The following code will generate the same results -\n\ntips |&gt;\n    ggplot(aes(x = total_bill, color = sex))+\n    geom_histogram(binwidth = 2.25)\n\n\n\n\nsns.histplot(data = tips, x = \"total_bill\", hue = \"sex\", binwidth=2.25)\nplt.xlabel(\"Total Bill\")\nplt.ylabel(\"Count\")\n\n\n\n\n\n\n\n\n\nsns.FacetGrid(data=tips, col=\"sex\") \\\n    .map(sns.histplot, \"total_bill\", binwidth = 2.25)\n\n\n\n\n\n\n\n4.5.3 Density Plot\n\n4.5.3.1 One Continuous Variable\n\nRPython\n\n\n\ntips |&gt;\n    ggplot(aes(x = total_bill))+\n    geom_density( size = 1, color = \"orangered3\"\n        #adjust = 0.2\n    ) + \n    labs(x = \"Total Bill\", y = \"Density\")\n\n\n\n\n\n\n\n\n\n\n\nsns.kdeplot(data = tips, x = \"total_bill\"\n            #,bw_adjust = 0.20\n            )\nplt.xlabel(\"Total Bill\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.5.3.2 Two Continuous Variables\n\nRPython\n\n\n\ntips |&gt;\n    select(1:2) |&gt;\n    pivot_longer(cols = everything(), names_to = \"types\", values_to = \"values\") |&gt;\n    ggplot(aes(x = values, col = types))+\n    geom_density(size = 1)\n\n\n\n\n\n\n\n\n\n\n\nsns.kdeplot(data = tips[['total_bill', 'tip']])\nplt.xlabel(\"Total Bill\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.5.3.3 One Continuous Variable and One Categorical Variable\n\nRPython\n\n\n\ntips |&gt;\n    ggplot(aes(x = total_bill, fill = sex))+\n    geom_density(\n        #adjust = 0.2\n    )+ \n    labs(x = \"Total Bill\", y = \"Density\")\n\n\n\n\n\n\n\n\n\ntips |&gt;\n    ggplot(aes(x = total_bill, color = sex))+\n    geom_density(size = 1\n        #adjust = 0.2\n    )+ \n    labs(x = \"Total Bill\", y = \"Density\")\n\n\n\n\n\n\n\n\n\n\n\nsns.kdeplot(data = tips, x = \"total_bill\", hue = \"sex\")\nplt.xlabel(\"Total Bill\")\n\n\n\n\n\n\n\n\n\nsns.kdeplot(data = tips, x = \"total_bill\", hue = \"sex\", multiple = \"stack\")\nplt.xlabel(\"Total Bill\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.5.4 Point Plot\n\n4.5.4.1 One Categorical and One Continuous Variable\n\nRPython\n\n\n\ntips |&gt; \n    ggplot(aes(x = sex, y = total_bill, group = 1)) + \n    stat_summary(aes(sex, total_bill), geom = \"point\", fun.y = mean, size = 2, col = \"red\")+\n    stat_summary(aes(sex, total_bill), geom = \"line\", fun.y = mean, size = 1.5, col = \"red\",size = 2.1) + \n    labs(x = \"Sex\", y = \"Total Bill\")\n\n\n\n\nLine Plot of Gender (geom_line - mean)\n\n\n\n\n     The following code will also produce the same visualization.\n\ntips |&gt; \n    group_by(sex) |&gt;\n    summarize(total_bill = mean(total_bill)) |&gt;\n    ggplot(aes(x = sex, y = total_bill, group = 1)) + \n    geom_point(col = \"red\", size = 2)+\n    geom_line(col = \"red\", size = 2.1) + \n    labs(x = \"Sex\", y = \"Total Bill\")\n\n\n\n\n\n\n\n\n\n\n\nsns.pointplot(data = tips, x = \"sex\", y = \"total_bill\", errorbar=None)\nplt.xlabel('Sex')\nplt.ylabel(\"Total Bill\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.5.4.2 Two Categorical Variables and One Continuous Variable\n\nRPython\n\n\n\ntips |&gt;\n    ggplot(aes(x = sex, y = total_bill, group = smoker, color = smoker)) + \n    stat_summary(aes(x = sex, y = total_bill), geom = \"point\", fun.y = mean) + \n    stat_summary(aes(x = sex, y = total_bill), geom = \"line\", fun.y = mean, size = 1.1) + \n    labs(x = \"Sex\", y = \"Total Bill\" #, color = \"Smoker\"\n    )\n\n\n\n\n\n\n\n\n     The following code will also produce the same visualization.\n\ntips |&gt;\n    group_by(sex, smoker) |&gt;\n    summarize( total_bill = mean(total_bill)) |&gt;\n    ggplot(aes(x = sex, y = total_bill, group = smoker , color = smoker)) + \n    geom_point()+\n    geom_line(size = 1.1)+\n    labs(x = \"Sex\", y = \"Total Bill\")\n\n\n\n\n\n\n\n\n\n\n\nsns.pointplot(data = tips, x = \"sex\", y = \"total_bill\", \n              hue = \"smoker\", errorbar= None)\nplt.xlabel(\"Sex\")\nplt.ylabel(\"Total Bill\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.5.5 Box Plot\n\nRPython\n\n\n\ntips |&gt;\n    ggplot(aes(x = sex, y = total_bill))+\n    geom_boxplot(fill = \"pink\") + \n    labs (x = \"Sex\", y = \"Total Bill\")\n\n\n\n\n\n\n\n\n\ntips |&gt;\n    ggplot(aes(x = sex, y = total_bill))+\n    geom_boxplot(fill = \"pink\") + \n    labs (x = \"Sex\", y = \"Total Bill\") + \n    facet_wrap(~smoker)\n\n\n\n\n\n\n\ntips |&gt;\n    ggplot(aes(x = sex, y = total_bill))+\n    geom_boxplot(fill = \"pink\") + \n    labs (x = \"Sex\", y = \"Total Bill\") + \n    facet_grid(time~smoker)\n\n\n\n\n\n\n\n\n\n\n\nsns.boxplot(data = tips, x = \"sex\", y = \"total_bill\", color = \"pink\")\nplt.xlabel(\"Sex\")\nplt.ylabel(\"Total Bill\")\n\n\n\n\n\n\n\n\n\nsns.catplot(data = tips, x = \"sex\", y = \"total_bill\", \n            color = \"pink\", kind = \"box\", row = \"smoker\"\n           )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsns.catplot(data = tips, x = \"sex\", y = \"total_bill\", \n            color = \"pink\", kind = \"box\", row = \"smoker\"\n            ,col = \"time\"\n           )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.5.6 Scatter Plot\n\nRPython\n\n\n\ntips |&gt;\n    ggplot(aes(x = total_bill, y = tip))+\n    geom_point(col = \"blue\")+\n    labs(x = \"Total Bill\", y = \"Tip\")\n\n\n\n\n\n\n\n\n\n\n\nsns.scatterplot(data = tips, x = \"total_bill\", y = \"tip\")\nplt.xlabel(\"Total Bill\")\nplt.ylabel(\"Tip\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.5.7 Regression Plot\n\nRPython\n\n\n\ntips |&gt;\n    ggplot(aes(x = total_bill, y = tip))+\n    geom_point(col = \"blue\")+\n    geom_smooth(method = \"lm\", col = \"orange\") + \n    labs(x = \"Total Bill\", y = \"Tip\")\n\n\n\n\n\n\n\n\n\ntips |&gt;\n    ggplot(aes(x = total_bill, y = tip, col = sex))+\n    geom_point(col = \"blue\")+\n    geom_smooth(method = \"lm\") + \n    labs(x = \"Total Bill\", y = \"Tip\")\n\n\n\n\n\n\n\n\n\n\n\nsns.lmplot(data = tips, x = \"total_bill\", y = \"tip\")\n\n\n\n\n\n\n\nplt.xlabel(\"Total Bill\")\nplt.ylabel(\"Tip\")\n\n\n\n\n\n\n\n\n\nsns.regplot(data = tips, x = \"total_bill\", y = \"tip\")\nplt.xlabel(\"Total Bill\")\nplt.ylabel(\"Tip\")\n\n\n\n\n\n\n\n\n\nsns.lmplot(data = tips, x = \"total_bill\", y = \"tip\", hue = \"sex\")\n\n\n\n\n\n\n\nplt.xlabel(\"Total Bill\")\nplt.ylabel(\"Tip\")",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "visualization.html#exercises-01",
    "href": "visualization.html#exercises-01",
    "title": "4  Data Visualization",
    "section": "4.6 Exercises # 01",
    "text": "4.6 Exercises # 01\n\nDownload student data from the url and create a pointplot (lineplot) of students average math score (math.grade) of gender (gender). Please note that the variable gender includes a label called other in addition to M and F; you should filter out obsevations of the label other before you create visualization.\nFrom the dataset in above (question 1), compare, using pointplot (lineplot), the average math (math.grade) and science score (sciences.grade) of different students based on gender (gender). You might need to use pivot_longer function to reshape the data frame before visualizing the relation.",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "visualization.html#interactive-visualization",
    "href": "visualization.html#interactive-visualization",
    "title": "4  Data Visualization",
    "section": "4.7 Interactive Visualization",
    "text": "4.7 Interactive Visualization\n\n     Interactive Visualization involves graphical presentation of data that permits users to engage with the visual elements directly. Unlike static visulization, interactive visualization allows users to manipulate data, explore different aspects, and customize the visualization in real time. The primary objective of interactive visualization is to make data exploration more intuititve and dynamic. The benefits of interactive visualzation include - enhaned engagement, deeper insights, customization, and exploration and discovery.\n\n\nRPythonPlotnine\n\n\n\nlibrary(plotly)\n\n\np = ggplot(data = tips, aes(x = sex)) + \n    geom_bar(width = 0.5, fill = \"orangered3\") + \n    labs(x = \"Gender\", y = \"Total Observations\")\n\nggplotly(p)\n\n\n\n\n\n\np2 = tips |&gt;\n    ggplot(aes(x = time, y = total_bill, group = smoker, color = smoker))+\n    stat_summary(aes(x = time, y = total_bill), geom = \"point\", fun.y = mean) + \n    stat_summary(aes(x = time, y = total_bill), geom = \"line\", fun.y = mean, size = 1.1) + \n    labs (x = \"Time\", y = \"Total Bill\")\n\nggplotly(p2)\n\n\n\n\n\n\n\n\nimport plotly.express as px\n\n\nfig = px.histogram(tips, x = \"sex\") \\\n    .update_traces(marker_color = \"orangered\") \\\n    .update_xaxes(title = \"Sex\") \\\n    .update_yaxes(title = \"Count\")\nfig.show()\n\n                        \n                                            \n\n\n\npx.histogram(tips, x = \"sex\", y = \"total_bill\",histfunc='avg') \\\n    .update_traces(marker_color = \"orangered\") \\\n    .update_xaxes(title = \"Sex\") \\\n    .update_yaxes(title = \"Average Total Bill\") \\\n    .show()\n\n                        \n                                            \n\n\n\npx.histogram(tips, x=\"total_bill\",histnorm='probability density',\n             width=600, height=400) \\\n                .update_xaxes(title = \"Total Bill\") \\\n                .update_yaxes(title =\"Density\")\n\n                        \n                                            \n\n\n\n\n\n#import plotnine as p9\nfrom plotnine import *\nimport plotly.tools as tls\n\ndf = tips.groupby([\"sex\"])[\"total_bill\"].agg('mean').reset_index()\n\n\n(\n    ggplot(df, aes(x = \"sex\", y = \"total_bill\", group = 1)) + \n    geom_point(color = \"blue\")+\n    geom_line(color = \"orange\", size = 1.1) + \n    labs(x = \"Sex\", y = \"Average Total Bill\")\n)\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\n\n\n\nplotly_fig = (\n    ggplot(df, aes(x = \"sex\", y = \"total_bill\", group = 1)) + \n    geom_point(color = \"blue\")+\n    geom_line(color = \"orange\", size = 1.1)\n)\ntls.mpl_to_plotly(plotly_fig.draw()).show()\n\n                        \n                                            \n\n\n\ndf2 = tips.groupby([\"sex\", \"smoker\"])[\"total_bill\"] \\\n    .agg('mean') \\\n    .round(2) \\\n    .reset_index()\n\n(\n    ggplot(df2, aes(x = \"sex\", y = \"total_bill\",  group = \"smoker\", color = \"smoker\")) + \n    geom_point()+\n    geom_line(size = 1.1) + \n    labs(x = \"Sex\", y = \"Average Total Bill\")\n)\n\n&lt;Figure Size: (640 x 480)&gt;",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "visualization.html#exercises-02",
    "href": "visualization.html#exercises-02",
    "title": "4  Data Visualization",
    "section": "4.8 Exercises # 02",
    "text": "4.8 Exercises # 02",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "foundations.html",
    "href": "foundations.html",
    "title": "2  Foundations of Accounting Data",
    "section": "",
    "text": "2.1 Types of Accounting Data",
    "crumbs": [
      "Introduction to Accounting Analytics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Foundations of Accounting Data</span>"
    ]
  },
  {
    "objectID": "foundations.html#data-sources-and-collection-methods",
    "href": "foundations.html#data-sources-and-collection-methods",
    "title": "2  Foundations of Accounting Data",
    "section": "2.2 Data Sources and Collection Methods",
    "text": "2.2 Data Sources and Collection Methods",
    "crumbs": [
      "Introduction to Accounting Analytics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Foundations of Accounting Data</span>"
    ]
  },
  {
    "objectID": "foundations.html#data-quality-integrity",
    "href": "foundations.html#data-quality-integrity",
    "title": "2  Foundations of Accounting Data",
    "section": "2.3 Data Quality & Integrity",
    "text": "2.3 Data Quality & Integrity\nsummary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2\n\n\n\nplot(mtcars[1:3])\n\n\n\n\n\n\n\n\nSee Figure 2.1 for first ggplot graph\n\nlibrary(tidyverse)\nmtcars %&gt;% \n  as_tibble() %&gt;% \n  ggplot(mapping = aes(x = mpg, y = disp))+\n  geom_point()+\n  geom_smooth()+\n  labs(x = 'Miles Per Gallon (mpg)',\n       y = 'Displacement in Cubic Inches (disp)')\n\n\n\n\n\n\n\nFigure 2.1: Scatter plot and line plot of the relation between mpg and disp\n\n\n\n\n\n\nlibrary(lubridate)\n\n\nimport os\nimport sys\nsys.version\n\n'3.11.1 (tags/v3.11.1:a7a450f, Dec  6 2022, 19:58:39) [MSC v.1934 64 bit (AMD64)]'\n\n\n\nfor x in os.listdir():\n  print (x)\n\n.git\n.gitattributes\n.gitignore\n.quarto\n.README.md.swp\n.README_BASE_1260.md.swp\n.README_LOCAL_1260.md.swp\n.README_REMOTE_1260.md.swp\naccounting_analytics_book\nadvanced_analytics.qmd\nchapter1_solution.qmd\nchapter2_solution.qmd\ncover.png\ndashboard.qmd\ndata_management.qmd\neda.qmd\nethics.qmd\nfoundations.qmd\nfoundations.rmarkdown\nfoundations_files\nfraud.qmd\nfuture.qmd\nimages\nindex.qmd\nintro.qmd\noverview.qmd\nperformance_measurement.qmd\npredictive.qmd\nprescriptive.qmd\npython_basics.qmd\nREADME.html\nREADME.md\nREADME_files\nreferences.bib\nreferences.qmd\nrequirements.txt\nr_basics.qmd\nvisualization.qmd\n_book\n_quarto.yml",
    "crumbs": [
      "Introduction to Accounting Analytics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Foundations of Accounting Data</span>"
    ]
  },
  {
    "objectID": "foundations.html#data-sources-and-collecfig-firstplottion-methods",
    "href": "foundations.html#data-sources-and-collecfig-firstplottion-methods",
    "title": "2  Foundations of Accounting Data",
    "section": "2.2 Data Sources and Collecfig-firstplottion Methods",
    "text": "2.2 Data Sources and Collecfig-firstplottion Methods",
    "crumbs": [
      "Introduction to Accounting Analytics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Foundations of Accounting Data</span>"
    ]
  },
  {
    "objectID": "predictive.html",
    "href": "predictive.html",
    "title": "7  Predictive Modeling - Linear Regression",
    "section": "",
    "text": "Learning Objectives of the Chapter",
    "crumbs": [
      "Predictive and Prescriptive Analytics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Predictive Modeling - Linear Regression</span>"
    ]
  },
  {
    "objectID": "predictive.html#introduction",
    "href": "predictive.html#introduction",
    "title": "7  Predictive Modeling - Linear Regression",
    "section": "7.1 Introduction",
    "text": "7.1 Introduction\n     Discussion on predictive analytics.",
    "crumbs": [
      "Predictive and Prescriptive Analytics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Predictive Modeling - Linear Regression</span>"
    ]
  },
  {
    "objectID": "predictive.html#regression-analysis",
    "href": "predictive.html#regression-analysis",
    "title": "7  Predictive Modeling - Linear Regression",
    "section": "7.2 Regression Analysis",
    "text": "7.2 Regression Analysis\n\n7.2.1 Simple Linear Regression\n     Regression analysis is one of very useful predictive modeling techniques that identify the relationship between two or more variables. The objective of linear regression is to identify a linear line of best fit that can predict the outcome variable (target variable/dependent variable/response variable) for one or more independent variables(predictors). For example, we can draw a scatter diagram to see the relation between horsepower and miles per gallon (MPG). Figure 7.1 and Figure 7.2 show the relationship between horsepower and MPG in R and Python respectively. It is clear that there exists a negative relationship between horsepower and MPG and it makes sense because more power means higher fuel consumption. Similarly, there is negative relationship between vehicle weight and MPG because heavier vehicles need more energy to move (Figure 7.3 and Figure 7.4). The equation of a simple linear regression is - \\[y= mX + C\\]\n     where \\(y\\) = Target variable (Dependent variable); \\(m\\) = slope or rate of change; \\(X\\) = predictor or independent variable; and \\(C\\) = intercept or constant.",
    "crumbs": [
      "Predictive and Prescriptive Analytics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Predictive Modeling - Linear Regression</span>"
    ]
  },
  {
    "objectID": "predictive.html#time-series-analysis",
    "href": "predictive.html#time-series-analysis",
    "title": "7  Predictive Modeling - Linear Regression",
    "section": "7.3 Time Series Analysis",
    "text": "7.3 Time Series Analysis",
    "crumbs": [
      "Predictive and Prescriptive Analytics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Predictive Modeling - Linear Regression</span>"
    ]
  },
  {
    "objectID": "predictive.html#exercises",
    "href": "predictive.html#exercises",
    "title": "7  Predictive Modeling - Linear Regression",
    "section": "7.4 Exercises",
    "text": "7.4 Exercises\n\nCalculate a linear model between PepsiCo stock returns and S&P 500 Market index (the Ticker of S&P 500 Index is ^GSPC)",
    "crumbs": [
      "Predictive and Prescriptive Analytics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Predictive Modeling - Linear Regression</span>"
    ]
  },
  {
    "objectID": "data_management.html",
    "href": "data_management.html",
    "title": "6  Data Management in Accounting",
    "section": "",
    "text": "Learning Objectives of the Chapter",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Management in Accounting</span>"
    ]
  },
  {
    "objectID": "data_management.html#data-management",
    "href": "data_management.html#data-management",
    "title": "6  Data Management in Accounting",
    "section": "6.1 Data Management",
    "text": "6.1 Data Management\n\n     Data management is the practice of collecting, keeping, and using data securely, efficiently, and cost-effectively. Data management is important for a variety of data-driven use cases including end-to-end business process execution, regulatory compliance, accurate analytics and AI, data migration, and digital transformation.\n     Managing digital data in an organization involves a broad range of tasks, policies, procedures, and practices. The work of data management has a wide scope, covering factors such as how to:\n\nCreate, access, and update data across a diverse data tier\nStore data across multiple clouds and on premises\nProvide high availability and disaster recovery\nUse data in a growing variety of apps, analytics, and algorithms\nEnsure data privacy and security\nArchive and destroy data in accordance with retention schedules and compliance requirements\n\n     Data management systems are built on data management platforms and can include databases, data lakes and data warehouses, big data management systems, data analytics, and more.",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Management in Accounting</span>"
    ]
  },
  {
    "objectID": "data_management.html#relational-database",
    "href": "data_management.html#relational-database",
    "title": "6  Data Management in Accounting",
    "section": "6.2 Relational Database",
    "text": "6.2 Relational Database\n\n     Relational databases organize data into rows and columns, which form a table and different tables are connected to each other usign either primary key or foreign key. Here’s a simple example of two tables a small business might use to process orders for its products. The first table is a customer info table, so each record includes a customer’s name, address, shipping and billing information, phone number, and other contact information. Each bit of information (each attribute) is in its own column, and the database assigns a unique ID (a key) to each row. In the second table—a customer order table—each record includes the ID of the customer that placed the order, the product ordered, the quantity, the selected size and color, and so on—but not the customer’s name or contact information.\n     These two tables have only one thing in common: the ID column (the key). But because of that common column, the relational database can create a relationship between the two tables. Then, when the company’s order processing application submits an order to the database, the database can go to the customer order table, pull the correct information about the product order, and use the customer ID from that table to look up the customer’s billing and shipping information in the customer info table. The warehouse can then pull the correct product, the customer can receive timely delivery of the order, and the company can get paid.",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Management in Accounting</span>"
    ]
  },
  {
    "objectID": "data_management.html#relational-database-management-systems-rdbms",
    "href": "data_management.html#relational-database-management-systems-rdbms",
    "title": "6  Data Management in Accounting",
    "section": "6.3 Relational Database Management Systems (RDBMS)",
    "text": "6.3 Relational Database Management Systems (RDBMS)\n\n     While a relational database organizes data based off a relational data model, a relational database management system (RDBMS) is a more specific reference to the underlying database software that enables users to maintain it. These programs allow users to create, update, insert, or delete data in the system, and they provide:\n\nData structure\nMulti-user access\nPrivilege control\nNetwork access\n\n     Examples of popular RDBMS systems include MySQL, PostgreSQL, and IBM DB2. Additionally, a relational database system differs from a basic database management system (DBMS) in that it stores data in tables while a DBMS stores information as files.",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Management in Accounting</span>"
    ]
  },
  {
    "objectID": "data_management.html#creating-a-relational-database-using-postgresql",
    "href": "data_management.html#creating-a-relational-database-using-postgresql",
    "title": "6  Data Management in Accounting",
    "section": "6.4 Creating a Relational Database Using PostgreSQL",
    "text": "6.4 Creating a Relational Database Using PostgreSQL\n\n     PostgreSQL is a widely used open-source Relational Database Management System (RDBMS). Since its release in 1996, PostgreSQL has carved a niche as one of the most robust and reliable database systems in the Tech industry. PostgreSQL is known for its rich feature set, reliability, scalability, and strong community support network.\n\n\n6.4.1 Installing PostgreSQL\n\n     To install PostgreSQL locally on your computer, visit the installer by EDB, and download the newest version compatible with your operating system. To install PostgreSQL on Windows, you need to have administrator privileges. Below, we delineate the steps to install the PostgreSQL in windows.\n     Step 01: When the downloading is complete, double click the downloaded file and an installation wizard will appear and guide you through multiple steps. Click “Next” to specify directory.\n\n\n\nInstallation Wizard\n\n\n     Step 02: You can specify the location of PostgreSQL, or go with the default choice\n\n\n\nInstallation Directory\n\n\n     Step 03: To use PostgreSQL, you need to install PostgreSQL server. For our installation and uses purposes, we select the following servers - PostgreSQL Server, pgAdmin4, and Command Line Tools.\n\n\n\nServer Selection\n\n\n     Step 04: Then, we need to choose the storage directory. Alternatively, we can go with the default directory.\n\n\n\nStorage Directory\n\n\n     Step 05: At this point, you need to choose your passowrd. It is important to note that the password will be used to connect to the database. Therefore, you must remember your password.\n\n\n\nPassword Selection\n\n\n     Step 06: Next you need to select the port. The default port number is 5432. If you change the port, you also need to remember the port number because like passowrd, you need to use the port number to connect to the database.\n\n\n\nPort Selection\n\n\n     Step 07: We also need to select the geographical location of the database server. We can go with the default choice.\n\n\n\nLocale Selection\n\n\nThen if everything looks ok, you can move forward by clicking ‘Next’. However, it is recommended that you copy and save the information from the “Pre Installation Summary” in some safe place so that you can access them in future, if necessary.\n\n\n\nPre Installation Summary\n\n\n     Step 08: Then you can click “Next” in ‘Ready to Install’ windows and the installation process will start and it will take a while to finish the installation. Once the installing is done, please click ‘Finish’ button on ‘Complete the PostgreSQL Setup Wizard’ window.\n  \n\n\n\n\n\n\n\nTip\n\n\n\n\n\nSome good sources to learn more about PostgreSQL -\n\nW3 Schools\nPostgreSQL Tutorial",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Management in Accounting</span>"
    ]
  },
  {
    "objectID": "data_management.html#connecting-to-the-relational-database",
    "href": "data_management.html#connecting-to-the-relational-database",
    "title": "6  Data Management in Accounting",
    "section": "6.5 Connecting to the Relational Database",
    "text": "6.5 Connecting to the Relational Database\n\n     In Section 6.4.1, we described the steps of installing PostgreSQL database; now, we will try to connect to that database. There are several ways to connect the database we created. These ways include -\n\nSQL Shell (psql)\nCommand Shell (cmd)\npgAdmin 4\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nTo connect to PostgreSQL Database using pgAdmin 4, pleae use the following link -\n\nConnecting using pgAdmin 4\n\n\n\n\n\n6.5.1 Connection using SQL Shell (psql)\n\n      First, we will discuss SQL Shell (psql) method. Basically, SQL Shell (psql) is a terminal based program where you can write and execute SQL syntax in the command-line terminal. You will find the SQL Shell (psql) in the start menu under PostgreSQL. If you do not find it please search “psql” on windows search box.\n\n\n\nSQL Shell on Start Menu\n\n\n     Once the program is open, you should be able to see a window like below. Usually, the name of the server is localhost as shown below; however, if you choose a different server while installing the PostgreSQL, you must mention your server name. Then, click “enter” on your keyboard.\n\n\n\nServer\n\n\n     The default name of your database is postgres as shown below. If you choose a different name, please enter that name. Then, click “enter” on your keyboard.\n\n\n\nDatabase\n\n\n     The default port number is 5432. If you use the default port number, then please click “enter” on your keyboard. Otherwise, use the port number that you used while installing PostgreSQL and click “enter” on your keyboard.\n\n\n\nPort\n\n\n     Similarly, the default user name is postgres. Please click “enter” on your keyboard if your default name is the same.\n\n\n\nUsername\n\n\n     Next, you need to provide password that you set while installing the database.\n\n\n\nPassword\n\n\n\n\n\n6.5.2 Connection using Command Shell (cmd)\n\n     To use the command prompt (cmd) to connect to PostgreSQL database, you need to use the following steps -\n\nStep # 01 - Open command prompt by writing cmd in windows search bar as shown below. Then command prompt will open.\n\n\n\n\nSearch Bar on Windows\n\n\n\nStep # 02 - type cd C:\\Program Files\\PostgreSQL\\16\\bin on the command prompt and hit enter on the keyboard\nStep # 03 - type psql -h localhost -p 5432 -d postgres -U postgres\nStep # 04 - Now provide the password that you set while installing PostgreSQL\n\nThese steps should ensure that you are connected to the database.",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Management in Accounting</span>"
    ]
  },
  {
    "objectID": "data_management.html#sec-dealdatabase",
    "href": "data_management.html#sec-dealdatabase",
    "title": "6  Data Management in Accounting",
    "section": "6.6 Dealing with the Database",
    "text": "6.6 Dealing with the Database\n\n     Once the database is created, new tables can be created. Also, different kinds of data manipulation can be performed. For example, after being connected to the database, one should check the database available by running the following code -\n\n\\l \n\n# or \n\n\\list\n\n     To connect to a database, one should run the following code -\n\n\\c name_of_the_database;\n\n     To see all tables in a database, one should run the following code -\n\n\\dt;\n\n\n\n6.6.1 Creating a Database and Tables inside the Database\n\n     To create a database (e.g., my_database), one can run the following code -\n\nCREATE DATABASE my_database;\n\n     To create a table, following code can be run -\n\n# we are going to create a table called - People\n\nCREATE TABLE People (\n pid int not null,\n prefix text,\n firstName text,\n lastName text,\n suffix text,\n homeCity text,\n DOB date,\n primary key(pid)\n);\n\n     Similarly, four more tables are created by running the following code -\n\n# Table - Customer \n\nCREATE TABLE Customers (\n pid int not null references People(pid),\n paymentTerms text,\n discountPct decimal(5,2),\n primary key(pid)\n);\n\n# Table - Agent \n\nCREATE TABLE Agents (\n pid int not null references People(pid),\n paymentTerms text,\n commissionPct decimal(5,2),\n primary key(pid)\n);\n\n# Table - Products \n\nCREATE TABLE Products (\n prodId char(3) not null,\n name text,\n city text,\n qtyOnHand int,\n priceUSD numeric(10,2),\n primary key(prodId)\n);\n\n# Table - Orders \n\nCREATE TABLE Orders (\n orderNum int not null,\n dateOrdered date not null,\n custId int not null references Customers(pid),\n agentId int not null references Agents(pid),\n prodId char(3) not null references Products(prodId),\n  quantityOrdered integer,\n totalUSD numeric(12,2),\n primary key(orderNum)\n);\n\n     Next, we will populate the tables with different kinds of data.\n\n# Inserting records into table - People \n\nINSERT INTO People (pid, prefix, firstName, lastName, suffix, homeCity, DOB)\nVALUES\n (001, 'Dr.', 'Neil', 'Peart', 'Ph.D.', 'Toronto', '1952-09-12'),\n (002, 'Ms.', 'Regina', 'Schock', NULL, 'Toronto', '1957-08-31'),\n (003, 'Mr.', 'Bruce', 'Crump', 'Jr.', 'Jacksonville', '1957-07-17'),\n (004, 'Mr.', 'Todd', 'Sucherman', NULL, 'Chicago', '1969-05-02'),\n (005, 'Mr.', 'Bernard', 'Purdie', NULL, 'Teaneck', '1939-06-11'),\n (006, 'Ms.', 'Demetra', 'Plakas', 'Esq.', 'Santa Monica', '1960-11-09'),\n (007, 'Ms.', 'Terri Lyne', 'Carrington', NULL, 'Boston', '1965-08-04'),\n (008, 'Dr.', 'Bill', 'Bruford', 'Ph.D.', 'Kent', '1949-05-17'),\n (009, 'Mr.', 'Alan', 'White', 'III', 'Pelton', '1949-06-14')\n;\n\n# Inserting records into table - Customers \n\nINSERT INTO Customers (pid, paymentTerms, discountPct)\nVALUES\n (001, 'Net 30' , 21.12),\n (004, 'Net 15' , 4.04),\n (005, 'In Advance', 5.50),\n (007, 'On Receipt', 2.00),\n (008, 'Net 30' , 10.00)\n;\n\n# Inserting records into table - Agents \n\nINSERT INTO Agents (pid, paymentTerms, commissionPct)\nVALUES\n (002, 'Quarterly', 5.00),\n (003, 'Annually', 10.00),\n (005, 'Monthly', 2.00),\n (006, 'Weekly', 1.00)\n;\n\n# Inserting records into table - Products \n\nINSERT INTO Products( prodId, name, city, qtyOnHand, priceUSD )\nVALUES\n('p01', 'Heisenberg Compensator', 'Dallas', 47,  67.50),\n('p02', 'Universal Translator', 'Newark', 2399, 5.50 ),\n('p03', 'Commodore PET', 'Duluth', 1979, 65.02 ),\n('p04', 'LCARS module', 'Duluth', 3, 47.00 ),\n('p05', 'Remo drumhead', 'Dallas', 8675309, 16.61 ),\n('p06', 'Trapper Keeper', 'Dallas', 1982, 2.00 ),\n('p07', 'Flux Capacitor', 'Newark', 1007, 1.00 ),\n('p08', 'HAL 9000 memory core', 'Newark', 200, 1.25 ),\n('p09', 'Red Barchetta',  'Toronto', 1, 379000.47 )\n;\n\n\n# Inserting records into table - Orders \n\nINSERT INTO Orders(orderNum, dateOrdered, custId, agentId, prodId, quantityOrdered, totalUSD)\nVALUES\n(1011, '2020-01-23', 001, 002, 'p01', 1100, 58568.40),\n(1012, '2020-01-23', 004, 003, 'p03', 1200, 74871.83),\n(1015, '2020-01-23', 005, 003, 'p05', 1000, 15696.45),\n(1016, '2020-01-23', 008, 003, 'p01', 1000, 60750.00),\n(1017, '2020-02-14', 001, 003, 'p03', 500, 25643.88),\n(1018, '2020-02-14', 001, 003, 'p04', 600, 22244.16),\n(1019, '2020-02-14', 001, 002, 'p02', 400, 1735.36),\n(1020, '2020-02-14', 004, 005, 'p07', 600, 575.76),\n(1021, '2020-02-14', 004, 005, 'p01', 1000, 64773.00),\n(1022, '2020-03-15', 001, 003, 'p06', 450, 709.92),\n(1023, '2020-03-15', 001, 002, 'p05', 500, 6550.984),\n(1024, '2020-03-15', 005, 002, 'p01', 880, 56133.00),\n(1025, '2020-04-01', 008, 003, 'p07', 888, 799.20),\n(1026, '2020-05-01', 008, 005, 'p03', 808, 47282.54)\n;\n\n\n\n\n6.6.2 Querying the Database\n\n     Once the database is created, we need to retrieve data from the database for which we need to write queries. For example, we want retireve prodid, name, and city from the table products. Then, we need to write the following query -\n\n# SQL Query = \nSELECT prodid, name, city FROM products;\n\n# Output \n\n prodid |          name          |  city\n--------+------------------------+---------\n p01    | Heisenberg Compensator | Dallas\n p02    | Universal Translator   | Newark\n p03    | Commodore PET          | Duluth\n p04    | LCARS module           | Duluth\n p05    | Remo drumhead          | Dallas\n p06    | Trapper Keeper         | Dallas\n p07    | Flux Capacitor         | Newark\n p08    | HAL 9000 memory core   | Newark\n p09    | Red Barchetta          | Toronto\n(9 rows)\n\n     Similarly, if we want to collect all fields from products table for the city Dallas, then we can write the following queries -\n\n# SQL Query = \nSELECT * FROM products WHERE city = 'Dallas';\n\n\n# Output \n\n prodid |          name          |  city  | qtyonhand | priceusd\n--------+------------------------+--------+-----------+----------\n p01    | Heisenberg Compensator | Dallas |        47 |    67.50\n p05    | Remo drumhead          | Dallas |   8675309 |    16.61\n p06    | Trapper Keeper         | Dallas |      1982 |     2.00\n(3 rows)\n\n\n\n\n6.6.3 Saving a Database from PostgreSQL\n\n     In order to share a database with stakeholders, we need to save the a particular database. Therefore, knowing how to save the database is very important. We must use the Command Prompt (cmd) to save a database. First, we need to open a command prompt following step # 01 in Section 6.5.2. Then we need to write the following codes on command prompt -\n\n# First line of code and then hit enter on the Keyboard\ncd ..\n# Second line of code and then hit enter on the Keyboard\ncd ..\n# Third line of code and then hit enter on the Keyboard\ncd \\Program Files\\PostgreSQL\\16\\bin\n# Fourth line of code and then hit enter on the Keyboard\npg_dump -h localhost -d name_of_your_database -U postgres -p 5433 -F tar &gt;K:\\name_of_your_database.tar\n# Fifth Line of code - provide your password\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou can watch the youtube video to learn more about how to save a database from PostgreSQL - https://www.youtube.com/watch?v=sa5VXDG_aW8\n\n\n\n     In the fourth line of code above - pg_dump -h localhost -d name_of_your_database -U postgres -p 5433 -F tar &gt;K:\\name_of_your_database.tar- the “name_of_your_database” is the database name that you want to save to share and “K:\\\\” is the directory (folder) address (path) on which you want to save your database and “name_of_your_database” is the name of the database that you would like to assign to the saved database and “.tar” is the file extension. It is important to note that when you run the fourth line of code above, it might show the message - “Access is denied”. In such situation, you should change the path (address) of the directory in which you would like to save the database.\n\n\n\n6.6.4 Uploading a Database to PostgreSQL\n\n     Sometimes, you might need to upload a database to PostgreSQL. Therefore, you should know how you can upload the database to PostgreSQL. First, you should create a database following the process as described in Section 6.6.1. For example, we create a database called my_database in PostgreSQL. Assume that the database that we want to upload to PostgreSQL is in the path - K:\\ and the name of the database is my_database_upload. Therefore, the complete path of the database to be uploaded is - “K:\\my_database_upload.tar”. Then, you should open a command prompt as described in Section 6.5.2. Then run the following code -\n\n# First line of code and then hit enter on the Keyboard\ncd ..\n# Second line of code and then hit enter on the Keyboard\ncd ..\n# Third line of code and then hit enter on the Keyboard\ncd \\Program Files\\PostgreSQL\\16\\bin\n# Fourth line of code and then hit enter on the Keyboard\npg_restore -h localhost -p 5433 -d my_database -U postgres -v \"K:\\my_database_upload.tar\"\n# Fifth Line of code - provide your password\n\n     In the fourth line of code above - pg_restore -h localhost -p 5433 -d my_database -U postgres -v \"K:\\my_database_upload.tar\"- “my_database” is the name of the database that you created on the PostgreSQL and “K:\\my_database_upload.tar” is the path of the database to be uploaded.\n     Once you upload the database to the PostgreSQL , you can check whether the database is uploaded by following Section 6.6.",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Management in Accounting</span>"
    ]
  },
  {
    "objectID": "data_management.html#querying-postgresql-database-using-r",
    "href": "data_management.html#querying-postgresql-database-using-r",
    "title": "6  Data Management in Accounting",
    "section": "6.7 Querying PostgreSQL Database Using R",
    "text": "6.7 Querying PostgreSQL Database Using R\n\n# Importing Necessary Packages\n\nlibrary(DBI)\nlibrary(RPostgres)\nlibrary(tidyverse)\n\n\n# Connecting to PostgreSQL Database \ncon = dbConnect(RPostgres::Postgres()\n                 , host='localhost'\n                 , port='5433'\n                 , dbname='my_database',\n                 , user='postgres'\n                 , password=\"YourPassword\") \n\n\n# Checking all Tables in the Database \ndbListTables(con)\n\n[1] \"agents\"    \"customers\" \"orders\"    \"people\"    \"products\" \n\n\n\n# To see a table \ncon %&gt;%\n  tbl ('orders') \n\n# Source:   table&lt;\"orders\"&gt; [?? x 7]\n# Database: postgres  [postgres@localhost:5433/my_database]\n   ordernum dateordered custid agentid prodid quantityordered totalusd\n      &lt;int&gt; &lt;date&gt;       &lt;int&gt;   &lt;int&gt; &lt;chr&gt;            &lt;int&gt;    &lt;dbl&gt;\n 1     1011 2020-01-23       1       2 p01               1100   58568.\n 2     1012 2020-01-23       4       3 p03               1200   74872.\n 3     1015 2020-01-23       5       3 p05               1000   15696.\n 4     1016 2020-01-23       8       3 p01               1000   60750 \n 5     1017 2020-02-14       1       3 p03                500   25644.\n 6     1018 2020-02-14       1       3 p04                600   22244.\n 7     1019 2020-02-14       1       2 p02                400    1735.\n 8     1020 2020-02-14       4       5 p07                600     576.\n 9     1021 2020-02-14       4       5 p01               1000   64773 \n10     1022 2020-03-15       1       3 p06                450     710.\n# ℹ more rows\n\n\n\ncon %&gt;%\n  tbl ('orders') %&gt;%\n  collect ()\n\n# A tibble: 14 × 7\n   ordernum dateordered custid agentid prodid quantityordered totalusd\n      &lt;int&gt; &lt;date&gt;       &lt;int&gt;   &lt;int&gt; &lt;chr&gt;            &lt;int&gt;    &lt;dbl&gt;\n 1     1011 2020-01-23       1       2 p01               1100   58568.\n 2     1012 2020-01-23       4       3 p03               1200   74872.\n 3     1015 2020-01-23       5       3 p05               1000   15696.\n 4     1016 2020-01-23       8       3 p01               1000   60750 \n 5     1017 2020-02-14       1       3 p03                500   25644.\n 6     1018 2020-02-14       1       3 p04                600   22244.\n 7     1019 2020-02-14       1       2 p02                400    1735.\n 8     1020 2020-02-14       4       5 p07                600     576.\n 9     1021 2020-02-14       4       5 p01               1000   64773 \n10     1022 2020-03-15       1       3 p06                450     710.\n11     1023 2020-03-15       1       2 p05                500    6551.\n12     1024 2020-03-15       5       2 p01                880   56133 \n13     1025 2020-04-01       8       3 p07                888     799.\n14     1026 2020-05-01       8       5 p03                808   47283.\n\n\n\n# Selecting some columns \ncon %&gt;%\n  tbl ('orders') %&gt;%\n  select (ordernum, dateordered, custid, agentid)\n\n# Source:   SQL [?? x 4]\n# Database: postgres  [postgres@localhost:5433/my_database]\n   ordernum dateordered custid agentid\n      &lt;int&gt; &lt;date&gt;       &lt;int&gt;   &lt;int&gt;\n 1     1011 2020-01-23       1       2\n 2     1012 2020-01-23       4       3\n 3     1015 2020-01-23       5       3\n 4     1016 2020-01-23       8       3\n 5     1017 2020-02-14       1       3\n 6     1018 2020-02-14       1       3\n 7     1019 2020-02-14       1       2\n 8     1020 2020-02-14       4       5\n 9     1021 2020-02-14       4       5\n10     1022 2020-03-15       1       3\n# ℹ more rows\n\n\n\n# Filtering some rows\ncon %&gt;% \n  tbl ('products') %&gt;%\n  filter (city == \"Dallas\")\n\n# Source:   SQL [3 x 5]\n# Database: postgres  [postgres@localhost:5433/my_database]\n  prodid name                   city   qtyonhand priceusd\n  &lt;chr&gt;  &lt;chr&gt;                  &lt;chr&gt;      &lt;int&gt;    &lt;dbl&gt;\n1 p01    Heisenberg Compensator Dallas        47     67.5\n2 p05    Remo drumhead          Dallas   8675309     16.6\n3 p06    Trapper Keeper         Dallas      1982      2  \n\n\n\n# showing the SQL query\ncon %&gt;% \n  tbl ('products') %&gt;%\n  filter (city == \"Dallas\") %&gt;%\n  show_query()\n\n&lt;SQL&gt;\nSELECT \"products\".*\nFROM \"products\"\nWHERE (\"city\" = 'Dallas')\n\n\n\n# Disconnecting the database \ncon %&gt;% dbDisconnect ()",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Management in Accounting</span>"
    ]
  },
  {
    "objectID": "data_management.html#querying-postgresql-database-using-python",
    "href": "data_management.html#querying-postgresql-database-using-python",
    "title": "6  Data Management in Accounting",
    "section": "6.8 Querying PostgreSQL Database Using Python",
    "text": "6.8 Querying PostgreSQL Database Using Python\n\n# Importing Necessary Python Packages \nimport ibis\n\n\n# To know more about the next line of code\n# see - https://ibis-project.org/tutorials/ibis-for-dplyr-users\nibis.options.interactive = True\n\n\n# to connect to the database \nconn = ibis.postgres.connect(\n    user='postgres', \n    password = 'YourPassword',\n    host = \"localhost\",\n    port = 5433,\n    database = \"my_database\" # here our database name will be 'dvdrental'\n)\n\n\n# See all tables in a database \nconn.list_tables()\n\n['actor', 'actor_info', 'address', 'category', 'city', 'country', 'customer', 'customer_list', 'ff48_df', 'film', 'film_actor', 'film_category', 'film_list', 'inventory', 'language', 'nicer_but_slower_film_list', 'payment', 'rental', 'sales_by_film_category', 'sales_by_store', 'staff', 'staff_list', 'store']\n\n\n\n# To know the total number of rows \nconn.table('actor').count() # total rows \n\n\n\n\n\nconn.table('actor').columns # name of the columns \n\n['actor_id', 'first_name', 'last_name', 'last_update']\n\n\n\n# To see the SQL command \nconn.table('actor').compile()\n\n'SELECT * FROM \"actor\"'\n\n\n\n# Dealing with a table \nconn.table('country')\n\n┌────────────┬────────────────┬─────────────────────┐\n│ country_id │ country        │ last_update         │\n├────────────┼────────────────┼─────────────────────┤\n│ !int32     │ !string        │ !timestamp(6)       │\n├────────────┼────────────────┼─────────────────────┤\n│          1 │ Afghanistan    │ 2006-02-15 09:44:00 │\n│          2 │ Algeria        │ 2006-02-15 09:44:00 │\n│          3 │ American Samoa │ 2006-02-15 09:44:00 │\n│          4 │ Angola         │ 2006-02-15 09:44:00 │\n│          5 │ Anguilla       │ 2006-02-15 09:44:00 │\n│          6 │ Argentina      │ 2006-02-15 09:44:00 │\n│          7 │ Armenia        │ 2006-02-15 09:44:00 │\n│          8 │ Australia      │ 2006-02-15 09:44:00 │\n│          9 │ Austria        │ 2006-02-15 09:44:00 │\n│         10 │ Azerbaijan     │ 2006-02-15 09:44:00 │\n│          … │ …              │ …                   │\n└────────────┴────────────────┴─────────────────────┘\n\nconn.table('country').head(5).execute()\n\n   country_id         country         last_update\n0           1     Afghanistan 2006-02-15 09:44:00\n1           2         Algeria 2006-02-15 09:44:00\n2           3  American Samoa 2006-02-15 09:44:00\n3           4          Angola 2006-02-15 09:44:00\n4           5        Anguilla 2006-02-15 09:44:00\n\n\n\n## describe () or columns () equivalent to glimpse ()\nconn.table('country').describe\n\n&lt;bound method Table.describe of ┌────────────┬────────────────┬─────────────────────┐\n│ country_id │ country        │ last_update         │\n├────────────┼────────────────┼─────────────────────┤\n│ !int32     │ !string        │ !timestamp(6)       │\n├────────────┼────────────────┼─────────────────────┤\n│          1 │ Afghanistan    │ 2006-02-15 09:44:00 │\n│          2 │ Algeria        │ 2006-02-15 09:44:00 │\n│          3 │ American Samoa │ 2006-02-15 09:44:00 │\n│          4 │ Angola         │ 2006-02-15 09:44:00 │\n│          5 │ Anguilla       │ 2006-02-15 09:44:00 │\n│          6 │ Argentina      │ 2006-02-15 09:44:00 │\n│          7 │ Armenia        │ 2006-02-15 09:44:00 │\n│          8 │ Australia      │ 2006-02-15 09:44:00 │\n│          9 │ Austria        │ 2006-02-15 09:44:00 │\n│         10 │ Azerbaijan     │ 2006-02-15 09:44:00 │\n│          … │ …              │ …                   │\n└────────────┴────────────────┴─────────────────────┘&gt;\n\n\n\n# filtering rows    \nconn.table('country')[conn.table('country')['country']==\"Zambia\"] \\\n    .execute()\n\n   country_id country         last_update\n0         109  Zambia 2006-02-15 09:44:00\n\n\n\n# Selecting Columns \nconn.table('country')[[\"country_id\", \"country\"]]\n\n┌────────────┬────────────────┐\n│ country_id │ country        │\n├────────────┼────────────────┤\n│ !int32     │ !string        │\n├────────────┼────────────────┤\n│          1 │ Afghanistan    │\n│          2 │ Algeria        │\n│          3 │ American Samoa │\n│          4 │ Angola         │\n│          5 │ Anguilla       │\n│          6 │ Argentina      │\n│          7 │ Armenia        │\n│          8 │ Australia      │\n│          9 │ Austria        │\n│         10 │ Azerbaijan     │\n│          … │ …              │\n└────────────┴────────────────┘\n\n\n\n# Arrange \n\nconn.table('rental') \\\n    .order_by(['inventory_id'])\n\n┌───────────┬─────────────────────┬──────────────┬─────────────┬───┐\n│ rental_id │ rental_date         │ inventory_id │ customer_id │ … │\n├───────────┼─────────────────────┼──────────────┼─────────────┼───┤\n│ !int32    │ !timestamp(6)       │ !int32       │ !int16      │ … │\n├───────────┼─────────────────────┼──────────────┼─────────────┼───┤\n│      4863 │ 2005-07-08 19:03:15 │            1 │         431 │ … │\n│     11433 │ 2005-08-02 20:13:10 │            1 │         518 │ … │\n│     14714 │ 2005-08-21 21:27:43 │            1 │         279 │ … │\n│       972 │ 2005-05-30 20:21:07 │            2 │         411 │ … │\n│      2117 │ 2005-06-17 20:24:00 │            2 │         170 │ … │\n│      4187 │ 2005-07-07 10:41:31 │            2 │         161 │ … │\n│      9449 │ 2005-07-30 22:02:34 │            2 │         581 │ … │\n│     15453 │ 2005-08-23 01:01:01 │            2 │         359 │ … │\n│     10126 │ 2005-07-31 21:36:07 │            3 │          39 │ … │\n│     15421 │ 2005-08-22 23:56:37 │            3 │         541 │ … │\n│         … │ …                   │            … │           … │ … │\n└───────────┴─────────────────────┴──────────────┴─────────────┴───┘\n\n\n\n# Group By\nconn.table('payment')[['payment_id', 'customer_id', 'staff_id', 'amount']] \\\n    .execute() \\\n    .groupby('customer_id').agg({'amount': 'mean'}) \\\n    .reset_index() \n\n     customer_id    amount\n0              1  3.823333\n1              2  4.759231\n2              3  5.448333\n3              4  3.717273\n4              5  3.847143\n..           ...       ...\n594          595  3.817586\n595          596  3.353636\n596          597  3.816087\n597          598  3.808182\n598          599  4.378889\n\n[599 rows x 2 columns]\n\n\n\n# To disconnect the database \nconn.disconnect()",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Management in Accounting</span>"
    ]
  },
  {
    "objectID": "data_management.html#online-analytical-processing-olap-database-management-system",
    "href": "data_management.html#online-analytical-processing-olap-database-management-system",
    "title": "6  Data Management in Accounting",
    "section": "6.9 Online Analytical Processing (OLAP) Database Management System",
    "text": "6.9 Online Analytical Processing (OLAP) Database Management System",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Management in Accounting</span>"
    ]
  },
  {
    "objectID": "data_management.html#conclusion",
    "href": "data_management.html#conclusion",
    "title": "6  Data Management in Accounting",
    "section": "6.10 Conclusion",
    "text": "6.10 Conclusion",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Management in Accounting</span>"
    ]
  },
  {
    "objectID": "python_basics.html",
    "href": "python_basics.html",
    "title": "Appendix A — A Primer on Python",
    "section": "",
    "text": "Learning Objectives of the Appendix\nAt the End of the Appendix, Students should be Able to -",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>A Primer on Python</span>"
    ]
  },
  {
    "objectID": "python_basics.html#learning-objectives-of-the-appendix",
    "href": "python_basics.html#learning-objectives-of-the-appendix",
    "title": "Appendix A — A Primer on Python",
    "section": "",
    "text": "Gain an Understanding about Python\nGain an Understanding about the Data Types and Data Structures in Python\nGain an Understanding about Arrays in Numpy, Indexing and Slicing of Arrays, and Operations of Arrays\nGain an Understanding about for Loop function, map function, and User Defined Function in Python",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>A Primer on Python</span>"
    ]
  },
  {
    "objectID": "python_basics.html#what-is-python",
    "href": "python_basics.html#what-is-python",
    "title": "Appendix A — A Primer on Python",
    "section": "A.1 What is Python?",
    "text": "A.1 What is Python?\n\n     According to www.python.org “Python is an interpreted, object-oriented, high-level programming language with dynamic semantics. Its high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development, as well as for use as a scripting or glue language to connect existing components together.” It further explains - “Python’s simple, easy to learn syntax emphasizes readability and therefore reduces the cost of program maintenance. Python supports modules and packages, which encourages program modularity and code reuse.”",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>A Primer on Python</span>"
    ]
  },
  {
    "objectID": "python_basics.html#data-types-in-python",
    "href": "python_basics.html#data-types-in-python",
    "title": "Appendix A — A Primer on Python",
    "section": "A.2 Data Types in Python",
    "text": "A.2 Data Types in Python\n\n     Data has different types. When dealing with data, we need to know the types of the data because different data types can do different things. There are six basic data types in python. They include - int, float, complex, bool, str, and bytes. We use type () function to know the types of the data. However, most commmonly used data types are int, float, str, and bool.\n\n\nx = \"hello world\"\ntype(x)\n\nstr\n\n\n\nx = 25\ntype(x)\n\nint\n\n\n\nx = 25.34\ntype(x)\n\nfloat\n\n\n\nx = True\ntype(x)\n\nbool\n\n\n\nx =7j\ntype(x)\n\ncomplex\n\n\n\nx = b\"Hello World\"\ntype(x)\n\nbytes",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>A Primer on Python</span>"
    ]
  },
  {
    "objectID": "python_basics.html#data-structures-in-python",
    "href": "python_basics.html#data-structures-in-python",
    "title": "Appendix A — A Primer on Python",
    "section": "A.3 Data Structures in Python",
    "text": "A.3 Data Structures in Python\n\n     Data structures are the collection of data on which different processes can be done efficiently. It enables quick and easier access, and efficient modifications. Data Structures allows to organize data in such a way that enables to store collections of data, relate them and perform operations on them. Data structures in python can broadly be classified into two groups - Built-in data structures and User-defined data structures. Figure A.1 Shows the data structure in python. Built-in data structure is important because they are widely used. Therefore, we will elaborate on built-in data structure.\n\n\n\n\n\n\n\nFigure A.1: Data Structure in Python",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>A Primer on Python</span>"
    ]
  },
  {
    "objectID": "python_basics.html#built-in-data-structure",
    "href": "python_basics.html#built-in-data-structure",
    "title": "Appendix A — A Primer on Python",
    "section": "A.4 Built-in Data Structure",
    "text": "A.4 Built-in Data Structure\n\nA.4.1 List\n\n     List is used to store collection of ordered1data items. Lists are created using square brackets ([]). We can also create a list using list () function. Lists can hold different types of data, including integers (int), floats (float), strings (str), and even other lists. We can use len () function to know the number to elements in the list. Moreover, lists are mutable, meaning that their contents can be changed after the list has been created.\n\n\ncolors = ['red', 'blue', 'green']\nprint(colors)\n\n['red', 'blue', 'green']\n\n\n\nlen(colors)\n\n3\n\n\n\na = [1, 'apple', 3.14, [5, 6]]\nprint(a)\n\n[1, 'apple', 3.14, [5, 6]]\n\n\n\nb = list((1, 'apple', 3.14, [5, 6]))\nprint(b)\n\n[1, 'apple', 3.14, [5, 6]]\n\n\n\nA.4.1.1 Creating a List with Repeated Elements\nA list with repeated elements can be created using the multiplication operator.\n\nx = [2] * 5\ny = [0] * 7\n\nprint(x)\nprint(y)\n\n[2, 2, 2, 2, 2]\n[0, 0, 0, 0, 0, 0, 0]\n\n\n\n\nA.4.1.2 Accessing List Elements\n\n     Indexing can be used to access the elements in the list. Python indexes start at 0. Therefore, a[0] will access the first element in the list a. Figure A.2 shows the index of the list - colors.\n\n\n\n\n\n\n\nFigure A.2: Index of List Elements\n\n\n\n\ncolors[0]\n\n'red'\n\n\n\ncolors[-1]\n\n'green'\n\n\n\n\nA.4.1.3 Adding Elements to the List\nWe can add elements to the list using three methods - append (), insert (), and extend ().\n\n# Initialize an empty list\nm = []\n\n# Adding 10 to end of list\nm.append(50)  \nprint(\"After append(150):\", m)  \n\n# Inserting 40 at index 0\nm.insert(0, 40)\nprint(\"After insert(0, 40):\", m) \n\n# Adding multiple elements  [60,70,80] at the end\nm.extend([60, 70, 80])  \nprint(\"After extend([60,70,80]):\", m) \n\nAfter append(150): [50]\nAfter insert(0, 40): [40, 50]\nAfter extend([60,70,80]): [40, 50, 60, 70, 80]\n\n\n\n\nA.4.1.4 Updating Elements to the List\nWe can change the value of an element by accessing it using its index.\n\np = [10, 20, 30, 40, 50]\n# Change the second element\np[1] = 25 \n\nprint(p)  \n\n[10, 25, 30, 40, 50]\n\n\n\n\nA.4.1.5 Removing Elements from the List\nWe can remove elements from the list using three methods - remove (), pop (), and del ().\n\na = [10, 20, 30, 40, 50]\n\n# Removes the first occurrence of 30\na.remove(30)  \nprint(\"After remove(30):\", a)\n\n# Removes the element at index 1 (20)\npopped_val = a.pop(1)  \nprint(\"Popped element:\", popped_val)\nprint(\"After pop(1):\", a) \n\n# Deletes the first element (10)\ndel a[0]  \nprint(\"After del a[0]:\", a)\n\nAfter remove(30): [10, 20, 40, 50]\nPopped element: 20\nAfter pop(1): [10, 40, 50]\nAfter del a[0]: [40, 50]\n\n\n\n\n\nA.4.2 Dictionary\n\n     Dictionary data structure in python is used to store data in key:value format. Unlike list - which uses square brackets ([]) - dictionary uses curly brackets ({}). Like lists, dictionary is mutable. Dictionary items can be referred by using key name. We can use len () function to know the total number of element of a dictionary and type () to know the type.\n\n\nmy_car = {\n  \"brand\": \"Ford\",\n  \"model\": \"Escape\",\n  \"year\": 2017\n}\nprint(my_car)\n\n{'brand': 'Ford', 'model': 'Escape', 'year': 2017}\n\n\n\nprint(my_car['model'])\n\nEscape\n\n\nThe values in dictionary items can be of any data type\n\ncar_features = {\n  \"brand\": \"Ford\", # string \n  \"electric\": False, # boolean \n  \"year\": 1964, # integer\n  \"colors\": [\"red\", \"white\", \"blue\"] # list of string\n}\n\nThe function dict () can also be used to construct dictionary.\n\nmy_friends = dict(\n    name = [\"John\", \"Smith\", \"Mark\"], \n    age = [36, 45, 49], \n    country = [\"Norway\", \"Sweden\", \"Finland\"]\n)\nprint(my_friends)\n\n{'name': ['John', 'Smith', 'Mark'], 'age': [36, 45, 49], 'country': ['Norway', 'Sweden', 'Finland']}\n\n\nSome built-in dictionary methods2 are -\n\ndict.clear() - removes all the elements from the dictionary\n\n\nemployee = {\n    'name': [\"John\", \"Jessica\", \"Zack\"], \n    'age': [18, 19, 20]\n}\nprint(employee)\n\n{'name': ['John', 'Jessica', 'Zack'], 'age': [18, 19, 20]}\n\n\n\nemployee.clear()\nprint(employee)\n\n{}\n\n\n\ndict.copy() - returns a copy of the dictionary\ndict.get(key, default = “None”) - returns the value of specified key\ndict.items() - returns the value of specified key\ndict.keys() - returns a list containing dictionary’s key\ndict.values() - returns a list of all the values of the dictionary.\n\n\n\nA.4.3 Tuple\n\n     In python, tuple is very similar to list, except one difference. List is mutable, but tuple is not. Once a tuple is created, its elements cannot be changed. Unlike lists, we cannot add, remove, or change elelment in tuple. Tuple is created by using parenthese (()). Also, the function tuple () can also be used to create tuple. We can access the elements of tuple by indexing as we did for lists.\n\n\nmy_tuple = ('10', '20', '30', 'hello', 'world')\nmy_tuple\n\n('10', '20', '30', 'hello', 'world')\n\n\n\nmy_tuple[3]\n\n'hello'\n\n\n\nThere are different operations that can be performed on the tuple. Some of them include -\n\nConcatenation - To concatenate, plus operator (+) is used.\nNesting - Nested tuple means a tuple is inside the another tuple\nRepetition - creating a tuple of several times\n\n\n\nsecond_tuple = ('10', '20', 'SIU', \"SOA\", \"Carbondale\")\nsecond_tuple*3\n\n('10',\n '20',\n 'SIU',\n 'SOA',\n 'Carbondale',\n '10',\n '20',\n 'SIU',\n 'SOA',\n 'Carbondale',\n '10',\n '20',\n 'SIU',\n 'SOA',\n 'Carbondale')\n\n\n\nSlicing - Dividing a given tuple into small tuples using indexing is slicing.\n\n\nsecond_tuple[1:]\nsecond_tuple[2:4]\nsecond_tuple[::-1]\n\n('Carbondale', 'SOA', 'SIU', '20', '10')\n\n\n\n\nFinding the Length - using len () function, we can figure out the total number of elements in the tuple.\nDifferent data types in tuples - Tuple can include heterogenous data.\nLists to tuples - Using tuple () functions, we can convert a list into tuple.\n\n\n\n\nA.4.4 Set\n\n     A set in python is a collection of unordered, unchangeable, and unindexed items. Set items are unchangeable, but new items can be added to the set and old items can be deleted from the set. Another important characteristics of set is that it has no duplicate elements. Curly bracket ({}) is used to create a set. The function difference () or minus operator (-) is used to calculate difference between two sets.\n\n\nnew_set = {'Hello', 'World', \"World\"}\nnew_set \n\n{'Hello', 'World'}\n\n\n\ntype(new_set)\n\nset\n\n\n\nnew_set[0] = \"Hi\"",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>A Primer on Python</span>"
    ]
  },
  {
    "objectID": "python_basics.html#functions-in-python",
    "href": "python_basics.html#functions-in-python",
    "title": "Appendix A — A Primer on Python",
    "section": "A.6 Functions in Python",
    "text": "A.6 Functions in Python\n\n     In python, there are some functions that we use very frequently. In this section, we will discuss some of those functions.\n\nA.6.1 for Loop Function\n     for loop function in python allows to iterate over iterable sequences such as list, tuple, string, or range and execuate codes for each elements in the sequence. for loop function helps to handle repititve tasks more efficiently and effectively. The syntax of a for loop function is -\n\nfor element in sequence:\n  # Expected code to execute on each element of the sequence\n\n     A basic example of a for loop function is -\n\nanalytics_students = ['Ashley', 'Elijah', 'John', 'Jack', 'Adams']\nfor student in analytics_students:\n  print(student)\n\nAshley\nElijah\nJohn\nJack\nAdams\n\n\n     Other examples of a for loop function is -\n\neven_numbers = [2,4,6,8,10]\nfor numbers in even_numbers:\n  square = numbers**2\n  print (square)\n\n4\n16\n36\n64\n100\n\n\n\neven_numbers = [2,4,6,8,10]\nsquares = []\nfor numbers in even_numbers:\n  square = numbers**2\n  squares.append(numbers**2)\n\nprint (squares)\n\n[4, 16, 36, 64, 100]\n\n\n\n\nA.6.2 map() Function\n     map () function, like for loop function, allows to apply a function on each item in an iterable (list, tuple, or string) sequence. The syntax for map () is - map (function, iterable). Below is an example of map () function -\n\nvar = [16, 17, 18, 19, 20]\nvar_log = map(lambda x: np.log(x), var)\n\nfor x in var_log:\n  print(x)\n\n2.772588722239781\n2.833213344056216\n2.8903717578961645\n2.9444389791664403\n2.995732273553991\n\n\n     map () function is useful for simple calculations; however, for complex transformations, using for loop is efficient and effective.\n\n\nA.6.3 User Defined Function (Named Function)\n     In addition to predifend functions from different python modules, users can define their own functions, which are sometimes called named functions. The syntax for defining a user defined function in python -\n\ndef deduct_num (a, b):\n  \"\"\"\n  The function will deduct two numbers\n  \"\"\"\n  result = a - b\n  return result\n\n     In the above example, a user defined function is created. Then function name is deduct_num and it is created using def keyword. So, when we need to create a user defined function, we will start with def keyword followed by the name of the function. The a and b are the function’s arguments, which sometimes are also called parameters.\n     The tripple quote \"\"\" \"\"\" is used to create a docstring, which also explains the nature of the function or what it will do. The return statement in function will return a value.\n\ndeduct_num(15, 100)\n\n-85\n\n\n     Another example of user defined function -\n\ndef welcome (name):\n  \"\"\"\n  The function greets the person\n  \"\"\"\n  print(f\"Welcome {name}! How are you doing?\")\n\n\nwelcome(\"John\")\n\nWelcome John! How are you doing?\n\n\n\n\nA.6.4 Anonymous (Lambda) Function\n     Anonymous function is a function without a name. It is also called lambda function in python. The syntax for lambda function is - lambda arguments: expression. Below is an example of lambda function -\n\nsqr = lambda x: x**2\nsqr(5)\n\n25\n\n\n     lambda function can take many arguments (parameters), but accepts only one expression.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>A Primer on Python</span>"
    ]
  },
  {
    "objectID": "python_basics.html#footnotes",
    "href": "python_basics.html#footnotes",
    "title": "Appendix A — A Primer on Python",
    "section": "",
    "text": "When we say that lists are ordered, it means that the items have a defined order, and that order will not change. If you add new items to a list, the new items will be placed at the end of the list.↩︎\nIn python, functions are called methods.↩︎\nrange(start, stop, step) function creates a sequence of numbers starting from start, and stopping at stop. Usually, the step in range () function is 1.↩︎",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>A Primer on Python</span>"
    ]
  },
  {
    "objectID": "r_basics.html",
    "href": "r_basics.html",
    "title": "Appendix B — A Primer on R",
    "section": "",
    "text": "Learning Objectives of the Appendix\nAt the End of the Appendix, Students should be Able to -",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>A Primer on R</span>"
    ]
  },
  {
    "objectID": "r_basics.html#data-types",
    "href": "r_basics.html#data-types",
    "title": "Appendix B — A Primer on R",
    "section": "B.3 Data Types",
    "text": "B.3 Data Types\n\n      Data4 has different types. When dealing with data, we need to know the types of the data because different data types can do different things. There are five basic data types in R. They include - double, integer, character, logical, and complex. We use typeof () or class () functions to know the types of the vector and length() to know the size of the vector. However, most commmonly used data types are double, integer, character, and logical.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>A Primer on R</span>"
    ]
  },
  {
    "objectID": "r_basics.html#data-structure",
    "href": "r_basics.html#data-structure",
    "title": "Appendix B — A Primer on R",
    "section": "B.4 Data Structure",
    "text": "B.4 Data Structure\n\n      There are several types of data structures in R. These structures include - vector, matrix, array, list, data frame, tibble, and facotrs. Of these data structures - vector, list, data frame and tibble are the most common.\n\nB.4.1 Vector\n      Vector is one of the basic data structures in R. In most cases, vectors are created by using c() function, where “c” means concatenate. Sometimes vectors are classified into two groups - atomic vectors and lists. Figure B.1 shows the classfication of the vectors. Atomic vectors include - double, integer, character, and logical vectors5. The double and integer vectors are collectively known as numeric vectors. Lists include dataframe or tibble. Lists are called recursive vectors because they can include other lists. NULL6 is often used to represent the absence of a vector. NULL indicates that the vector length is 0.\n\n\n\n\n\n\nFigure B.1: Types of Vector\n\n\n\n\n# An example of a vector\nstudents = c (\"John\", \"Adam\", \"Alex\", \"Emily\")\nprint(students)\n\n[1] \"John\"  \"Adam\"  \"Alex\"  \"Emily\"\n\ntypeof(students)\n\n[1] \"character\"\n\nclass(students)\n\n[1] \"character\"\n\nlength(students)\n\n[1] 4\n\n\n\n# Numeric vector \nnumeric_vector &lt;- c(1.1, 2.2, 3.3) \n# Integer vector \ninteger_vector &lt;- c(1L, 2L, 3L) \n# Character vector \ncharacter_vector &lt;- c(\"a\", \"b\", \"c\") \n# Logical vector \nlogical_vector &lt;- c(TRUE, FALSE, TRUE)\n\n\n# Some vector operations \nnumeric_vector + 5\n\n[1] 6.1 7.2 8.3\n\nnumeric_vector - 5\n\n[1] -3.9 -2.8 -1.7\n\nmax(numeric_vector)\n\n[1] 3.3\n\nmin(integer_vector)\n\n[1] 1\n\nsum(integer_vector)\n\n[1] 6\n\nsd(numeric_vector)\n\n[1] 1.1\n\n\n\n# Vectors as sequence of Numbers \nnum_seq = 1:10\nnum_seq\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nseq(15)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\nseq(1,40, by = 2)\n\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39\n\n\n\n\nB.4.2 Matrix\n      Matrix is a special type of vector with dimensions, meaning that matrix has rows and columns. Matrix is constructed columnwise.\n\nmatrix(seq(1:12), nrow = 4, ncol = 3)\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\nm = 1:12\ndim (m) = c(4,3) # dimension added to the matrix \nm\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\n\n\n\nB.4.3 Arrays\n      Arrays are very similar to matrix, but they have more than two dimensions.\n\narray(1:27, dim = c(3,3,3))\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]   10   13   16\n[2,]   11   14   17\n[3,]   12   15   18\n\n, , 3\n\n     [,1] [,2] [,3]\n[1,]   19   22   25\n[2,]   20   23   26\n[3,]   21   24   27\n\n\n\n\nB.4.4 Data Frames (tibble)\n      Like matrix, data frames are two dimensional, having rows and columns. However, unlike matrix, they can contain different types of data. Data frames are widely used in data analytics. Tibble is an updated or modern type of data frame. It is recommended to use tibble.\n\ndata.frame(\n    id = 1:3,\n    name = c ('A', \"B\", \"C\"),\n    age = c (18, 21, 23)\n)\n\n  id name age\n1  1    A  18\n2  2    B  21\n3  3    C  23\n\n\n\ntibble(\n   id = 1:3,\n    name = c ('A', \"B\", \"C\"),\n    age = c (18, 21, 23) \n)\n\n# A tibble: 3 × 3\n     id name    age\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 A        18\n2     2 B        21\n3     3 C        23\n\n\n\n\nB.4.5 Lists\n      Lists are very versatile in that it can contain different types of data. Unlike atomic vectors, which contain same type of data, lists can contain many types of data. Lists can also contain another list; therefore, it is sometimes called recursive vector. List is created by using function list().\n\nlist_example = list (\n    name = \"Jessica\",\n    age = c(22),\n    cgpa = c(3.75),\n    student  = TRUE,\n    address = list(\n        street = c(\"5 W Main St\"),\n        city = c(\"Carbondale\"),\n        zip = 62901\n    ),\n    hobbies = c (\"Fishing\", \"Hiking\", \"Cooking\")\n)\nlist_example\n\n$name\n[1] \"Jessica\"\n\n$age\n[1] 22\n\n$cgpa\n[1] 3.75\n\n$student\n[1] TRUE\n\n$address\n$address$street\n[1] \"5 W Main St\"\n\n$address$city\n[1] \"Carbondale\"\n\n$address$zip\n[1] 62901\n\n\n$hobbies\n[1] \"Fishing\" \"Hiking\"  \"Cooking\"\n\nprint(list_example$name)\n\n[1] \"Jessica\"\n\nprint(list_example$address$city) # nested list element\n\n[1] \"Carbondale\"\n\nlist_example[1]\n\n$name\n[1] \"Jessica\"\n\nlist_example[[1]]\n\n[1] \"Jessica\"\n\nlist_example[c(1,2)]\n\n$name\n[1] \"Jessica\"\n\n$age\n[1] 22\n\n\n\n\nB.5 Indexing and Slicing Vectors\n      Using [], one can access elements in a vector. Unlike python7, R uses 1 based indexing, meaning that first element has an index 1. For slicing, one can specify the range of index using :.\n\nsample_vector = c (10:25)\nsample_vector[5]\n\n[1] 14\n\nsample_vector[5:6]\n\n[1] 14 15\n\nsample_vector[c(5,8)]\n\n[1] 14 17\n\n\n      Negative indexing, unlike python, excludes the element from the vector.\n\nsample_vector[-5]\n\n [1] 10 11 12 13 15 16 17 18 19 20 21 22 23 24 25\n\nsample_vector[-c(5,8)]\n\n [1] 10 11 12 13 15 16 18 19 20 21 22 23 24 25\n\n\n      Conditional or logical indexing can be done on the vector as well.\n\nsample_vector &gt; 13\n\n [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[13]  TRUE  TRUE  TRUE  TRUE\n\nsample_vector[sample_vector&gt;13]\n\n [1] 14 15 16 17 18 19 20 21 22 23 24 25\n\n\n      Additionally, different kinds of mathematical operatins can be applied on the vector.\n\nmin(sample_vector)\n\n[1] 10\n\nmax(sample_vector)\n\n[1] 25\n\nsum(sample_vector)\n\n[1] 280\n\nsd(sample_vector)\n\n[1] 4.760952\n\nrange(sample_vector)\n\n[1] 10 25\n\nmean(sample_vector)\n\n[1] 17.5\n\n\n      For data frame or tibble, one can use [row,column] for indexing or slicing.\n\ndf = data.frame(\n    id = 1:3,\n    name = c ('A', \"B\", \"C\"),\n    age = c (18, 21, 23)\n)\ndf['age']\n\n  age\n1  18\n2  21\n3  23\n\ndf$age\n\n[1] 18 21 23\n\ndf$age[1]\n\n[1] 18\n\ndf['age'][[1]][1]\n\n[1] 18\n\ndf[,]\n\n  id name age\n1  1    A  18\n2  2    B  21\n3  3    C  23\n\ndf[1,'age']\n\n[1] 18\n\ndf[1:2,'age']\n\n[1] 18 21\n\ndf[1:2,c('age','id')]\n\n  age id\n1  18  1\n2  21  2\n\n\n\ndf2 = tibble(\n    id = 1:3,\n    name = c ('A', \"B\", \"C\"),\n    age = c (18, 21, 23)\n)\ndf2['age']\n\n# A tibble: 3 × 1\n    age\n  &lt;dbl&gt;\n1    18\n2    21\n3    23\n\ndf2$age\n\n[1] 18 21 23\n\ndf2$age[1]\n\n[1] 18\n\ndf2['age'][[1]][1]\n\n[1] 18\n\ndf2[,]\n\n# A tibble: 3 × 3\n     id name    age\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 A        18\n2     2 B        21\n3     3 C        23\n\ndf2[1,'age']\n\n# A tibble: 1 × 1\n    age\n  &lt;dbl&gt;\n1    18\n\ndf2[1:2,'age']\n\n# A tibble: 2 × 1\n    age\n  &lt;dbl&gt;\n1    18\n2    21\n\ndf2[1:2,c('age','id')]\n\n# A tibble: 2 × 2\n    age    id\n  &lt;dbl&gt; &lt;int&gt;\n1    18     1\n2    21     2\n\n\n\n\nB.6 Random Numbers\n      In R, two widely used functions to generate random numbers are - runif() and rnorm(). runif() is used to generate random numbers from uniform distribution. The range of numbers generated using runif is 0 to 1.\n\n# vector of 2 elements \nrunif(2)\n\n[1] 0.001654289 0.480134359\n\n# vector of 5 elements from 0 to 100\nrunif(5, min = 0, max = 100)\n\n[1] 91.888037 85.541802 44.464972 44.135124  5.719579\n\n\n      rnorm() function generates random numbers from normal distribution with mean 0 and standard deviation 1.\n\nrnorm(5)\n\n[1] -0.7054502 -0.1203368 -1.0925815 -1.3689312  2.7041721\n\nrnorm(5, mean = 5, sd= 2)\n\n[1] 6.404331 6.000471 3.991709 4.891435 4.497516\n\nmean(rnorm(500, mean = 5, sd= 2))\n\n[1] 4.803692\n\nsd(rnorm(500, mean = 5, sd= 2))\n\n[1] 1.915328\n\nhist(rnorm(500, mean = 5, sd= 2))\n\n\n\n\n\n\n\n\n      Using rnorm(), we can create matrix and convert it into data frame or tibble.\n\nmat = matrix(rnorm(50), ncol = 5)\ncolnames(mat) = c(\"a\", \"b\", \"c\", \"d\", \"e\")\nas_tibble(mat)\n\n# A tibble: 10 × 5\n         a       b       c       d       e\n     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n 1  0.780  -0.115  -1.40    0.0706  1.09  \n 2 -0.622   0.885  -0.420   1.65   -0.0350\n 3  1.37    1.71   -2.35   -1.78    0.299 \n 4  0.125  -0.651   0.980  -0.449   0.517 \n 5 -0.306  -0.679  -0.703  -1.73   -0.609 \n 6 -0.0332 -2.63    0.0800  0.352  -0.546 \n 7  1.18   -0.569   1.10    0.702  -1.35  \n 8 -0.851   0.294  -0.581  -1.22   -0.657 \n 9  0.632   1.41    0.722   0.463   0.133 \n10  0.797  -0.0822 -1.18    1.38    1.19  \n\n\n      In additon to runif() and rnorm(), sample() function can be used to generate random numbers.\n\nsample(0:100,5)\n\n[1]  83  14 100   9   4\n\nsample(0:100,5, replace = TRUE)\n\n[1] 56 46 85 61 59\n\n\n\nmatrix(sample(0:50,50), ncol = 5)\n\n      [,1] [,2] [,3] [,4] [,5]\n [1,]    0   15   10   24   16\n [2,]   42   36   33    9   26\n [3,]    6   29   21   25   48\n [4,]   40   20    3    2   35\n [5,]   23   13   41   28   49\n [6,]   46   19   31   14    4\n [7,]   22   27   37   17   34\n [8,]    5   32   44    7   50\n [9,]   39   47   38   18   45\n[10,]    8   43    1   12   30",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>A Primer on R</span>"
    ]
  },
  {
    "objectID": "r_basics.html#functions",
    "href": "r_basics.html#functions",
    "title": "Appendix B — A Primer on R",
    "section": "B.7 Functions",
    "text": "B.7 Functions\n\n     In R, there are some functions that we use very frequently. In this section, we will discuss some of those functions.\n\nB.7.1 for Loop Function\n     for loop function in R is used to iterate over8 the elements of a vector, or a list, or a matrix, or a data frame, or a tibble and apply a set of instructions (operations) on each item of the object. for loop function is used to avoid unnecessary repeition of code, thus enhancing efficiency and effectiveness of code. The basic syntax of for loop function in R -\n\nfor (item in object) {\n    Statement\n}\n\n     Some examples of for loop function are -\n\nfor (x in seq(1:5)) {\n    print(x^2)\n}\n\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n\n\n\nfor (x in c('Adam', \"Joseph\", \"John\")) {\n    print(x)\n}\n\n[1] \"Adam\"\n[1] \"Joseph\"\n[1] \"John\"\n\n\n\n# Vectors for numbers and names\nnumbers &lt;- 1:3\nnames &lt;- c('Adam', 'Joseph', 'John')\n\n# Loop through the vectors and print the desired output\nfor (i in 1:length(numbers)) {\n    print(paste(numbers[i], names[i], sep = \", \"))\n}\n\n[1] \"1, Adam\"\n[1] \"2, Joseph\"\n[1] \"3, John\"\n\n\n\n\nB.7.2 map() Function\n      In map() function, the purpose is to apply a function on a vector or list, meaning that map() functions take a list/vector and a function as arguments. Figure B.2 sows the nature of map() function. The map() function then applies the function to each element of the list/vector and the result of this process is then combined into a list. For example, a list called sample_list is created. The length() function can be used to know the elements of the list. However, if you want to the element of each list, then map() function can be used. The other variation of map() functions that the package purrr include - map_int(), map_dbl(), map_chr(), and map_lgl()9.\n\n\n\n\n\n\nFigure B.2: map() Function Argument\n\n\n\n\nsample_list &lt;- \n    list(\n        x = 1737.1,\n        y = c(11.3, 6.2),\n        z = c(60.4, 81.4, 156, 174.8, 194, 34.8, 420, 2705.2, 340, 62)\n )\nsample_list\n\n$x\n[1] 1737.1\n\n$y\n[1] 11.3  6.2\n\n$z\n [1]   60.4   81.4  156.0  174.8  194.0   34.8  420.0 2705.2  340.0   62.0\n\nlength(sample_list)\n\n[1] 3\n\n\n\nmap(sample_list, length)\n\n$x\n[1] 1\n\n$y\n[1] 2\n\n$z\n[1] 10\n\n\n\nB.7.2.1 map() Functions with Multiple Inputs\n      The map2() functions are very similar to the map() functions, but they take two input vectors instead of one. Since the map2() functions iterate along the two vectors in parallel, they need to be of the same length. Figure B.3 shows a map2() function.\n\n\n\n\n\n\nFigure B.3: map2() Function\n\n\n\n\nx &lt;- c(1, 2, 4)\ny &lt;- c(6, 5, 3)\nmap2_dbl(x, y, min)\n\n[1] 1 2 3\n\n\n\ndf &lt;-\n    tibble(\n        a = c(1, 2, 4),\n        b = c(6, 5, 3)\n        )\n\ndf %&gt;%\n    mutate(min = map2_dbl(a, b, min))\n\n# A tibble: 3 × 3\n      a     b   min\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     6     1\n2     2     5     2\n3     4     3     3\n\n\n\ndf %&gt;%\n    mutate(\n        min = min(a,b)\n        )\n\n# A tibble: 3 × 3\n      a     b   min\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     6     1\n2     2     5     1\n3     4     3     1\n\n\n      By default mutate(), uses column-wise operations. map2_dbl() produces a column the same length at a and b. We can accomplish the same calculation using row-wise operations.\n\n df %&gt;%\n    rowwise() %&gt;%\n    mutate(min = min(a, b)) %&gt;%\n    ungroup()\n\n# A tibble: 3 × 3\n      a     b   min\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     6     1\n2     2     5     2\n3     4     3     3\n\n\n\n\nB.7.2.2 pmap() Functions\n      There are no map3() or map4() functions. Instead, you can use a pmap() (p for parallel) function to map over more than two vectors. The pmap() functions work slightly differently than the map() and map2() functions. In map() and map2() functions, you specify the vector(s) to supply to the function. In pmap() functions, you specify a single list that contains all the vectors (or lists) that you want to supply to your function. Figure B.4 shows a pmap() function.\n\n\n\n\n\n\nFigure B.4: pmap() Function (List)\n\n\n\n      Flipping the list diagram makes it easier to see that pmap() is basically just a generalized version of map2() (See Figure B.5).\n\n\n\n\n\n\nFigure B.5: pmap() Function (Flipped)\n\n\n\n      The only difference is that map2() lets you specify each vector as a separate argument. In pmap(), you have to store all your input vectors in a single list. This functionality allows pmap() to handle any number of input vectors.\n\nx &lt;- c(1, 2, 4)\ny &lt;- c(6, 5, 3)\nmap2_dbl(x, y, min)\n\n[1] 1 2 3\n\n\n\npmap_dbl(list(x, y), min)\n\n[1] 1 2 3\n\nz &lt;- c(100, 15, 1)\npmap_dbl(list(x, y, z), max)\n\n[1] 100  15   4\n\n\n\n\n\nB.7.3 User Defined Functions\n      User defined functions are also called named functions because they are assigned a name and expected to be called frequently. The goal of user defined functions is to optimize program, avoid or minimize the reptition of the code, prevent errors, and make the code more readable. In R, to declare a user defined function, we use the keywoard function(). The syntax of user defined function is given below. It is clear that there are three components of an R function - function name, function parameters (arguments), and function body (expression). We can drop curly braces ({}) from the function if the function body contains a single statement. Moreover, the function must be called with the correct number of arguments.\n\nfunctionname = function (arguments) {\n    function body \n}\n\n      Below are examples of some user defined functions.\n\nadd_numbers = function (x,y){\n    sum = x + y \n    return(sum)\n}\nadd_numbers(5,-25)\n\n[1] -20\n\n\n\ngreetings = function (name, greeting = \"Welcome\", sign = \"!\"){\n    greetingtogether = paste(name, sign, sep = \"\")\n    print(paste(greeting, greetingtogether))\n}\ngreetings(\"Nicole\")\n\n[1] \"Welcome Nicole!\"\n\n\n\n\nB.7.4 Anonymous Functions\n      Anonymous functions are functions that are not named, meaning that unlike normal functions, they do not have any name. Anonymous functions are useful when we do not plan to use them again and again. In most cases, we use anonymous function as an argument to other functions. In R, the synax of anonymous function is very much similar to named function. The syntax of anonymous function is - function (x) expression.\n\nvec = c (1,5,6)\nsapply(vec, function(x) x^2)\n\n[1]  1 25 36\n\n\n      Sometimes, using purrr, we can create anonymous function by one sided formula. In the below example, ~.x**2 works like function (x) x**2.\n\nmap_int(1:5, ~.x**2)\n\n[1]  1  4  9 16 25",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>A Primer on R</span>"
    ]
  },
  {
    "objectID": "r_basics.html#packages-in-r",
    "href": "r_basics.html#packages-in-r",
    "title": "Appendix B — A Primer on R",
    "section": "B.2 Packages in R",
    "text": "B.2 Packages in R\n\n     Packages are collections of functions, data and so on. Packages enhance the functionalities of R. There are tons of packages for different purposes in R. The Comprehensive R Archive Network (CRAN) - https://cran.r-project.org/- is the primary repository of R packages. Some of the widely used R packages include - dplyr, ggplot, lubridate, and shiny. The function - install.package('packagename')- is used to install a package in R. Once the package is installed, one needs to load (import) package by running the code - library (packagename)3. Please note that you need to install the package only once, but you need to import (load) your package each time you start a new R session.\n\n\n# installing tidyverse package \ninstall.packages('tidyverse')\n\n\n# Loading tidyverse package \nlibrary(tidyverse)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>A Primer on R</span>"
    ]
  },
  {
    "objectID": "prescriptive.html",
    "href": "prescriptive.html",
    "title": "8  Prescriptive Analytics in Accounting",
    "section": "",
    "text": "8.1 Decision Analysis",
    "crumbs": [
      "Predictive and Prescriptive Analytics",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Prescriptive Analytics in Accounting</span>"
    ]
  },
  {
    "objectID": "prescriptive.html#optimization-techniques",
    "href": "prescriptive.html#optimization-techniques",
    "title": "8  Prescriptive Analytics in Accounting",
    "section": "8.2 Optimization Techniques",
    "text": "8.2 Optimization Techniques",
    "crumbs": [
      "Predictive and Prescriptive Analytics",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Prescriptive Analytics in Accounting</span>"
    ]
  },
  {
    "objectID": "prescriptive.html#scenario-planning",
    "href": "prescriptive.html#scenario-planning",
    "title": "8  Prescriptive Analytics in Accounting",
    "section": "8.3 Scenario Planning",
    "text": "8.3 Scenario Planning",
    "crumbs": [
      "Predictive and Prescriptive Analytics",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Prescriptive Analytics in Accounting</span>"
    ]
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "3  Exploratory Data Analysis",
    "section": "",
    "text": "3.1 Descriptive Statistics",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "eda.html#descriptive-statistics",
    "href": "eda.html#descriptive-statistics",
    "title": "3  Exploratory Data Analysis",
    "section": "",
    "text": "In descriptive statistics, we summarize the data using different metrics such as mean, median, standard deviation, minimum value, maximum value, and percentile. Descriptive statisics is also called summary statistics.",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "eda.html#data-visualizations-techniques",
    "href": "eda.html#data-visualizations-techniques",
    "title": "3  Exploratory Data Analysis",
    "section": "3.2 Data Visualizations Techniques",
    "text": "3.2 Data Visualizations Techniques",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "eda.html#identifying-patterns-and-trends",
    "href": "eda.html#identifying-patterns-and-trends",
    "title": "3  Exploratory Data Analysis",
    "section": "3.3 Identifying Patterns and Trends",
    "text": "3.3 Identifying Patterns and Trends",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "eda.html#python-package",
    "href": "eda.html#python-package",
    "title": "3  Exploratory Data Analysis",
    "section": "3.4 Python Package",
    "text": "3.4 Python Package\n\n# for Data Manipulation\nimport pandas as pd\nimport numpy as np \n# for Data Visualization \nimport matplotlib.pyplot as plt \nimport seaborn as sns\n# for Machine Learning \nimport sklearn",
    "crumbs": [
      "Data Exploration and Management",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "python_basics.html#what-is-numpy",
    "href": "python_basics.html#what-is-numpy",
    "title": "Appendix A — A Primer on Python",
    "section": "A.5 What is Numpy?",
    "text": "A.5 What is Numpy?\n\nA.5.1 Installing and Importing Numpy\n\n     Numpy is a library in python and it is one of the most important and essential libraries for data science becasue almost all of the libraries in python PyData ecosystem use numpy. Therefore, understanding numpy is important. Moreover, numpy arrays are very fast as they are implemented in C. In this section, we will learn some useful numpy methods.\n     Before we start using the numpy module (library), we need to install it. We can run the following code to install numpy.\n\npip install numpy \n# OR\nconda install numpy \n\n     Once the numpy is installed, we need to load (import) the library by running the following code -\n\nimport numpy as np\n\n\nA.5.2 Some Useful numpy Functions for Array\n\nA.5.2.1 Array Creation\n     Array is a multi dimensional data structure, which describes a collection of “items” of the same type (homogenous). Arrays are powerful for performing different mathematical and scientific computation. There are many functions in numpy to create arrays. Below some those methods (functions) are described.\n     * np.array() is used to create an array in numpy. The array object is also called ndarray. You can pass a list or tuple to the np.array () function. You can create zero, one, two, or three dimensional arrays in numpy. Using the ndim() you can check the dimension of an array.\n\nlist = [2025, 2024, 2023, 2022, 2021, 2020, 2019]\nnp.array(list)\narray = np.array(list)\narray.ndim # 1 dimensional array\n\nnp.array((20)).ndim # zero dimensional array. \n\narray2 = np.array([[1,3,5,7], [2,4,6,8]])\narray2\narray2.ndim # 2 dimensional array\n\n2\n\n\n     * np.arange(start, stop, step)3 function is used to create array with values starting from start up to, but not including, stop value, increasing by step.\n\nnp.arange(10,21,1)\nnp.arange(21)\nnp.arange(10,21)\nnp.arange (-1,1)\nnp.arange(-1,1,0.001)\nnp.arange(10,30,3)\n\narray([10, 13, 16, 19, 22, 25, 28])\n\n\n     * np.linspace(start, stop, n) creates an array of n evenly spaced number between start and stop.\n\nnp.linspace(10,21,10)\nnp.linspace(1,100, 10)\n\narray([  1.,  12.,  23.,  34.,  45.,  56.,  67.,  78.,  89., 100.])\n\n\n     * np.zeros() is used to create an array with elements 0.\n\nnp.zeros(5)\nnp.zeros((5,5))\nnp.zeros([5,5])\n\narray([[0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.]])\n\n\n     * np.ones() is used to create an array with elements 1.\n\nnp.ones(5)\nnp.ones((5,5))\nnp.ones([5,5])\n\narray([[1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.]])\n\n\n     * np.eye() is used to create an identity matrix. The same can be done by using np.identity() function.\n\nnp.eye(5)\n\narray([[1., 0., 0., 0., 0.],\n       [0., 1., 0., 0., 0.],\n       [0., 0., 1., 0., 0.],\n       [0., 0., 0., 1., 0.],\n       [0., 0., 0., 0., 1.]])\n\n\n     * np.random.rand() function generates an array of random numbers between 0 and 1 from a uniform distribution.\n\nnp.random.rand(10) # one dimensional \nnp.random.rand(3,2) # two dimensional \n\narray([[0.42390711, 0.61079607],\n       [0.95794296, 0.56150974],\n       [0.66695476, 0.42697104]])\n\n\n     * np.random.randn() generates an array of random numbers between 0 and 1 from a standard normal distribution.\n\nnp.random.randn(10) # one dimensional \nnp.random.randn(3,4) # two dimensional \n\narray([[-0.50639224,  1.64305068, -0.27672554, -0.38256699],\n       [ 0.08858832, -0.33806429, -0.52198486,  1.19581807],\n       [-0.09403623,  0.40890832, -1.35648947,  0.14097056]])\n\n\n     * np.random.randint() allows to generate random integer numbers given an interval of integers.\n\nnp.random.randint(low=0, high=10, size = 5)\n\narray([9, 4, 4, 9, 0], dtype=int32)\n\n\n     * np.reshape() allows to chgange the shape (rows and columns) without changing the data in the array.\n\narray = np.random.randn(3,4) # two dimensional \narray\narray.reshape(6,2)\n\narray([[ 0.01429939, -1.96808496],\n       [ 1.1673523 , -0.2213831 ],\n       [-0.04004653, -1.42016351],\n       [-0.05270527, -0.02108941],\n       [ 2.06187059, -0.18779063],\n       [-0.55702983,  0.71954243]])\n\n\n     Some other useful functions from numpy include - np.shape, np.dtype, np.transpose. Some useful functions related to linear algebra include - np.linalg.inv() - to compute inverse of a matrix, np.linalg.det() - to compute determinant of a matrix, np.linalg.eig() - to compute eigenvalues and eigenvectors of a matrix, np.linalg.solve() - to solve a system of linear equations.\n\n\nA.5.2.2 Array Indexing and Selection\n     Both indexing and slicing of arrays are important skill to learn. Indexing refers to obtaining individual elements from an array while slicing refers to obtaining a sequence of elements from the array. We use array[start:end] to index an array.\n\n# One Dimensional Array\narray = np.random.randn(10)\narray\narray[2]\narray[1:3]\narray[:5]\narray[5:]\narray[-3:]\narray[:-3]\narray[array&gt;0.50] # conditional indexing \n\narray([0.93320999, 1.80044787, 1.58729916, 1.13954655, 1.47716299,\n       0.96186324, 2.05562478])\n\n\n\n# Two Dimensional Array \narray2D = np.random.randn(8,5)\narray2D\narray2D[1]\narray2D[1][2] # double brackets \narray2D[1,2] # single bracket (preferred method)\narray2D[2:,]\narray2D[2:,3:]\narray2D[2:3]\narray2D[2:4] # Only rows \narray2D[:,3:]\n\narray([[ 0.40665892, -1.05289662],\n       [-0.56255002, -2.01561794],\n       [ 1.27715545, -0.03270967],\n       [ 1.80441242, -0.72133086],\n       [ 1.68059155,  1.09966703],\n       [ 1.11904037,  2.29520997],\n       [-0.14270146,  1.15562721],\n       [ 2.08597727, -0.60478802]])\n\n\n\n\nA.5.2.3 Array Operations\n     Array operations involve performing matematical operations on the array as a whole. They are not perfomed on the individual element of the array.\n\narray1 = np.arange(85,96)\narray2 = np.arange (35,46)\narray1 + array2\narray1 - array2\narray1*array2\narray1 / array2\n\narray([2.42857143, 2.38888889, 2.35135135, 2.31578947, 2.28205128,\n       2.25      , 2.2195122 , 2.19047619, 2.1627907 , 2.13636364,\n       2.11111111])\n\n\n\narray1.mean()\narray2.std()\nnp.mean(array1)\nnp.min(array2)\nnp.max(array2)\nnp.sqrt(array1)\nnp.sum(array1)\nnp.log(np.sum(array1))\n\nnp.float64(6.897704943128636)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>A Primer on Python</span>"
    ]
  },
  {
    "objectID": "python_basics.html#exercises",
    "href": "python_basics.html#exercises",
    "title": "Appendix A — A Primer on Python",
    "section": "Exercises",
    "text": "Exercises\n\n\nCreate an array of integers from 10 to 50.\nCreate an array of all even integers from 10 to 50.\nCreate an array of 10 threes (use either np.full() or np.ones() or np.repeat()).\nCreate a 3 by 3 matrix with values ranging from 10 to 18.\nCreate an array of 5 by 5 identify matrix.\nUse numpy to generate a random number between 0 and 1.\nUse numpy to generate an array of 25 random numbers sampled from a standard normal distribution.\nCreate a matrix like below -\n\narray([[0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ],\n       [0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 ],\n       [0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 ],\n       [0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 ],\n       [0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5 ],\n       [0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6 ],\n       [0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.7 ],\n       [0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8 ],\n       [0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9 ],\n       [0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1.  ]])\n\nCreate an array of 50 linearly spaced points between 0 and 1.\nCreate an array of 20 linearly spaced points between 0 and 1.\n\n\nmat = np.arange(1,26).reshape(5,5)\nmat\n\narray([[ 1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10],\n       [11, 12, 13, 14, 15],\n       [16, 17, 18, 19, 20],\n       [21, 22, 23, 24, 25]])\n\n\n\nProduce the following matrix from the mat matrix above.\n\narray([[12, 13, 14, 15],\n       [17, 18, 19, 20],\n       [22, 23, 24, 25]])\n\nProduce the following (value) 20 from mat matrix - np.int64(20)\nProduce the following matrix from mat.\n\narray([[ 2],\n       [ 7],\n       [12]])\n\nProduce the following matrix from mat - array([21, 22, 23, 24, 25])\nProduce the following matrix from mat\n\narray([[16, 17, 18, 19, 20],\n       [21, 22, 23, 24, 25]])\n\nGet the sum of all values in the mat matrix\nGet the standard deviation of the values in mat matrix\nGet the sum of all columns in the mat matrix\nGet the sum of all rows in the mat matrix\nGet the determinant and eigenvalues and eigenvectors of the matrix mat.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>A Primer on Python</span>"
    ]
  },
  {
    "objectID": "r_basics.html#what-is-r",
    "href": "r_basics.html#what-is-r",
    "title": "Appendix B — A Primer on R",
    "section": "B.1 What is R?",
    "text": "B.1 What is R?\n\n    R is an object-oriented programming language. R was first developed by two statisticans - Ross Ihaka and Robert Gentleman1 - in early 1990s2. Though it was first designed for statistial purposes, nowadays, it is widely used in statistical analysis, visualization, finance, healthcare industry, and many more. Many companies in the world use R. For example, The Newyork Times and Airbnb use R for their day to day operations.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>A Primer on R</span>"
    ]
  },
  {
    "objectID": "r_basics.html#footnotes",
    "href": "r_basics.html#footnotes",
    "title": "Appendix B — A Primer on R",
    "section": "",
    "text": "R got its name from the first letters of its creators. Both of their names start with letter R.↩︎\n1996 is the year when R was introduced.↩︎\nPlease note that in install.package(), you need to use quote (either single or double), but in library(), you do not need to use quote.↩︎\nThe word “data” sometimes is considered plural because there is a singular word for “data”, which is “datum”. In this book, both words are used interchangeably. Therefore, the word “data” is used as both singular and plural.↩︎\nThe other two atomic vectors include - complex and raw.↩︎\nAs opposed to NULL,NA refers to the absence of value.↩︎\nPython uses 0 based indexing.↩︎\nIteration (also called looping) is the process of repeating the same operation on different columns, or on different datasets. There are two important iteration paradigms: imperative programming and functional programming. On the imperative side, one has tools like for () loops and while () loops, which are a great place to start because they make iteration very explicit, so it is obvious what is happening. However, for () loops are quite verbose, and require quite a bit of bookkeeping code that is duplicated for every for loop. One the other hand Functional programming (FP) offers tools to extract out this dupli cated code, so each common for loop pattern gets its own function. Once one masters the vocabulary of FP, one can solve many common iteration problems with less code, more ease, and fewer errors. The apply () family functions in base R are equivalent to for () loop. The apply () family functions include the following functions for looping- apply (); lapply (); sapply (), tapply (), vapply (), and mapply (). The purrr package in tidyverse offers map () family functions for functional programming, which we will be using for the loop operations.↩︎\nThe output of map() function is always list. These variations help to get the desired output. To learn more about map functions, please visit - https://adv-r.hadley.nz/functionals.html.↩︎",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>A Primer on R</span>"
    ]
  },
  {
    "objectID": "r_basics.html#indexing-and-slicing-vectors",
    "href": "r_basics.html#indexing-and-slicing-vectors",
    "title": "Appendix B — A Primer on R",
    "section": "B.5 Indexing and Slicing Vectors",
    "text": "B.5 Indexing and Slicing Vectors\n      Using [], one can access elements in a vector. Unlike python7, R uses 1 based indexing, meaning that first element has an index 1. For slicing, one can specify the range of index using :.\n\nsample_vector = c (10:25)\nsample_vector[5]\n\n[1] 14\n\nsample_vector[5:6]\n\n[1] 14 15\n\nsample_vector[c(5,8)]\n\n[1] 14 17\n\n\n      Negative indexing, unlike python, excludes the element from the vector.\n\nsample_vector[-5]\n\n [1] 10 11 12 13 15 16 17 18 19 20 21 22 23 24 25\n\nsample_vector[-c(5,8)]\n\n [1] 10 11 12 13 15 16 18 19 20 21 22 23 24 25\n\n\n      Conditional or logical indexing can be done on the vector as well.\n\nsample_vector &gt; 13\n\n [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[13]  TRUE  TRUE  TRUE  TRUE\n\nsample_vector[sample_vector&gt;13]\n\n [1] 14 15 16 17 18 19 20 21 22 23 24 25\n\n\n      Additionally, different kinds of mathematical operatins can be applied on the vector.\n\nmin(sample_vector)\n\n[1] 10\n\nmax(sample_vector)\n\n[1] 25\n\nsum(sample_vector)\n\n[1] 280\n\nsd(sample_vector)\n\n[1] 4.760952\n\nrange(sample_vector)\n\n[1] 10 25\n\nmean(sample_vector)\n\n[1] 17.5\n\n\n      For data frame or tibble, one can use [row,column] for indexing or slicing.\n\ndf = data.frame(\n    id = 1:3,\n    name = c ('A', \"B\", \"C\"),\n    age = c (18, 21, 23)\n)\ndf['age']\n\n  age\n1  18\n2  21\n3  23\n\ndf$age\n\n[1] 18 21 23\n\ndf$age[1]\n\n[1] 18\n\ndf['age'][[1]][1]\n\n[1] 18\n\ndf[,]\n\n  id name age\n1  1    A  18\n2  2    B  21\n3  3    C  23\n\ndf[1,'age']\n\n[1] 18\n\ndf[1:2,'age']\n\n[1] 18 21\n\ndf[1:2,c('age','id')]\n\n  age id\n1  18  1\n2  21  2\n\n\n\ndf2 = tibble(\n    id = 1:3,\n    name = c ('A', \"B\", \"C\"),\n    age = c (18, 21, 23)\n)\ndf2['age']\n\n# A tibble: 3 × 1\n    age\n  &lt;dbl&gt;\n1    18\n2    21\n3    23\n\ndf2$age\n\n[1] 18 21 23\n\ndf2$age[1]\n\n[1] 18\n\ndf2['age'][[1]][1]\n\n[1] 18\n\ndf2[,]\n\n# A tibble: 3 × 3\n     id name    age\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 A        18\n2     2 B        21\n3     3 C        23\n\ndf2[1,'age']\n\n# A tibble: 1 × 1\n    age\n  &lt;dbl&gt;\n1    18\n\ndf2[1:2,'age']\n\n# A tibble: 2 × 1\n    age\n  &lt;dbl&gt;\n1    18\n2    21\n\ndf2[1:2,c('age','id')]\n\n# A tibble: 2 × 2\n    age    id\n  &lt;dbl&gt; &lt;int&gt;\n1    18     1\n2    21     2",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>A Primer on R</span>"
    ]
  },
  {
    "objectID": "r_basics.html#random-numbers",
    "href": "r_basics.html#random-numbers",
    "title": "Appendix B — A Primer on R",
    "section": "B.6 Random Numbers",
    "text": "B.6 Random Numbers\n      In R, two widely used functions to generate random numbers are - runif() and rnorm(). runif() is used to generate random numbers from uniform distribution. The range of numbers generated using runif is 0 to 1.\n\n# vector of 2 elements \nrunif(2)\n\n[1] 0.001654289 0.480134359\n\n# vector of 5 elements from 0 to 100\nrunif(5, min = 0, max = 100)\n\n[1] 91.888037 85.541802 44.464972 44.135124  5.719579\n\n\n      rnorm() function generates random numbers from normal distribution with mean 0 and standard deviation 1.\n\nrnorm(5)\n\n[1] -0.7054502 -0.1203368 -1.0925815 -1.3689312  2.7041721\n\nrnorm(5, mean = 5, sd= 2)\n\n[1] 6.404331 6.000471 3.991709 4.891435 4.497516\n\nmean(rnorm(500, mean = 5, sd= 2))\n\n[1] 4.803692\n\nsd(rnorm(500, mean = 5, sd= 2))\n\n[1] 1.915328\n\nhist(rnorm(500, mean = 5, sd= 2))\n\n\n\n\n\n\n\n\n      Using rnorm(), we can create matrix and convert it into data frame or tibble.\n\nmat = matrix(rnorm(50), ncol = 5)\ncolnames(mat) = c(\"a\", \"b\", \"c\", \"d\", \"e\")\nas_tibble(mat)\n\n# A tibble: 10 × 5\n         a       b       c       d       e\n     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n 1  0.780  -0.115  -1.40    0.0706  1.09  \n 2 -0.622   0.885  -0.420   1.65   -0.0350\n 3  1.37    1.71   -2.35   -1.78    0.299 \n 4  0.125  -0.651   0.980  -0.449   0.517 \n 5 -0.306  -0.679  -0.703  -1.73   -0.609 \n 6 -0.0332 -2.63    0.0800  0.352  -0.546 \n 7  1.18   -0.569   1.10    0.702  -1.35  \n 8 -0.851   0.294  -0.581  -1.22   -0.657 \n 9  0.632   1.41    0.722   0.463   0.133 \n10  0.797  -0.0822 -1.18    1.38    1.19  \n\n\n      In additon to runif() and rnorm(), sample() function can be used to generate random numbers.\n\nsample(0:100,5)\n\n[1]  83  14 100   9   4\n\nsample(0:100,5, replace = TRUE)\n\n[1] 56 46 85 61 59\n\n\n\nmatrix(sample(0:50,50), ncol = 5)\n\n      [,1] [,2] [,3] [,4] [,5]\n [1,]    0   15   10   24   16\n [2,]   42   36   33    9   26\n [3,]    6   29   21   25   48\n [4,]   40   20    3    2   35\n [5,]   23   13   41   28   49\n [6,]   46   19   31   14    4\n [7,]   22   27   37   17   34\n [8,]    5   32   44    7   50\n [9,]   39   47   38   18   45\n[10,]    8   43    1   12   30",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>A Primer on R</span>"
    ]
  },
  {
    "objectID": "r_basics.html#learning-objectives-of-the-appendix",
    "href": "r_basics.html#learning-objectives-of-the-appendix",
    "title": "Appendix B — A Primer on R",
    "section": "",
    "text": "Gain an Understanding about R\nGain an Understanding about the Data Types and Data Structures in R\nGain an Understanding about Indexing and Slicing of vectors and Data Frames, and Mathematical Operations on them\nGain an Understanding about for Loop function, map function, and User Defined Function in R",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>A Primer on R</span>"
    ]
  },
  {
    "objectID": "r_basics.html#conclusions",
    "href": "r_basics.html#conclusions",
    "title": "Appendix B — A Primer on R",
    "section": "B.8 Conclusions",
    "text": "B.8 Conclusions",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>A Primer on R</span>"
    ]
  },
  {
    "objectID": "r_basics.html#exercises",
    "href": "r_basics.html#exercises",
    "title": "Appendix B — A Primer on R",
    "section": "Exercises",
    "text": "Exercises",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>A Primer on R</span>"
    ]
  },
  {
    "objectID": "python_basics.html#conclusions",
    "href": "python_basics.html#conclusions",
    "title": "Appendix A — A Primer on Python",
    "section": "A.7 Conclusions",
    "text": "A.7 Conclusions",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>A Primer on Python</span>"
    ]
  }
]