---
title: "A Primer on Python"
format: html
---

## Learning Objectives of the Appendix {.unnumbered}

At the End of the Appendix, Students should be Able to -

-   Gain an Understanding about the Python

-   Gain an Understanding about the Data Types and Data Structures in Python

-   Gain an Understanding about Arrays in `Numpy`, Indexing and Slicing of Arrays, and Operations of Arrays 

-   Gain an Understanding about `for` Loop function, `map` function, and User Defined Function 

## What is Python?

::: {style="text-align: justify"}
     According to [www.python.org](www.python.org) "Python is an interpreted, object-oriented, high-level programming language with dynamic semantics. Its high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development, as well as for use as a scripting or glue language to connect existing components together." It further explains - "Python's simple, easy to learn syntax emphasizes readability and therefore reduces the cost of program maintenance. Python supports modules and packages, which encourages program modularity and code reuse."
:::

## Data Types in Python

::: {style="text-align: justify"}
     Data has different types. When dealing with data, we need to know the types of the data because different data types can do different things. There are six basic data types in python. They include - `int`, `float`, `complex`, `bool`, `str`, and `bytes`. We use `type ()` function to know the types of the data. However, most commmonly used data types are `int`, `float`, `str`, and `bool`.
:::

```{python}
x = "hello world"
type(x)
```

```{python}
x = 25
type(x)
```

```{python}
x = 25.34
type(x)
```

```{python}
x = True
type(x)
```

```{python}
x =7j
type(x)
```

```{python}
x = b"Hello World"
type(x)
```

## Data Structures in Python

::: {style="text-align: justify"}
     Data structures are the collection of data on which different processes can be done efficiently. It enables quick and easier access, and efficient modifications. Data Structures allows to organize data in such a way that enables to store collections of data, relate them and perform operations on them. Data structures in python can broadly be classified into two groups - Built-in data structures and User-defined data structures. @fig-datastructure Shows the data structure in python. Built-in data structure is important because they are widely used. Therefore, we will elaborate on built-in data structure.
:::

![Data Structure in Python](images/data-structure-python.png){#fig-datastructure fig-align="center"}

## Built-in Data Structure

### List

::: {style="text-align: justify"}
     List is used to store collection of ordered[^python_basics-1]data items. Lists are created using square brackets (`[]`). We can also create a list using `list ()` function. Lists can hold different types of data, including integers (`int`), floats (`float`), strings (`str`), and even other lists. We can use `len ()` function to know the number to elements in the list. Moreover, lists are **mutable**, meaning that their contents can be changed after the list has been created.
:::

[^python_basics-1]: When we say that lists are ordered, it means that the items have a defined order, and that order will not change. If you add new items to a list, the new items will be placed at the end of the list.

```{python}
colors = ['red', 'blue', 'green']
print(colors)
```

```{python}
len(colors)
```

```{python}
a = [1, 'apple', 3.14, [5, 6]]
print(a)
```

```{python}
b = list((1, 'apple', 3.14, [5, 6]))
print(b)
```

#### Creating a List with Repeated Elements

A list with repeated elements can be created using the multiplication operator.

```{python}
x = [2] * 5
y = [0] * 7

print(x)
print(y)
```

#### Accessing List Elements

::: {style="text-align: justify"}
     Indexing can be used to access the elements in the list. Python indexes start at `0`. Therefore, `a[0]` will access the first element in the list a. @fig-listindex shows the index of the list - colors.
:::

![Index of List Elements](images/list-index.png){#fig-listindex fig-align="center"}

```{python}
colors[0]
```

```{python}
colors[-1]
```

#### Adding Elements to the List

We can add elements to the list using three methods - `append ()`, `insert ()`, and `extend ()`.

```{python}
# Initialize an empty list
m = []

# Adding 10 to end of list
m.append(50)  
print("After append(150):", m)  

# Inserting 40 at index 0
m.insert(0, 40)
print("After insert(0, 40):", m) 

# Adding multiple elements  [60,70,80] at the end
m.extend([60, 70, 80])  
print("After extend([60,70,80]):", m) 

```

#### Updating Elements to the List

We can change the value of an element by accessing it using its index.

```{python}
p = [10, 20, 30, 40, 50]
# Change the second element
p[1] = 25 

print(p)  
```

#### Removing Elements from the List

We can remove elements from the list using three methods - `remove ()`, `pop ()`, and `del ()`.

```{python}
a = [10, 20, 30, 40, 50]

# Removes the first occurrence of 30
a.remove(30)  
print("After remove(30):", a)

# Removes the element at index 1 (20)
popped_val = a.pop(1)  
print("Popped element:", popped_val)
print("After pop(1):", a) 

# Deletes the first element (10)
del a[0]  
print("After del a[0]:", a)
```

### Dictionary

::: {style="text-align: justify"}
     Dictionary data structure in python is used to store data in **key**:**value** format. Unlike list - which uses square brackets (`[]`) - dictionary uses curly brackets (`{}`). Like lists, dictionary is mutable. Dictionary items can be referred by using key name. We can use `len ()` function to know the total number of element of a dictionary and `type ()` to know the type.
:::

```{python}
my_car = {
  "brand": "Ford",
  "model": "Escape",
  "year": 2017
}
print(my_car)
```

```{python}
print(my_car['model'])
```

The values in dictionary items can be of any data type

```{python}
car_features = {
  "brand": "Ford", # string 
  "electric": False, # boolean 
  "year": 1964, # integer
  "colors": ["red", "white", "blue"] # list of string
}
```

The function `dict ()` can also be used to construct dictionary.

```{python}
my_friends = dict(
    name = ["John", "Smith", "Mark"], 
    age = [36, 45, 49], 
    country = ["Norway", "Sweden", "Finland"]
)
print(my_friends)
```

Some built-in dictionary methods[^python_basics-2] are -

[^python_basics-2]: In python, functions are called methods.

-   `dict.clear()` - removes all the elements from the dictionary

```{python}
employee = {
    'name': ["John", "Jessica", "Zack"], 
    'age': [18, 19, 20]
}
print(employee)
```

```{python}
employee.clear()
print(employee)
```

-   `dict.copy()` - returns a copy of the dictionary

-   `dict.get(key, default = “None”)` - returns the value of specified key

-   `dict.items()` - returns the value of specified key

-   `dict.keys()` - returns a list containing dictionary's key

-   `dict.values()` - returns a list of all the values of the dictionary.

### Tuple

::: {style="text-align: justify"}
     In python, tuple is very similar to list, except one difference. List is mutable, but tuple is not. Once a tuple is created, its elements cannot be changed. Unlike lists, we cannot add, remove, or change elelment in tuple. Tuple is created by using parenthese (`()`). Also, the function `tuple ()` can also be used to create tuple. We can access the elements of tuple by indexing as we did for lists.
:::

```{python}
my_tuple = ('10', '20', '30', 'hello', 'world')
my_tuple
```

```{python}
my_tuple[3]
```

::: {style="text-align: justify"}
There are different operations that can be performed on the tuple. Some of them include -

-   Concatenation - To concatenate, plus operator (`+`) is used.

-   Nesting - Nested tuple means a tuple is inside the another tuple

-   Repetition - creating a tuple of several times
:::

```{python}
second_tuple = ('10', '20', 'SIU', "SOA", "Carbondale")
second_tuple*3
```

-   Slicing - Dividing a given tuple into small tuples using indexing is slicing.

```{python}
second_tuple[1:]
second_tuple[2:4]
second_tuple[::-1]
```

::: {style="text-align: justify"}
-   Finding the Length - using `len ()` function, we can figure out the total number of elements in the tuple.

-   Different data types in tuples - Tuple can include heterogenous data.

-   Lists to tuples - Using `tuple ()` functions, we can convert a list into tuple.
:::

### Set

::: {style="text-align: justify"}
     A set in python is a collection of *unordered*, *unchangeable*, and *unindexed* items. Set items are unchangeable, but new items can be added to the set and old items can be deleted from the set. Another important characteristics of set is that it has no duplicate elements. Curly bracket (`{}`) is used to create a set. The function `difference ()` or minus operator (`-`) is used to calculate difference between two sets.
:::

```{python}
new_set = {'Hello', 'World', "World"}
new_set 
```

```{python}
type(new_set)
```

```{python}
#| eval: false
new_set[0] = "Hi"
```


## What is `Numpy`?

### Installing and Importing Numpy 

::: {style="text-align: justify"}
     `Numpy` is a library in python and it is one of the most important and essential libraries for data science becasue almost all of the libraries in python PyData ecosystem use numpy. Therefore, understanding numpy is important. Moreover, numpy arrays are very fast as they are implemented in C. In this section, we will learn some useful numpy methods. 

     Before we start using the `numpy` module (library), we need to install it. We can run the following code to install numpy. 

```{python}
#| eval: false
pip install numpy 
# OR
conda install numpy 
```

     Once the numpy is installed, we need to load (import) the library by running the following code - 

```{python}
import numpy as np
```

### Some Useful `numpy` Functions for Array

#### Array Creation 

     Array is a multi dimensional data structure, which describes a collection of "items" of the same type (homogenous). Arrays are powerful for performing different mathematical and scientific computation. There are many functions in numpy to create arrays. Below some those methods (functions) are described.  

     * `np.array()` is used to create an array in numpy. The array object is also called ndarray. You can pass a list or tuple to the np.array () function. You can create zero, one, two, or three dimensional arrays in numpy. Using the `ndim()` you can check the dimension of an array.   


```{python}
list = [2025, 2024, 2023, 2022, 2021, 2020, 2019]
np.array(list)
array = np.array(list)
array.ndim # 1 dimensional array

np.array((20)).ndim # zero dimensional array. 

array2 = np.array([[1,3,5,7], [2,4,6,8]])
array2
array2.ndim # 2 dimensional array
```

     * `np.arange(start, stop, step)`^[`range(start, stop, step)` function creates a sequence of numbers starting from `start`, and stopping at `stop`. Usually, the `step` in `range ()` function is 1.] function is used to create array with values starting from `start` up to, but not including, `stop` value, increasing by `step`. 

```{python}
np.arange(10,21,1)
np.arange(21)
np.arange(10,21)
np.arange (-1,1)
np.arange(-1,1,0.001)
np.arange(10,30,3)
```

     * `np.linspace(start, stop, n)` creates an array of n evenly spaced number between `start` and `stop`.
```{python}
np.linspace(10,21,10)
np.linspace(1,100, 10)
```

     * `np.zeros()` is used to create an array with elements 0. 
```{python}
np.zeros(5)
np.zeros((5,5))
np.zeros([5,5])
```

     * `np.ones()` is used to create an array with elements 1. 

```{python}
np.ones(5)
np.ones((5,5))
np.ones([5,5])
```

     * `np.eye()` is used to create an identity matrix. The same can be done by using `np.identity()` function. 

```{python}
np.eye(5)
```

     * `np.random.rand()` function generates an array of random numbers between 0 and 1 from a uniform distribution.

```{python}
np.random.rand(10) # one dimensional 
np.random.rand(3,2) # two dimensional 
```

     * `np.random.randn()` generates an array of random numbers between 0 and 1 from a standard normal distribution.
```{python}
np.random.randn(10) # one dimensional 
np.random.randn(3,4) # two dimensional 
```

     * `np.reshape()` allows to chgange the shape (rows and columns) without changing the data in the array. 

```{python}

array = np.random.randn(3,4) # two dimensional 
array
array.reshape(6,2)
```

     Some other useful functions from numpy include - `np.shape`, `np.dtype`, `np.transpose`. Some useful functions related to linear algebra include - `np.linalg.inv()` - to compute inverse of a matrix, `np.linalg.det()` - to compute determinant of a matrix, `np.linalg.eig()` - to compute eigenvalues and eigenvectors of a matrix, `np.linalg.solve()` - to solve a system of linear equations.


#### Array Indexing and Selection 

     Both indexing and slicing of arrays are important skill to learn. Indexing refers to obtaining individual elements from an array while slicing refers to obtaining a sequence of elements from the array. We use `array[start:end]` to index an array. 


```{python}
# One Dimensional Array
array = np.random.randn(10)
array
array[2]
array[1:3]
array[:5]
array[5:]
array[-3:]
array[:-3]
array[array>0.50] # conditional indexing 
```


```{python}
# Two Dimensional Array 
array2D = np.random.randn(8,5)
array2D
array2D[1]
array2D[1][2] # double brackets 
array2D[1,2] # single bracket (preferred method)
array2D[2:,]
array2D[2:,3:]
array2D[2:3]
array2D[2:4] # Only rows 
array2D[:,3:]
```


#### Array Operations 

     Array operations involve performing matematical operations on the array as a whole. They are not perfomed on the individual element of the array.  

```{python}
array1 = np.arange(85,96)
array2 = np.arange (35,46)
array1 + array2
array1 - array2
array1*array2
array1 / array2
```

```{python}
array1.mean()
array2.std()
np.mean(array1)
np.min(array2)
np.max(array2)
np.sqrt(array1)
np.sum(array1)
np.log(np.sum(array1))
```


:::


## Functions in Python

::: {style="text-align: justify"}
     In python, there are some functions that we use very frequently. In this section, we will discuss some of those functions.

### `for` Loop Function 
     `for` loop function in python allows to iterate over iterable sequences such as list, tuple, string, or range and execuate codes for each elements in the sequence. `for` loop function helps to handle repititve tasks more efficiently and effectively. The syntax of a `for` loop function is - 

```{python}
#| eval: false

for element in sequence:
  # Expected code to execute on each element of the sequence
```

     A basic example of a `for` loop function is -

```{python}
analytics_students = ['Ashley', 'Elijah', 'John', 'Jack', 'Adams']
for student in analytics_students:
  print(student)

```

     Other examples of a `for` loop function is -

```{python}
even_numbers = [2,4,6,8,10]
for numbers in even_numbers:
  square = numbers**2
  print (square)
```


```{python}
even_numbers = [2,4,6,8,10]
squares = []
for numbers in even_numbers:
  square = numbers**2
  squares.append(numbers**2)

print (squares)
```

### `map()` Function 

     `map ()` function, like `for` loop function, allows to apply a function on each item in an iterable (list, tuple, or string) sequence. The syntax for `map ()` is - `map (function, iterable)`. Below is an example of `map ()` function - 

```{python}
var = [16, 17, 18, 19, 20]
var_log = map(lambda x: np.log(x), var)

for x in var_log:
  print(x)

```

     `map ()` function is useful for simple calculations; however, for complex transformations, using `for` loop is efficient and effective. 

### User Defined Function 

     In addition to predifend functions from different python modules, users can define their own functions. The syntax for defining a user defined function in python - 

```{python}
def deduct_num (a, b):
  """
  The function will deduct two numbers
  """
  result = a - b
  return result

```

     In the above example, a user defined function is created. Then function name is `deduct_num` and it is created using `def` keyword. So, when we need to create a user defined function, we will start with `def` keyword followed by the name of the function. The `a` and `b` are the function's arguments, which sometimes are also called parameters. 

     The tripple quote `""" """` is used to create a docstring, which also explains the nature of the function or what it will do. The `return` statement in function will return a value.  


```{python}
deduct_num(15, 100)
```

     Another example of user defined function - 

```{python}
def welcome (name):
  """
  The function greets the person
  """
  print(f"Welcome {name}! How are you doing?")
```


```{python}
welcome("John")
```


### Anonymous Function 

     Anonymous function is a function without a name. It is also called lambda function in python. The syntax for lambda function is - `lambda arguments: expression`. Below is an example of lambda function - 

```{python}
sqr = lambda x: x**2
sqr(5)
```

     lambda function can take many arguments (parameters), but accepts only one expression. 
:::


## Exercises {.unnumbered}

::: {style="text-align: justify"}
01. Create an array of integers from 10 to 50.
```{python}
#| include: false
np.arange(10,51)
```

02. Create an array of all even integers from 10 to 50.

```{python}
#| include: false
np.arange(10,51,2)
```

03. Create an array of 10 threes (use either `np.full()` or `np.ones()` or `np.repeat()`).

```{python}
#| include: false
np.full(10,3)
np.ones(10)*3
np.repeat(3,10)
```

04. Create a 3 by 3 matrix with values ranging from 10 to 18.
```{python}
#| include: false
np.arange(10,19).reshape(3,3)
```

05. Create an array of 5 by 5 identify matrix.
```{python}
#| include: false
np.eye(5)
np.eye(5,5) # identify matrix is always square 
```

06. Use numpy to generate a random number between 0 and 1.
```{python}
#| include: false
np.random.randn()
np.random.rand(1)
```

07.  Use numpy to generate an array of 25 random numbers sampled from a standard normal distribution.
```{python}
#| include: false
np.random.randn(25)
```

08. Create a matrix like below - 

```
array([[0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ],
       [0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 ],
       [0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 ],
       [0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 ],
       [0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5 ],
       [0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6 ],
       [0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.7 ],
       [0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8 ],
       [0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9 ],
       [0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1.  ]])
```


```{python}
#| include: false
np.arange(0.01,1.01,0.01).reshape(10,10)
np.arange(1,101).reshape(10,10)/100
np.linspace(1,100,100).reshape(10,10)/100
```

09. Create an array of 50 linearly spaced points between 0 and 1.
```{python}
#| include: false
np.linspace(0,1)
```

10. Create an array of 20 linearly spaced points between 0 and 1.
```{python}
#| include: false
np.linspace(0,1,20)
```


```{python}
mat = np.arange(1,26).reshape(5,5)
mat
```


11. Produce the following matrix from the mat matrix above.

```
array([[12, 13, 14, 15],
       [17, 18, 19, 20],
       [22, 23, 24, 25]])
```

```{python}
#| include: false
mat[2:,1:]
```


12. Produce the following (value) 20 from mat matrix - `np.int64(20)`

```{python}
#| include: false
mat[3,4]
```



13. Produce the following matrix from mat. 

```
array([[ 2],
       [ 7],
       [12]])
```

```{python}
#| include: false
mat[0:3,1:2]
```


14. Produce the following matrix from mat - `array([21, 22, 23, 24, 25])`

```{python}
#| include: false
mat[4,:]
```


15. Produce the following matrix from mat 
```
array([[16, 17, 18, 19, 20],
       [21, 22, 23, 24, 25]])
```

```{python}
#| include: false
mat[3:,:]
```

16. Get the sum of all values in the mat matrix


```{python}
#| include: false
mat.sum()
np.sum(mat)
```


17. Get the standard deviation of the values in mat matrix

```{python}
#| include: false
mat.std()
```


18. Get the sum of all columns in the mat matrix

```{python}
#| include: false
mat.sum(axis = 0)
```

19. Get the sum of all rows in the mat matrix

```{python}
#| include: false
mat.sum(axis = 1)
```

20. Get the determinant and eigenvalues and eigenvectors of the matrix mat. 

```{python}
#| include: false
np.linalg.det(mat)
np.linalg.eig(mat)
```

::: 