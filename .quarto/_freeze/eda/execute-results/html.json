{
  "hash": "ca2a602574b4669002bb15162e3caf00",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploratory Data Analysis (EDA)\"\nformat: html\n---\n\n\n### Learning Objectives of the Chapter {.unnumbered}\n\n::: {style=\"text-align: justify\"}\nAt the End of the Chapter, Students should be Able to -\n\n-   Learn about the purpose of Exploratory Data Analysis (EDA)\n\n-   Understand different techniques of transforming and cleaning data\n\n-   Learn about Different R and Python Packages for EDA\n\n-   Understand how to use six verbs for EDA\n\n-   Perform EDA on some real world data sets. \n\n-   Learn about how to interpret results from EDA\n:::\n\n\n## Introduction \n\n::: {style=\"text-align: justify\"}\n     In descriptive statistics, we summarize the data using different metrics such as mean, median, standard deviation, minimum value, maximum value, and percentile. Descriptive statisics is also called summary statistics.\n:::\n\n## Data Collection & Importing \n\n\n## Data Cleaning \n\n\n## Packages for Exploratory Data Analysis (EDA)\n\n::: {style=\"text-align: justify\"}\n     In order to use `pyjanitor`, the data frame must be pandas because `pyjanitor` extends pandas data frame functionality. \n:::\n\n\n::: {.panel-tabset}\n\n## dplyr\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# loading packages\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(janitor)\n```\n:::\n\n\n\n\n\n## pandas \n\n::: {.cell}\n\n```{.python .cell-code}\n# loading the package\nimport numpy as np\nimport pandas as pd\n# from pyjanitor package \n# pip install pyjanitor\nimport janitor \nfrom janitor import clean_names, remove_empty\n```\n:::\n\n\n:::\n\n## Importing the Dataset \n\n::: {.panel-tabset}\n\n## dplyr\n\n::: {.cell}\n\n```{.r .cell-code}\n# importing data frame \ndf = read_csv(\"https://raw.githubusercontent.com/msharifbd/DATA/main/Al-Bundy_raw-data.csv\")\n```\n:::\n\n\n## pandas \n\n::: {.cell}\n\n```{.python .cell-code}\n# importing data frame \ndf_pd = pd.read_csv(\"https://raw.githubusercontent.com/msharifbd/DATA/main/Al-Bundy_raw-data.csv\")\n```\n:::\n\n\n\n\n:::\n\n## Meta Data\n\n::: {style=\"text-align: justify\"}\n     Meta data is data about the data. Before we put the data into analysis, we need to learn about our dataset. This learning invovles knowing about the number of rows, number of columns, the types of the fields, the appropriateness of those types, the missing values in the dataset and so on. \n:::\n\n::: {.panel-tabset}\n\n## dplyr \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 14,967\nColumns: 14\n$ InvoiceNo       <dbl> 52389, 52390, 52391, 52392, 52393, 52394, 52395, 52396…\n$ Date            <chr> \"1/1/2014\", \"1/1/2014\", \"1/1/2014\", \"1/1/2014\", \"1/1/2…\n$ Country         <chr> \"United Kingdom\", \"United States\", \"Canada\", \"United S…\n$ ProductID       <dbl> 2152, 2230, 2160, 2234, 2222, 2173, 2200, 2238, 2191, …\n$ Shop            <chr> \"UK2\", \"US15\", \"CAN7\", \"US6\", \"UK4\", \"US15\", \"GER2\", \"…\n$ Gender          <chr> \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\", \"F…\n$ `Size (US)`     <dbl> 11.0, 11.5, 9.5, 9.5, 9.0, 10.5, 9.0, 10.0, 10.5, 9.0,…\n$ `Size (Europe)` <chr> \"44\", \"44-45\", \"42-43\", \"40\", \"39-40\", \"43-44\", \"39-40…\n$ `Size (UK)`     <dbl> 10.5, 11.0, 9.0, 7.5, 7.0, 10.0, 7.0, 9.5, 10.0, 7.0, …\n$ UnitPrice       <dbl> 159, 199, 149, 159, 159, 159, 179, 169, 139, 149, 129,…\n$ Discount        <dbl> 0.0, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,…\n$ Year            <dbl> 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, …\n$ Month           <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ SalePrice       <dbl> 159.0, 159.2, 119.2, 159.0, 159.0, 159.0, 179.0, 169.0…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_df(df, ~sum(is.na(.))) |>\n     glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 14\n$ InvoiceNo       <int> 0\n$ Date            <int> 0\n$ Country         <int> 0\n$ ProductID       <int> 0\n$ Shop            <int> 0\n$ Gender          <int> 0\n$ `Size (US)`     <int> 0\n$ `Size (Europe)` <int> 0\n$ `Size (UK)`     <int> 0\n$ UnitPrice       <int> 0\n$ Discount        <int> 0\n$ Year            <int> 0\n$ Month           <int> 0\n$ SalePrice       <int> 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14967\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 14\n  InvoiceNo Date     Country  ProductID Shop  Gender `Size (US)` `Size (Europe)`\n      <dbl> <chr>    <chr>        <dbl> <chr> <chr>        <dbl> <chr>          \n1     52389 1/1/2014 United …      2152 UK2   Male          11   44             \n2     52390 1/1/2014 United …      2230 US15  Male          11.5 44-45          \n3     52391 1/1/2014 Canada        2160 CAN7  Male           9.5 42-43          \n4     52392 1/1/2014 United …      2234 US6   Female         9.5 40             \n5     52393 1/1/2014 United …      2222 UK4   Female         9   39-40          \n6     52394 1/1/2014 United …      2173 US15  Male          10.5 43-44          \n# ℹ 6 more variables: `Size (UK)` <dbl>, UnitPrice <dbl>, Discount <dbl>,\n#   Year <dbl>, Month <dbl>, SalePrice <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 14\n  InvoiceNo Date      Country ProductID Shop  Gender `Size (US)` `Size (Europe)`\n      <dbl> <chr>     <chr>       <dbl> <chr> <chr>        <dbl> <chr>          \n1     65772 12/31/20… United…      2168 US13  Male           8   41             \n2     65773 12/31/20… United…      2154 UK2   Male           9.5 42-43          \n3     65774 12/31/20… United…      2181 US12  Female        12   42-43          \n4     65775 12/31/20… Canada       2203 CAN6  Male          10.5 43-44          \n5     65776 12/31/20… Germany      2231 GER1  Female         9.5 40             \n6     65777 12/31/20… Germany      2156 GER1  Female         6.5 37             \n# ℹ 6 more variables: `Size (UK)` <dbl>, UnitPrice <dbl>, Discount <dbl>,\n#   Year <dbl>, Month <dbl>, SalePrice <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::sample_n(df, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 14\n   InvoiceNo Date     Country ProductID Shop  Gender `Size (US)` `Size (Europe)`\n       <dbl> <chr>    <chr>       <dbl> <chr> <chr>        <dbl> <chr>          \n 1     64366 10/7/20… Germany      2236 GER3  Female         7.5 38             \n 2     62461 7/5/2016 Germany      2192 GER3  Female         9.5 40             \n 3     60902 4/15/20… United…      2222 UK4   Male          10.5 43-44          \n 4     60943 4/17/20… Germany      2190 GER1  Female         7   37-38          \n 5     56621 6/25/20… United…      2175 US7   Female         8   38-39          \n 6     64594 10/18/2… United…      2238 US12  Male           8.5 41-42          \n 7     56908 7/17/20… Germany      2241 GER1  Male           8   41             \n 8     59368 1/12/20… United…      2219 US13  Female         6.5 37             \n 9     57936 10/2/20… Germany      2216 GER1  Female         9.5 40             \n10     54920 1/22/20… Germany      2184 GER1  Female         8   38-39          \n# ℹ 6 more variables: `Size (UK)` <dbl>, UnitPrice <dbl>, Discount <dbl>,\n#   Year <dbl>, Month <dbl>, SalePrice <dbl>\n```\n\n\n:::\n:::\n\n\n\n## Pandas \n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 14 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   InvoiceNo      14967 non-null  int64  \n 1   Date           14967 non-null  object \n 2   Country        14967 non-null  object \n 3   ProductID      14967 non-null  int64  \n 4   Shop           14967 non-null  object \n 5   Gender         14967 non-null  object \n 6   Size (US)      14967 non-null  float64\n 7   Size (Europe)  14967 non-null  object \n 8   Size (UK)      14967 non-null  float64\n 9   UnitPrice      14967 non-null  int64  \n 10  Discount       14967 non-null  float64\n 11  Year           14967 non-null  int64  \n 12  Month          14967 non-null  int64  \n 13  SalePrice      14967 non-null  float64\ndtypes: float64(4), int64(5), object(5)\nmemory usage: 1.6+ MB\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.shape\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(14967, 14)\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nprint('The total number of rows and columns of the product data is \\\n {} and {} respectively.'.format(df_pd.shape[0], df_pd.shape[1]))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThe total number of rows and columns of the product data is  14967 and 14 respectively.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(f'The total number of rows and columns of the product data is \\\n {df_pd.shape[0]} and {df_pd.shape[1]} respectively.')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThe total number of rows and columns of the product data is  14967 and 14 respectively.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIndex(['InvoiceNo', 'Date', 'Country', 'ProductID', 'Shop', 'Gender',\n       'Size (US)', 'Size (Europe)', 'Size (UK)', 'UnitPrice', 'Discount',\n       'Year', 'Month', 'SalePrice'],\n      dtype='object')\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   InvoiceNo      Date         Country  ...  Year Month SalePrice\n0      52389  1/1/2014  United Kingdom  ...  2014     1     159.0\n1      52390  1/1/2014   United States  ...  2014     1     159.2\n2      52391  1/1/2014          Canada  ...  2014     1     119.2\n3      52392  1/1/2014   United States  ...  2014     1     159.0\n4      52393  1/1/2014  United Kingdom  ...  2014     1     159.0\n\n[5 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.tail()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       InvoiceNo        Date         Country  ...  Year Month SalePrice\n14962      65773  12/31/2016  United Kingdom  ...  2016    12     139.0\n14963      65774  12/31/2016   United States  ...  2016    12     149.0\n14964      65775  12/31/2016          Canada  ...  2016    12     125.3\n14965      65776  12/31/2016         Germany  ...  2016    12     199.0\n14966      65777  12/31/2016         Germany  ...  2016    12     125.1\n\n[5 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.isna().sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nInvoiceNo        0\nDate             0\nCountry          0\nProductID        0\nShop             0\nGender           0\nSize (US)        0\nSize (Europe)    0\nSize (UK)        0\nUnitPrice        0\nDiscount         0\nYear             0\nMonth            0\nSalePrice        0\ndtype: int64\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.dtypes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nInvoiceNo          int64\nDate              object\nCountry           object\nProductID          int64\nShop              object\nGender            object\nSize (US)        float64\nSize (Europe)     object\nSize (UK)        float64\nUnitPrice          int64\nDiscount         float64\nYear               int64\nMonth              int64\nSalePrice        float64\ndtype: object\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.sample(n=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       InvoiceNo        Date         Country  ...  Year Month SalePrice\n9459       60856   4/12/2016   United States  ...  2016     4      90.3\n12911      63917   9/14/2016         Germany  ...  2016     9     129.0\n3392       55327    3/3/2015   United States  ...  2015     3     179.0\n13979      64866  10/31/2016  United Kingdom  ...  2016    10     179.0\n13955      64845  10/30/2016   United States  ...  2016    10     152.1\n120        52486   1/18/2014   United States  ...  2014     1     189.0\n10240      61548   5/20/2016  United Kingdom  ...  2016     5     151.2\n7263       58889   12/9/2015          Canada  ...  2015    12     116.1\n4012       55899   4/29/2015   United States  ...  2015     4     149.0\n3127       55080    2/6/2015   United States  ...  2015     2     139.0\n\n[10 rows x 14 columns]\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Cleaning the Dataset \n\n::: {.panel-tabset}\n\n## dplyr\n\n\n::: {.cell}\n\n```{.r .cell-code}\n df |>\n     rename_all(toupper) |>\n     janitor::clean_names() |>\n     rename_all(toupper) |>\n     glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 14,967\nColumns: 14\n$ INVOICENO   <dbl> 52389, 52390, 52391, 52392, 52393, 52394, 52395, 52396, 52…\n$ DATE        <chr> \"1/1/2014\", \"1/1/2014\", \"1/1/2014\", \"1/1/2014\", \"1/1/2014\"…\n$ COUNTRY     <chr> \"United Kingdom\", \"United States\", \"Canada\", \"United State…\n$ PRODUCTID   <dbl> 2152, 2230, 2160, 2234, 2222, 2173, 2200, 2238, 2191, 2237…\n$ SHOP        <chr> \"UK2\", \"US15\", \"CAN7\", \"US6\", \"UK4\", \"US15\", \"GER2\", \"CAN5…\n$ GENDER      <chr> \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\", \"Femal…\n$ SIZE_US     <dbl> 11.0, 11.5, 9.5, 9.5, 9.0, 10.5, 9.0, 10.0, 10.5, 9.0, 10.…\n$ SIZE_EUROPE <chr> \"44\", \"44-45\", \"42-43\", \"40\", \"39-40\", \"43-44\", \"39-40\", \"…\n$ SIZE_UK     <dbl> 10.5, 11.0, 9.0, 7.5, 7.0, 10.0, 7.0, 9.5, 10.0, 7.0, 9.5,…\n$ UNITPRICE   <dbl> 159, 199, 149, 159, 159, 159, 179, 169, 139, 149, 129, 169…\n$ DISCOUNT    <dbl> 0.0, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1…\n$ YEAR        <dbl> 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014…\n$ MONTH       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ SALEPRICE   <dbl> 159.0, 159.2, 119.2, 159.0, 159.0, 159.0, 179.0, 169.0, 13…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n df = df |>\n     rename_all(toupper) |>\n     janitor::clean_names() |>\n     rename_all(toupper)\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 14,967\nColumns: 14\n$ INVOICENO   <dbl> 52389, 52390, 52391, 52392, 52393, 52394, 52395, 52396, 52…\n$ DATE        <chr> \"1/1/2014\", \"1/1/2014\", \"1/1/2014\", \"1/1/2014\", \"1/1/2014\"…\n$ COUNTRY     <chr> \"United Kingdom\", \"United States\", \"Canada\", \"United State…\n$ PRODUCTID   <dbl> 2152, 2230, 2160, 2234, 2222, 2173, 2200, 2238, 2191, 2237…\n$ SHOP        <chr> \"UK2\", \"US15\", \"CAN7\", \"US6\", \"UK4\", \"US15\", \"GER2\", \"CAN5…\n$ GENDER      <chr> \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\", \"Femal…\n$ SIZE_US     <dbl> 11.0, 11.5, 9.5, 9.5, 9.0, 10.5, 9.0, 10.0, 10.5, 9.0, 10.…\n$ SIZE_EUROPE <chr> \"44\", \"44-45\", \"42-43\", \"40\", \"39-40\", \"43-44\", \"39-40\", \"…\n$ SIZE_UK     <dbl> 10.5, 11.0, 9.0, 7.5, 7.0, 10.0, 7.0, 9.5, 10.0, 7.0, 9.5,…\n$ UNITPRICE   <dbl> 159, 199, 149, 159, 159, 159, 179, 169, 139, 149, 129, 169…\n$ DISCOUNT    <dbl> 0.0, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1…\n$ YEAR        <dbl> 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014…\n$ MONTH       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ SALEPRICE   <dbl> 159.0, 159.2, 119.2, 159.0, 159.0, 159.0, 179.0, 169.0, 13…\n```\n\n\n:::\n:::\n\n\n\n## panads \n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.columns.str.upper().to_list()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['INVOICENO', 'DATE', 'COUNTRY', 'PRODUCTID', 'SHOP', 'GENDER', 'SIZE (US)', 'SIZE (EUROPE)', 'SIZE (UK)', 'UNITPRICE', 'DISCOUNT', 'YEAR', 'MONTH', 'SALEPRICE']\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n(df_pd\n     .pipe(remove_empty)\n     .pipe(lambda x: x.clean_names(case_type = \"upper\"))\n     .pipe(lambda x: x.rename(columns = {'SIZE_US_': 'SIZE_US', 'SIZE_EUROPE_':\"SIZE_EUROPE\", \"SIZE_UK_\":\"SIZE_UK\"}))\n     .pipe(lambda x: x.info())\n     )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 14 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   INVOICENO    14967 non-null  int64  \n 1   DATE         14967 non-null  object \n 2   COUNTRY      14967 non-null  object \n 3   PRODUCTID    14967 non-null  int64  \n 4   SHOP         14967 non-null  object \n 5   GENDER       14967 non-null  object \n 6   SIZE_US      14967 non-null  float64\n 7   SIZE_EUROPE  14967 non-null  object \n 8   SIZE_UK      14967 non-null  float64\n 9   UNITPRICE    14967 non-null  int64  \n 10  DISCOUNT     14967 non-null  float64\n 11  YEAR         14967 non-null  int64  \n 12  MONTH        14967 non-null  int64  \n 13  SALEPRICE    14967 non-null  float64\ndtypes: float64(4), int64(5), object(5)\nmemory usage: 1.6+ MB\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Changing the names of the columns to uppercase\ndf_pd.rename(columns = str.upper, inplace = True)\ndf_pd.columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIndex(['INVOICENO', 'DATE', 'COUNTRY', 'PRODUCTID', 'SHOP', 'GENDER',\n       'SIZE (US)', 'SIZE (EUROPE)', 'SIZE (UK)', 'UNITPRICE', 'DISCOUNT',\n       'YEAR', 'MONTH', 'SALEPRICE'],\n      dtype='object')\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nnew_column = df_pd.columns \\\n .str.replace(\"(\", '').str.replace(\")\", \"\") \\\n .str.replace(' ','_') # Cleaning the names of the variables\nnew_column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIndex(['INVOICENO', 'DATE', 'COUNTRY', 'PRODUCTID', 'SHOP', 'GENDER',\n       'SIZE_US', 'SIZE_EUROPE', 'SIZE_UK', 'UNITPRICE', 'DISCOUNT', 'YEAR',\n       'MONTH', 'SALEPRICE'],\n      dtype='object')\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.columns = new_column\ndf_pd.columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIndex(['INVOICENO', 'DATE', 'COUNTRY', 'PRODUCTID', 'SHOP', 'GENDER',\n       'SIZE_US', 'SIZE_EUROPE', 'SIZE_UK', 'UNITPRICE', 'DISCOUNT', 'YEAR',\n       'MONTH', 'SALEPRICE'],\n      dtype='object')\n```\n\n\n:::\n\n```{.python .cell-code}\ndf_pd.rename(columns=str.upper, inplace = True)\ndf_pd.columns \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIndex(['INVOICENO', 'DATE', 'COUNTRY', 'PRODUCTID', 'SHOP', 'GENDER',\n       'SIZE_US', 'SIZE_EUROPE', 'SIZE_UK', 'UNITPRICE', 'DISCOUNT', 'YEAR',\n       'MONTH', 'SALEPRICE'],\n      dtype='object')\n```\n\n\n:::\n:::\n\n\n\n::: \n\n\n### Changing the Types of Variables \n\n::: {.panel-tabset}\n\n## dplyr\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n    mutate (DATE = lubridate::mdy(DATE)) |>\n    glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 14,967\nColumns: 14\n$ INVOICENO   <dbl> 52389, 52390, 52391, 52392, 52393, 52394, 52395, 52396, 52…\n$ DATE        <date> 2014-01-01, 2014-01-01, 2014-01-01, 2014-01-01, 2014-01-0…\n$ COUNTRY     <chr> \"United Kingdom\", \"United States\", \"Canada\", \"United State…\n$ PRODUCTID   <dbl> 2152, 2230, 2160, 2234, 2222, 2173, 2200, 2238, 2191, 2237…\n$ SHOP        <chr> \"UK2\", \"US15\", \"CAN7\", \"US6\", \"UK4\", \"US15\", \"GER2\", \"CAN5…\n$ GENDER      <chr> \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\", \"Femal…\n$ SIZE_US     <dbl> 11.0, 11.5, 9.5, 9.5, 9.0, 10.5, 9.0, 10.0, 10.5, 9.0, 10.…\n$ SIZE_EUROPE <chr> \"44\", \"44-45\", \"42-43\", \"40\", \"39-40\", \"43-44\", \"39-40\", \"…\n$ SIZE_UK     <dbl> 10.5, 11.0, 9.0, 7.5, 7.0, 10.0, 7.0, 9.5, 10.0, 7.0, 9.5,…\n$ UNITPRICE   <dbl> 159, 199, 149, 159, 159, 159, 179, 169, 139, 149, 129, 169…\n$ DISCOUNT    <dbl> 0.0, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1…\n$ YEAR        <dbl> 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014…\n$ MONTH       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ SALEPRICE   <dbl> 159.0, 159.2, 119.2, 159.0, 159.0, 159.0, 179.0, 169.0, 13…\n```\n\n\n:::\n:::\n\n\n     From the above, it is now evident the the type of the `DATE` variable now is `date`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n    mutate (DATE = lubridate::mdy(DATE)) |>\n    mutate (PRODUCTID = as.character(PRODUCTID)) |>\n    glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 14,967\nColumns: 14\n$ INVOICENO   <dbl> 52389, 52390, 52391, 52392, 52393, 52394, 52395, 52396, 52…\n$ DATE        <date> 2014-01-01, 2014-01-01, 2014-01-01, 2014-01-01, 2014-01-0…\n$ COUNTRY     <chr> \"United Kingdom\", \"United States\", \"Canada\", \"United State…\n$ PRODUCTID   <chr> \"2152\", \"2230\", \"2160\", \"2234\", \"2222\", \"2173\", \"2200\", \"2…\n$ SHOP        <chr> \"UK2\", \"US15\", \"CAN7\", \"US6\", \"UK4\", \"US15\", \"GER2\", \"CAN5…\n$ GENDER      <chr> \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\", \"Femal…\n$ SIZE_US     <dbl> 11.0, 11.5, 9.5, 9.5, 9.0, 10.5, 9.0, 10.0, 10.5, 9.0, 10.…\n$ SIZE_EUROPE <chr> \"44\", \"44-45\", \"42-43\", \"40\", \"39-40\", \"43-44\", \"39-40\", \"…\n$ SIZE_UK     <dbl> 10.5, 11.0, 9.0, 7.5, 7.0, 10.0, 7.0, 9.5, 10.0, 7.0, 9.5,…\n$ UNITPRICE   <dbl> 159, 199, 149, 159, 159, 159, 179, 169, 139, 149, 129, 169…\n$ DISCOUNT    <dbl> 0.0, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1…\n$ YEAR        <dbl> 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014…\n$ MONTH       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ SALEPRICE   <dbl> 159.0, 159.2, 119.2, 159.0, 159.0, 159.0, 179.0, 169.0, 13…\n```\n\n\n:::\n:::\n\n\n     From the above, it is now evident the the type of the `DATE` and `PRODUCTID` variable now is date (`date`) and character (`chr`) respectively. We can now incorparte the changes into the data frame. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf = df |>\n    mutate (DATE = lubridate::mdy(DATE)) |>\n    mutate (PRODUCTID = as.character(PRODUCTID)) \nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 14,967\nColumns: 14\n$ INVOICENO   <dbl> 52389, 52390, 52391, 52392, 52393, 52394, 52395, 52396, 52…\n$ DATE        <date> 2014-01-01, 2014-01-01, 2014-01-01, 2014-01-01, 2014-01-0…\n$ COUNTRY     <chr> \"United Kingdom\", \"United States\", \"Canada\", \"United State…\n$ PRODUCTID   <chr> \"2152\", \"2230\", \"2160\", \"2234\", \"2222\", \"2173\", \"2200\", \"2…\n$ SHOP        <chr> \"UK2\", \"US15\", \"CAN7\", \"US6\", \"UK4\", \"US15\", \"GER2\", \"CAN5…\n$ GENDER      <chr> \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\", \"Femal…\n$ SIZE_US     <dbl> 11.0, 11.5, 9.5, 9.5, 9.0, 10.5, 9.0, 10.0, 10.5, 9.0, 10.…\n$ SIZE_EUROPE <chr> \"44\", \"44-45\", \"42-43\", \"40\", \"39-40\", \"43-44\", \"39-40\", \"…\n$ SIZE_UK     <dbl> 10.5, 11.0, 9.0, 7.5, 7.0, 10.0, 7.0, 9.5, 10.0, 7.0, 9.5,…\n$ UNITPRICE   <dbl> 159, 199, 149, 159, 159, 159, 179, 169, 139, 149, 129, 169…\n$ DISCOUNT    <dbl> 0.0, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1…\n$ YEAR        <dbl> 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014…\n$ MONTH       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ SALEPRICE   <dbl> 159.0, 159.2, 119.2, 159.0, 159.0, 159.0, 179.0, 169.0, 13…\n```\n\n\n:::\n:::\n\n\n\n## pandas \n\n\n::: {.cell}\n\n```{.python .cell-code}\n(\n    df_pd\n    .pipe(lambda x: x.assign(DATE = pd.to_datetime(x['DATE'])))\n    .pipe(lambda x: x.info())\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 14 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   INVOICENO    14967 non-null  int64         \n 1   DATE         14967 non-null  datetime64[ns]\n 2   COUNTRY      14967 non-null  object        \n 3   PRODUCTID    14967 non-null  int64         \n 4   SHOP         14967 non-null  object        \n 5   GENDER       14967 non-null  object        \n 6   SIZE_US      14967 non-null  float64       \n 7   SIZE_EUROPE  14967 non-null  object        \n 8   SIZE_UK      14967 non-null  float64       \n 9   UNITPRICE    14967 non-null  int64         \n 10  DISCOUNT     14967 non-null  float64       \n 11  YEAR         14967 non-null  int64         \n 12  MONTH        14967 non-null  int64         \n 13  SALEPRICE    14967 non-null  float64       \ndtypes: datetime64[ns](1), float64(4), int64(5), object(4)\nmemory usage: 1.6+ MB\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# converting integer to object\ndf_pd.INVOICENO = df_pd.INVOICENO.astype(str)\ndf_pd[['MONTH', 'PRODUCTID']] = df_pd[['MONTH', 'PRODUCTID']].astype(str)\ndf_pd.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 14 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   INVOICENO    14967 non-null  object \n 1   DATE         14967 non-null  object \n 2   COUNTRY      14967 non-null  object \n 3   PRODUCTID    14967 non-null  object \n 4   SHOP         14967 non-null  object \n 5   GENDER       14967 non-null  object \n 6   SIZE_US      14967 non-null  float64\n 7   SIZE_EUROPE  14967 non-null  object \n 8   SIZE_UK      14967 non-null  float64\n 9   UNITPRICE    14967 non-null  int64  \n 10  DISCOUNT     14967 non-null  float64\n 11  YEAR         14967 non-null  int64  \n 12  MONTH        14967 non-null  object \n 13  SALEPRICE    14967 non-null  float64\ndtypes: float64(4), int64(2), object(8)\nmemory usage: 1.6+ MB\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n## Some Other Useful Functions \n     There are some other useful functions that can be used to explore the dataset for analysis. Some of those useful functions are discussed below. \n\n:::{.panel-tabset}\n\n\n## dplyr\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf|> count(YEAR)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n   YEAR     n\n  <dbl> <int>\n1  2014  2753\n2  2015  4848\n3  2016  7366\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf|> count(COUNTRY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  COUNTRY            n\n  <chr>          <int>\n1 Canada          2952\n2 Germany         4392\n3 United Kingdom  1737\n4 United States   5886\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf|> distinct(COUNTRY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 1\n  COUNTRY       \n  <chr>         \n1 United Kingdom\n2 United States \n3 Canada        \n4 Germany       \n```\n\n\n:::\n:::\n\n\n## pandas \n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd['YEAR'].value_counts()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nYEAR\n2016    7366\n2015    4848\n2014    2753\nName: count, dtype: int64\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd['YEAR'].unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([2014, 2015, 2016])\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Six Verbs for EDA \n\n     @tbl-compareDplyrPandas shows the comparable functions in both `dplyr` and `pandas` packages. These functions are very much important to perform exploratory data analysis in both `R` and `Python`. `group_by` (`groupby` in pandas) and `summarize ()`^[You can also use British spelling - `summarise ()`] (`agg ()` in pandas) are often used together; therefore, they are in the same group in @tbl-compareDplyrPandas. \n\n\n\n\n::: {#tbl-compareDplyrPandas .cell tbl-cap='Tidyverse and Pandas Equivalent Functions'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Verb Number </th>\n   <th style=\"text-align:left;\"> tidyverse </th>\n   <th style=\"text-align:left;\"> pandas </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> 1 </td>\n   <td style=\"text-align:left;\"> filter () </td>\n   <td style=\"text-align:left;\"> query () or loc () or iloc () </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 2 </td>\n   <td style=\"text-align:left;\"> arrange () </td>\n   <td style=\"text-align:left;\"> sort_values () </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 3 </td>\n   <td style=\"text-align:left;\"> select () </td>\n   <td style=\"text-align:left;\"> filter () or loc () </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 4 </td>\n   <td style=\"text-align:left;\"> rename () </td>\n   <td style=\"text-align:left;\"> rename () </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 5 </td>\n   <td style=\"text-align:left;\"> mutate () </td>\n   <td style=\"text-align:left;\"> assign () </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 6 </td>\n   <td style=\"text-align:left;\"> group_by () </td>\n   <td style=\"text-align:left;\"> groupby () </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 6 </td>\n   <td style=\"text-align:left;\"> summarize () </td>\n   <td style=\"text-align:left;\"> agg () </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### 1st Verb - filter () Function \n\n     Filter functions are used to subset a data frame based on rows, meaning that retaining rows that satisfy given conditions. Filtering rows is also called slicing^[Indexing involves obtaining individual elements.] becasue we obtain a set of elements by filtering.  \n\n:::{.panel-tabset}\n\n## dplyr \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> filter (YEAR == \"2015\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,848 × 14\n   INVOICENO DATE       COUNTRY       PRODUCTID SHOP  GENDER SIZE_US SIZE_EUROPE\n       <dbl> <date>     <chr>         <chr>     <chr> <chr>    <dbl> <chr>      \n 1     54725 2015-01-01 United States 2187      US7   Male       9.5 42-43      \n 2     54726 2015-01-01 United States 2174      US3   Male       8.5 41-42      \n 3     54727 2015-01-01 United States 2240      US11  Male       9   42         \n 4     54728 2015-01-01 Germany       2220      GER2  Male      10   43         \n 5     54729 2015-01-01 United Kingd… 2199      UK5   Male       9.5 42-43      \n 6     54730 2015-01-01 Canada        2169      CAN7  Female     7   37-38      \n 7     54731 2015-01-01 Germany       2188      GER1  Female     9.5 40         \n 8     54732 2015-01-02 United Kingd… 2155      UK5   Female    10   40-41      \n 9     54733 2015-01-02 United States 2173      US5   Female     9   39-40      \n10     54734 2015-01-02 Germany       2222      GER3  Female     7.5 38         \n# ℹ 4,838 more rows\n# ℹ 6 more variables: SIZE_UK <dbl>, UNITPRICE <dbl>, DISCOUNT <dbl>,\n#   YEAR <dbl>, MONTH <dbl>, SALEPRICE <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> filter (COUNTRY %in% c(\"United States\", \"Canada\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8,838 × 14\n   INVOICENO DATE       COUNTRY       PRODUCTID SHOP  GENDER SIZE_US SIZE_EUROPE\n       <dbl> <date>     <chr>         <chr>     <chr> <chr>    <dbl> <chr>      \n 1     52390 2014-01-01 United States 2230      US15  Male      11.5 44-45      \n 2     52391 2014-01-01 Canada        2160      CAN7  Male       9.5 42-43      \n 3     52392 2014-01-01 United States 2234      US6   Female     9.5 40         \n 4     52394 2014-01-01 United States 2173      US15  Male      10.5 43-44      \n 5     52396 2014-01-02 Canada        2238      CAN5  Male      10   43         \n 6     52397 2014-01-02 United States 2191      US13  Male      10.5 43-44      \n 7     52399 2014-01-02 United States 2197      US1   Male      10   43         \n 8     52399 2014-01-02 United States 2213      US11  Female     9.5 40         \n 9     52399 2014-01-02 United States 2206      US2   Female     9.5 40         \n10     52400 2014-01-02 United States 2152      US15  Male       8   41         \n# ℹ 8,828 more rows\n# ℹ 6 more variables: SIZE_UK <dbl>, UNITPRICE <dbl>, DISCOUNT <dbl>,\n#   YEAR <dbl>, MONTH <dbl>, SALEPRICE <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> filter (COUNTRY == \"United States\", YEAR == \"2016\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,935 × 14\n   INVOICENO DATE       COUNTRY       PRODUCTID SHOP  GENDER SIZE_US SIZE_EUROPE\n       <dbl> <date>     <chr>         <chr>     <chr> <chr>    <dbl> <chr>      \n 1     59206 2016-01-02 United States 2186      US13  Female     8   38-39      \n 2     59209 2016-01-02 United States 2193      US14  Female     9   39-40      \n 3     59213 2016-01-02 United States 2228      US13  Male       9.5 42-43      \n 4     59214 2016-01-02 United States 2177      US12  Female    10.5 41         \n 5     59214 2016-01-02 United States 2236      US6   Male       8.5 41-42      \n 6     59219 2016-01-03 United States 2188      US14  Female     9.5 40         \n 7     59221 2016-01-03 United States 2178      US13  Female     8   38-39      \n 8     59223 2016-01-03 United States 2158      US3   Male       8   41         \n 9     59225 2016-01-03 United States 2236      US13  Male       8   41         \n10     59226 2016-01-03 United States 2207      US14  Male      14   47         \n# ℹ 2,925 more rows\n# ℹ 6 more variables: SIZE_UK <dbl>, UNITPRICE <dbl>, DISCOUNT <dbl>,\n#   YEAR <dbl>, MONTH <dbl>, SALEPRICE <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> filter (COUNTRY == \"United States\", YEAR %in% c(\"2015\",\"2016\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,859 × 14\n   INVOICENO DATE       COUNTRY       PRODUCTID SHOP  GENDER SIZE_US SIZE_EUROPE\n       <dbl> <date>     <chr>         <chr>     <chr> <chr>    <dbl> <chr>      \n 1     54725 2015-01-01 United States 2187      US7   Male       9.5 42-43      \n 2     54726 2015-01-01 United States 2174      US3   Male       8.5 41-42      \n 3     54727 2015-01-01 United States 2240      US11  Male       9   42         \n 4     54733 2015-01-02 United States 2173      US5   Female     9   39-40      \n 5     54738 2015-01-02 United States 2226      US3   Male      10   43         \n 6     54739 2015-01-02 United States 2199      US11  Male       9.5 42-43      \n 7     54742 2015-01-03 United States 2209      US6   Male      10   43         \n 8     54743 2015-01-03 United States 2238      US15  Female     7.5 38         \n 9     54745 2015-01-04 United States 2214      US12  Male      10.5 43-44      \n10     54749 2015-01-04 United States 2162      US15  Male       9.5 42-43      \n# ℹ 4,849 more rows\n# ℹ 6 more variables: SIZE_UK <dbl>, UNITPRICE <dbl>, DISCOUNT <dbl>,\n#   YEAR <dbl>, MONTH <dbl>, SALEPRICE <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> filter (COUNTRY %in% c(\"United States\", \"Canada\"), YEAR == \"2014\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,649 × 14\n   INVOICENO DATE       COUNTRY       PRODUCTID SHOP  GENDER SIZE_US SIZE_EUROPE\n       <dbl> <date>     <chr>         <chr>     <chr> <chr>    <dbl> <chr>      \n 1     52390 2014-01-01 United States 2230      US15  Male      11.5 44-45      \n 2     52391 2014-01-01 Canada        2160      CAN7  Male       9.5 42-43      \n 3     52392 2014-01-01 United States 2234      US6   Female     9.5 40         \n 4     52394 2014-01-01 United States 2173      US15  Male      10.5 43-44      \n 5     52396 2014-01-02 Canada        2238      CAN5  Male      10   43         \n 6     52397 2014-01-02 United States 2191      US13  Male      10.5 43-44      \n 7     52399 2014-01-02 United States 2197      US1   Male      10   43         \n 8     52399 2014-01-02 United States 2213      US11  Female     9.5 40         \n 9     52399 2014-01-02 United States 2206      US2   Female     9.5 40         \n10     52400 2014-01-02 United States 2152      US15  Male       8   41         \n# ℹ 1,639 more rows\n# ℹ 6 more variables: SIZE_UK <dbl>, UNITPRICE <dbl>, DISCOUNT <dbl>,\n#   YEAR <dbl>, MONTH <dbl>, SALEPRICE <dbl>\n```\n\n\n:::\n:::\n\n\n\n## pandas \n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.query(\"YEAR == 2015\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     INVOICENO        DATE         COUNTRY  ...  YEAR MONTH SALEPRICE\n2753     54725    1/1/2015   United States  ...  2015     1     179.0\n2754     54726    1/1/2015   United States  ...  2015     1     169.0\n2755     54727    1/1/2015   United States  ...  2015     1     116.1\n2756     54728    1/1/2015         Germany  ...  2015     1     129.0\n2757     54729    1/1/2015  United Kingdom  ...  2015     1     139.0\n...        ...         ...             ...  ...   ...   ...       ...\n7596     59192  12/31/2015   United States  ...  2015    12      79.5\n7597     59193  12/31/2015   United States  ...  2015    12     139.0\n7598     59194  12/31/2015         Germany  ...  2015    12     159.0\n7599     59195  12/31/2015         Germany  ...  2015    12     149.0\n7600     59196  12/31/2015   United States  ...  2015    12     179.0\n\n[4848 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.query('COUNTRY== \"United States\" | COUNTRY == \"Canada\"')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO        DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n1         52390    1/1/2014  United States  ...  2014     1     159.2\n2         52391    1/1/2014         Canada  ...  2014     1     119.2\n3         52392    1/1/2014  United States  ...  2014     1     159.0\n5         52394    1/1/2014  United States  ...  2014     1     159.0\n7         52396    1/2/2014         Canada  ...  2014     1     169.0\n...         ...         ...            ...  ...   ...   ...       ...\n14959     65770  12/31/2016  United States  ...  2016    12     119.2\n14960     65771  12/31/2016  United States  ...  2016    12     189.0\n14961     65772  12/31/2016  United States  ...  2016    12     129.0\n14963     65774  12/31/2016  United States  ...  2016    12     149.0\n14964     65775  12/31/2016         Canada  ...  2016    12     125.3\n\n[8838 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.query(\"COUNTRY in ['United States', 'Canada']\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO        DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n1         52390    1/1/2014  United States  ...  2014     1     159.2\n2         52391    1/1/2014         Canada  ...  2014     1     119.2\n3         52392    1/1/2014  United States  ...  2014     1     159.0\n5         52394    1/1/2014  United States  ...  2014     1     159.0\n7         52396    1/2/2014         Canada  ...  2014     1     169.0\n...         ...         ...            ...  ...   ...   ...       ...\n14959     65770  12/31/2016  United States  ...  2016    12     119.2\n14960     65771  12/31/2016  United States  ...  2016    12     189.0\n14961     65772  12/31/2016  United States  ...  2016    12     129.0\n14963     65774  12/31/2016  United States  ...  2016    12     149.0\n14964     65775  12/31/2016         Canada  ...  2016    12     125.3\n\n[8838 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.query(\"COUNTRY== 'United States' & YEAR== 2016\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO        DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n7610      59206    1/2/2016  United States  ...  2016     1     132.3\n7613      59209    1/2/2016  United States  ...  2016     1     127.2\n7617      59213    1/2/2016  United States  ...  2016     1     125.3\n7618      59214    1/2/2016  United States  ...  2016     1     151.2\n7619      59214    1/2/2016  United States  ...  2016     1     151.2\n...         ...         ...            ...  ...   ...   ...       ...\n14956     65767  12/31/2016  United States  ...  2016    12     139.0\n14959     65770  12/31/2016  United States  ...  2016    12     119.2\n14960     65771  12/31/2016  United States  ...  2016    12     189.0\n14961     65772  12/31/2016  United States  ...  2016    12     129.0\n14963     65774  12/31/2016  United States  ...  2016    12     149.0\n\n[2935 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.query(\"COUNTRY== 'United States' & YEAR in [2015,2016]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO        DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n2753      54725    1/1/2015  United States  ...  2015     1     179.0\n2754      54726    1/1/2015  United States  ...  2015     1     169.0\n2755      54727    1/1/2015  United States  ...  2015     1     116.1\n2761      54733    1/2/2015  United States  ...  2015     1     179.0\n2766      54738    1/2/2015  United States  ...  2015     1     199.0\n...         ...         ...            ...  ...   ...   ...       ...\n14956     65767  12/31/2016  United States  ...  2016    12     139.0\n14959     65770  12/31/2016  United States  ...  2016    12     119.2\n14960     65771  12/31/2016  United States  ...  2016    12     189.0\n14961     65772  12/31/2016  United States  ...  2016    12     129.0\n14963     65774  12/31/2016  United States  ...  2016    12     149.0\n\n[4859 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd[df_pd['COUNTRY'] == \"United States\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO        DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n1         52390    1/1/2014  United States  ...  2014     1     159.2\n3         52392    1/1/2014  United States  ...  2014     1     159.0\n5         52394    1/1/2014  United States  ...  2014     1     159.0\n8         52397    1/2/2014  United States  ...  2014     1     139.0\n10        52399    1/2/2014  United States  ...  2014     1     129.0\n...         ...         ...            ...  ...   ...   ...       ...\n14956     65767  12/31/2016  United States  ...  2016    12     139.0\n14959     65770  12/31/2016  United States  ...  2016    12     119.2\n14960     65771  12/31/2016  United States  ...  2016    12     189.0\n14961     65772  12/31/2016  United States  ...  2016    12     129.0\n14963     65774  12/31/2016  United States  ...  2016    12     149.0\n\n[5886 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.loc[(df_pd['COUNTRY']==\"United States\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO        DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n1         52390    1/1/2014  United States  ...  2014     1     159.2\n3         52392    1/1/2014  United States  ...  2014     1     159.0\n5         52394    1/1/2014  United States  ...  2014     1     159.0\n8         52397    1/2/2014  United States  ...  2014     1     139.0\n10        52399    1/2/2014  United States  ...  2014     1     129.0\n...         ...         ...            ...  ...   ...   ...       ...\n14956     65767  12/31/2016  United States  ...  2016    12     139.0\n14959     65770  12/31/2016  United States  ...  2016    12     119.2\n14960     65771  12/31/2016  United States  ...  2016    12     189.0\n14961     65772  12/31/2016  United States  ...  2016    12     129.0\n14963     65774  12/31/2016  United States  ...  2016    12     149.0\n\n[5886 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.loc[df_pd['COUNTRY'].isin([\"United States\", \"Canada\"])]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO        DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n1         52390    1/1/2014  United States  ...  2014     1     159.2\n2         52391    1/1/2014         Canada  ...  2014     1     119.2\n3         52392    1/1/2014  United States  ...  2014     1     159.0\n5         52394    1/1/2014  United States  ...  2014     1     159.0\n7         52396    1/2/2014         Canada  ...  2014     1     169.0\n...         ...         ...            ...  ...   ...   ...       ...\n14959     65770  12/31/2016  United States  ...  2016    12     119.2\n14960     65771  12/31/2016  United States  ...  2016    12     189.0\n14961     65772  12/31/2016  United States  ...  2016    12     129.0\n14963     65774  12/31/2016  United States  ...  2016    12     149.0\n14964     65775  12/31/2016         Canada  ...  2016    12     125.3\n\n[8838 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.loc[df_pd['COUNTRY']\\\n .isin([\"United States\", \"Canada\"]) &(df_pd['YEAR']==2014)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     INVOICENO        DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n1        52390    1/1/2014  United States  ...  2014     1     159.2\n2        52391    1/1/2014         Canada  ...  2014     1     119.2\n3        52392    1/1/2014  United States  ...  2014     1     159.0\n5        52394    1/1/2014  United States  ...  2014     1     159.0\n7        52396    1/2/2014         Canada  ...  2014     1     169.0\n...        ...         ...            ...  ...   ...   ...       ...\n2739     54713  12/30/2014  United States  ...  2014    12     189.0\n2745     54718  12/31/2014         Canada  ...  2014    12     151.2\n2746     54719  12/31/2014  United States  ...  2014    12     199.0\n2748     54721  12/31/2014         Canada  ...  2014    12      74.5\n2749     54722  12/31/2014  United States  ...  2014    12     118.3\n\n[1649 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.loc[(df_pd['COUNTRY']==\"United States\") &(df_pd [\"YEAR\"] ==2014)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     INVOICENO        DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n1        52390    1/1/2014  United States  ...  2014     1     159.2\n3        52392    1/1/2014  United States  ...  2014     1     159.0\n5        52394    1/1/2014  United States  ...  2014     1     159.0\n8        52397    1/2/2014  United States  ...  2014     1     139.0\n10       52399    1/2/2014  United States  ...  2014     1     129.0\n...        ...         ...            ...  ...   ...   ...       ...\n2731     54705  12/29/2014  United States  ...  2014    12     179.0\n2734     54708  12/30/2014  United States  ...  2014    12     159.0\n2739     54713  12/30/2014  United States  ...  2014    12     189.0\n2746     54719  12/31/2014  United States  ...  2014    12     199.0\n2749     54722  12/31/2014  United States  ...  2014    12     118.3\n\n[1027 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.loc[df_pd['COUNTRY'] == \"United States\", :]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO        DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n1         52390    1/1/2014  United States  ...  2014     1     159.2\n3         52392    1/1/2014  United States  ...  2014     1     159.0\n5         52394    1/1/2014  United States  ...  2014     1     159.0\n8         52397    1/2/2014  United States  ...  2014     1     139.0\n10        52399    1/2/2014  United States  ...  2014     1     129.0\n...         ...         ...            ...  ...   ...   ...       ...\n14956     65767  12/31/2016  United States  ...  2016    12     139.0\n14959     65770  12/31/2016  United States  ...  2016    12     119.2\n14960     65771  12/31/2016  United States  ...  2016    12     189.0\n14961     65772  12/31/2016  United States  ...  2016    12     129.0\n14963     65774  12/31/2016  United States  ...  2016    12     149.0\n\n[5886 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.loc[\n    df_pd['COUNTRY']=='United States',\n    ['COUNTRY', \"UNITPRICE\", \"SALEPRICE\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             COUNTRY  UNITPRICE  SALEPRICE\n1      United States        199      159.2\n3      United States        159      159.0\n5      United States        159      159.0\n8      United States        139      139.0\n10     United States        129      129.0\n...              ...        ...        ...\n14956  United States        139      139.0\n14959  United States        149      119.2\n14960  United States        189      189.0\n14961  United States        129      129.0\n14963  United States        149      149.0\n\n[5886 rows x 3 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\n### 2nd Verb - arrange () Function \n\n     In arrange functions, we order the rows of a data frame by the values of given columns. It is like sorting or odering the data. \n\n:::{.panel-tabset}\n\n## dplyr \n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n    arrange(DATE)     \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 14\n   INVOICENO DATE       COUNTRY       PRODUCTID SHOP  GENDER SIZE_US SIZE_EUROPE\n       <dbl> <date>     <chr>         <chr>     <chr> <chr>    <dbl> <chr>      \n 1     52389 2014-01-01 United Kingd… 2152      UK2   Male      11   44         \n 2     52390 2014-01-01 United States 2230      US15  Male      11.5 44-45      \n 3     52391 2014-01-01 Canada        2160      CAN7  Male       9.5 42-43      \n 4     52392 2014-01-01 United States 2234      US6   Female     9.5 40         \n 5     52393 2014-01-01 United Kingd… 2222      UK4   Female     9   39-40      \n 6     52394 2014-01-01 United States 2173      US15  Male      10.5 43-44      \n 7     52395 2014-01-02 Germany       2200      GER2  Female     9   39-40      \n 8     52396 2014-01-02 Canada        2238      CAN5  Male      10   43         \n 9     52397 2014-01-02 United States 2191      US13  Male      10.5 43-44      \n10     52398 2014-01-02 United Kingd… 2237      UK1   Female     9   39-40      \n# ℹ 14,957 more rows\n# ℹ 6 more variables: SIZE_UK <dbl>, UNITPRICE <dbl>, DISCOUNT <dbl>,\n#   YEAR <dbl>, MONTH <dbl>, SALEPRICE <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n    arrange(desc(DATE))     \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 14\n   INVOICENO DATE       COUNTRY       PRODUCTID SHOP  GENDER SIZE_US SIZE_EUROPE\n       <dbl> <date>     <chr>         <chr>     <chr> <chr>    <dbl> <chr>      \n 1     65765 2016-12-31 Canada        2199      CAN5  Male      11   44         \n 2     65766 2016-12-31 United Kingd… 2202      UK1   Male       9.5 42-43      \n 3     65767 2016-12-31 United States 2147      US15  Male       9.5 42-43      \n 4     65768 2016-12-31 Germany       2205      GER1  Female     7.5 38         \n 5     65769 2016-12-31 Germany       2210      GER2  Male      10.5 43-44      \n 6     65770 2016-12-31 United States 2178      US13  Female     8   38-39      \n 7     65771 2016-12-31 United States 2209      US15  Male       9   42         \n 8     65772 2016-12-31 United States 2168      US13  Male       8   41         \n 9     65773 2016-12-31 United Kingd… 2154      UK2   Male       9.5 42-43      \n10     65774 2016-12-31 United States 2181      US12  Female    12   42-43      \n# ℹ 14,957 more rows\n# ℹ 6 more variables: SIZE_UK <dbl>, UNITPRICE <dbl>, DISCOUNT <dbl>,\n#   YEAR <dbl>, MONTH <dbl>, SALEPRICE <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n    arrange(MONTH, SALEPRICE)     \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 14\n   INVOICENO DATE       COUNTRY       PRODUCTID SHOP  GENDER SIZE_US SIZE_EUROPE\n       <dbl> <date>     <chr>         <chr>     <chr> <chr>    <dbl> <chr>      \n 1     52414 2014-01-05 Germany       2239      GER2  Female     8.5 39         \n 2     52533 2014-01-25 Canada        2151      CAN5  Female     9   39-40      \n 3     52539 2014-01-26 United Kingd… 2227      UK1   Female     7.5 38         \n 4     52548 2014-01-27 United Kingd… 2224      UK3   Male       8.5 41-42      \n 5     54734 2015-01-02 Germany       2222      GER3  Female     7.5 38         \n 6     54772 2015-01-06 Germany       2159      GER1  Male      12   45         \n 7     54864 2015-01-16 Germany       2239      GER2  Female     7.5 38         \n 8     54989 2015-01-28 Canada        2152      CAN6  Female     8   38-39      \n 9     59220 2016-01-03 Canada        2202      CAN7  Male      10.5 43-44      \n10     59242 2016-01-04 United States 2231      US9   Female     9   39-40      \n# ℹ 14,957 more rows\n# ℹ 6 more variables: SIZE_UK <dbl>, UNITPRICE <dbl>, DISCOUNT <dbl>,\n#   YEAR <dbl>, MONTH <dbl>, SALEPRICE <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## pandas \n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.sort_values(by =['DATE'])   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO      DATE         COUNTRY  ...  YEAR MONTH SALEPRICE\n0         52389  1/1/2014  United Kingdom  ...  2014     1     159.0\n1         52390  1/1/2014   United States  ...  2014     1     159.2\n2         52391  1/1/2014          Canada  ...  2014     1     119.2\n3         52392  1/1/2014   United States  ...  2014     1     159.0\n4         52393  1/1/2014  United Kingdom  ...  2014     1     159.0\n...         ...       ...             ...  ...   ...   ...       ...\n12785     63807  9/9/2016         Germany  ...  2016     9     189.0\n12786     63808  9/9/2016         Germany  ...  2016     9     129.0\n12787     63809  9/9/2016   United States  ...  2016     9     179.0\n12789     63811  9/9/2016   United States  ...  2016     9     125.3\n12779     63802  9/9/2016   United States  ...  2016     9     125.1\n\n[14967 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.sort_values(by =['DATE'], ascending = False)   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO      DATE         COUNTRY  ...  YEAR MONTH SALEPRICE\n12778     63802  9/9/2016   United States  ...  2016     9     139.0\n12784     63806  9/9/2016         Germany  ...  2016     9     139.0\n12773     63797  9/9/2016         Germany  ...  2016     9      90.3\n12772     63796  9/9/2016         Germany  ...  2016     9     111.3\n12771     63795  9/9/2016         Germany  ...  2016     9     152.1\n...         ...       ...             ...  ...   ...   ...       ...\n5         52394  1/1/2014   United States  ...  2014     1     159.0\n4         52393  1/1/2014  United Kingdom  ...  2014     1     159.0\n3         52392  1/1/2014   United States  ...  2014     1     159.0\n2         52391  1/1/2014          Canada  ...  2014     1     119.2\n0         52389  1/1/2014  United Kingdom  ...  2014     1     159.0\n\n[14967 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.sort_values(by =['MONTH', 'SALEPRICE'])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO       DATE         COUNTRY  ...  YEAR MONTH SALEPRICE\n33        52414   1/5/2014         Germany  ...  2014     1      64.5\n177       52533  1/25/2014          Canada  ...  2014     1      64.5\n185       52539  1/26/2014  United Kingdom  ...  2014     1      64.5\n194       52548  1/27/2014  United Kingdom  ...  2014     1      64.5\n2762      54734   1/2/2015         Germany  ...  2015     1      64.5\n...         ...        ...             ...  ...   ...   ...       ...\n13245     64219  9/29/2016  United Kingdom  ...  2016     9     199.0\n13246     64220  9/29/2016   United States  ...  2016     9     199.0\n13248     64222  9/29/2016   United States  ...  2016     9     199.0\n13251     64224  9/29/2016         Germany  ...  2016     9     199.0\n13272     64244  9/30/2016   United States  ...  2016     9     199.0\n\n[14967 rows x 14 columns]\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n### 3rd Verb - select () Function \n     Select functions help to select or obtain columns from the data frame. When there are a lot of columns in our dataset, select functions become very useful. \n\n:::{.panel-tabset}\n\n## dplyr \n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> select(DATE, UNITPRICE, DISCOUNT)   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 3\n   DATE       UNITPRICE DISCOUNT\n   <date>         <dbl>    <dbl>\n 1 2014-01-01       159      0  \n 2 2014-01-01       199      0.2\n 3 2014-01-01       149      0.2\n 4 2014-01-01       159      0  \n 5 2014-01-01       159      0  \n 6 2014-01-01       159      0  \n 7 2014-01-02       179      0  \n 8 2014-01-02       169      0  \n 9 2014-01-02       139      0  \n10 2014-01-02       149      0  \n# ℹ 14,957 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> select(1:2, 5:8)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 6\n   INVOICENO DATE       SHOP  GENDER SIZE_US SIZE_EUROPE\n       <dbl> <date>     <chr> <chr>    <dbl> <chr>      \n 1     52389 2014-01-01 UK2   Male      11   44         \n 2     52390 2014-01-01 US15  Male      11.5 44-45      \n 3     52391 2014-01-01 CAN7  Male       9.5 42-43      \n 4     52392 2014-01-01 US6   Female     9.5 40         \n 5     52393 2014-01-01 UK4   Female     9   39-40      \n 6     52394 2014-01-01 US15  Male      10.5 43-44      \n 7     52395 2014-01-02 GER2  Female     9   39-40      \n 8     52396 2014-01-02 CAN5  Male      10   43         \n 9     52397 2014-01-02 US13  Male      10.5 43-44      \n10     52398 2014-01-02 UK1   Female     9   39-40      \n# ℹ 14,957 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n    select(starts_with('SIZE'))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 3\n   SIZE_US SIZE_EUROPE SIZE_UK\n     <dbl> <chr>         <dbl>\n 1    11   44             10.5\n 2    11.5 44-45          11  \n 3     9.5 42-43           9  \n 4     9.5 40              7.5\n 5     9   39-40           7  \n 6    10.5 43-44          10  \n 7     9   39-40           7  \n 8    10   43              9.5\n 9    10.5 43-44          10  \n10     9   39-40           7  \n# ℹ 14,957 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n    select(ends_with('PRICE'))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 2\n   UNITPRICE SALEPRICE\n       <dbl>     <dbl>\n 1       159      159 \n 2       199      159.\n 3       149      119.\n 4       159      159 \n 5       159      159 \n 6       159      159 \n 7       179      179 \n 8       169      169 \n 9       139      139 \n10       149      149 \n# ℹ 14,957 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n    select(contains(\"_\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 3\n   SIZE_US SIZE_EUROPE SIZE_UK\n     <dbl> <chr>         <dbl>\n 1    11   44             10.5\n 2    11.5 44-45          11  \n 3     9.5 42-43           9  \n 4     9.5 40              7.5\n 5     9   39-40           7  \n 6    10.5 43-44          10  \n 7     9   39-40           7  \n 8    10   43              9.5\n 9    10.5 43-44          10  \n10     9   39-40           7  \n# ℹ 14,957 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n    select(matches(\"SIZE\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 3\n   SIZE_US SIZE_EUROPE SIZE_UK\n     <dbl> <chr>         <dbl>\n 1    11   44             10.5\n 2    11.5 44-45          11  \n 3     9.5 42-43           9  \n 4     9.5 40              7.5\n 5     9   39-40           7  \n 6    10.5 43-44          10  \n 7     9   39-40           7  \n 8    10   43              9.5\n 9    10.5 43-44          10  \n10     9   39-40           7  \n# ℹ 14,957 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n    select(matches(\"PRICE$\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 2\n   UNITPRICE SALEPRICE\n       <dbl>     <dbl>\n 1       159      159 \n 2       199      159.\n 3       149      119.\n 4       159      159 \n 5       159      159 \n 6       159      159 \n 7       179      179 \n 8       169      169 \n 9       139      139 \n10       149      149 \n# ℹ 14,957 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# starts with letter S\ndf |>\n    select(matches(\"^S\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 5\n   SHOP  SIZE_US SIZE_EUROPE SIZE_UK SALEPRICE\n   <chr>   <dbl> <chr>         <dbl>     <dbl>\n 1 UK2      11   44             10.5      159 \n 2 US15     11.5 44-45          11        159.\n 3 CAN7      9.5 42-43           9        119.\n 4 US6       9.5 40              7.5      159 \n 5 UK4       9   39-40           7        159 \n 6 US15     10.5 43-44          10        159 \n 7 GER2      9   39-40           7        179 \n 8 CAN5     10   43              9.5      169 \n 9 US13     10.5 43-44          10        139 \n10 UK1       9   39-40           7        149 \n# ℹ 14,957 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n    select(where(is.character))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 5\n   COUNTRY        PRODUCTID SHOP  GENDER SIZE_EUROPE\n   <chr>          <chr>     <chr> <chr>  <chr>      \n 1 United Kingdom 2152      UK2   Male   44         \n 2 United States  2230      US15  Male   44-45      \n 3 Canada         2160      CAN7  Male   42-43      \n 4 United States  2234      US6   Female 40         \n 5 United Kingdom 2222      UK4   Female 39-40      \n 6 United States  2173      US15  Male   43-44      \n 7 Germany        2200      GER2  Female 39-40      \n 8 Canada         2238      CAN5  Male   43         \n 9 United States  2191      US13  Male   43-44      \n10 United Kingdom 2237      UK1   Female 39-40      \n# ℹ 14,957 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n    select(where(is.numeric))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 8\n   INVOICENO SIZE_US SIZE_UK UNITPRICE DISCOUNT  YEAR MONTH SALEPRICE\n       <dbl>   <dbl>   <dbl>     <dbl>    <dbl> <dbl> <dbl>     <dbl>\n 1     52389    11      10.5       159      0    2014     1      159 \n 2     52390    11.5    11         199      0.2  2014     1      159.\n 3     52391     9.5     9         149      0.2  2014     1      119.\n 4     52392     9.5     7.5       159      0    2014     1      159 \n 5     52393     9       7         159      0    2014     1      159 \n 6     52394    10.5    10         159      0    2014     1      159 \n 7     52395     9       7         179      0    2014     1      179 \n 8     52396    10       9.5       169      0    2014     1      169 \n 9     52397    10.5    10         139      0    2014     1      139 \n10     52398     9       7         149      0    2014     1      149 \n# ℹ 14,957 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n    select(MONTH, YEAR, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 14\n   MONTH  YEAR INVOICENO DATE       COUNTRY       PRODUCTID SHOP  GENDER SIZE_US\n   <dbl> <dbl>     <dbl> <date>     <chr>         <chr>     <chr> <chr>    <dbl>\n 1     1  2014     52389 2014-01-01 United Kingd… 2152      UK2   Male      11  \n 2     1  2014     52390 2014-01-01 United States 2230      US15  Male      11.5\n 3     1  2014     52391 2014-01-01 Canada        2160      CAN7  Male       9.5\n 4     1  2014     52392 2014-01-01 United States 2234      US6   Female     9.5\n 5     1  2014     52393 2014-01-01 United Kingd… 2222      UK4   Female     9  \n 6     1  2014     52394 2014-01-01 United States 2173      US15  Male      10.5\n 7     1  2014     52395 2014-01-02 Germany       2200      GER2  Female     9  \n 8     1  2014     52396 2014-01-02 Canada        2238      CAN5  Male      10  \n 9     1  2014     52397 2014-01-02 United States 2191      US13  Male      10.5\n10     1  2014     52398 2014-01-02 United Kingd… 2237      UK1   Female     9  \n# ℹ 14,957 more rows\n# ℹ 5 more variables: SIZE_EUROPE <chr>, SIZE_UK <dbl>, UNITPRICE <dbl>,\n#   DISCOUNT <dbl>, SALEPRICE <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# any_of () vs all_of ()\ndf |>\n    select(any_of(c(\"PRICE\", \"SIZE\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dropping columns \ndf |>\n    select(-DATE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,967 × 13\n   INVOICENO COUNTRY        PRODUCTID SHOP  GENDER SIZE_US SIZE_EUROPE SIZE_UK\n       <dbl> <chr>          <chr>     <chr> <chr>    <dbl> <chr>         <dbl>\n 1     52389 United Kingdom 2152      UK2   Male      11   44             10.5\n 2     52390 United States  2230      US15  Male      11.5 44-45          11  \n 3     52391 Canada         2160      CAN7  Male       9.5 42-43           9  \n 4     52392 United States  2234      US6   Female     9.5 40              7.5\n 5     52393 United Kingdom 2222      UK4   Female     9   39-40           7  \n 6     52394 United States  2173      US15  Male      10.5 43-44          10  \n 7     52395 Germany        2200      GER2  Female     9   39-40           7  \n 8     52396 Canada         2238      CAN5  Male      10   43              9.5\n 9     52397 United States  2191      US13  Male      10.5 43-44          10  \n10     52398 United Kingdom 2237      UK1   Female     9   39-40           7  \n# ℹ 14,957 more rows\n# ℹ 5 more variables: UNITPRICE <dbl>, DISCOUNT <dbl>, YEAR <dbl>, MONTH <dbl>,\n#   SALEPRICE <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## pandas \n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd['DATE']   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0          1/1/2014\n1          1/1/2014\n2          1/1/2014\n3          1/1/2014\n4          1/1/2014\n            ...    \n14962    12/31/2016\n14963    12/31/2016\n14964    12/31/2016\n14965    12/31/2016\n14966    12/31/2016\nName: DATE, Length: 14967, dtype: object\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd[['DATE', 'UNITPRICE']]   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             DATE  UNITPRICE\n0        1/1/2014        159\n1        1/1/2014        199\n2        1/1/2014        149\n3        1/1/2014        159\n4        1/1/2014        159\n...           ...        ...\n14962  12/31/2016        139\n14963  12/31/2016        149\n14964  12/31/2016        179\n14965  12/31/2016        199\n14966  12/31/2016        139\n\n[14967 rows x 2 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.loc[:,['DATE', 'UNITPRICE']]   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             DATE  UNITPRICE\n0        1/1/2014        159\n1        1/1/2014        199\n2        1/1/2014        149\n3        1/1/2014        159\n4        1/1/2014        159\n...           ...        ...\n14962  12/31/2016        139\n14963  12/31/2016        149\n14964  12/31/2016        179\n14965  12/31/2016        199\n14966  12/31/2016        139\n\n[14967 rows x 2 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.iloc[:,5:8]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       GENDER  SIZE_US SIZE_EUROPE\n0        Male     11.0          44\n1        Male     11.5       44-45\n2        Male      9.5       42-43\n3      Female      9.5          40\n4      Female      9.0       39-40\n...       ...      ...         ...\n14962    Male      9.5       42-43\n14963  Female     12.0       42-43\n14964    Male     10.5       43-44\n14965  Female      9.5          40\n14966  Female      6.5          37\n\n[14967 rows x 3 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.iloc[:,[3,5,8]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      PRODUCTID  GENDER  SIZE_UK\n0          2152    Male     10.5\n1          2230    Male     11.0\n2          2160    Male      9.0\n3          2234  Female      7.5\n4          2222  Female      7.0\n...         ...     ...      ...\n14962      2154    Male      9.0\n14963      2181  Female     10.0\n14964      2203    Male     10.0\n14965      2231  Female      7.5\n14966      2156  Female      4.5\n\n[14967 rows x 3 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.filter(['YEAR','SALEPRICE', 'DISCOUNT', 'UNITPRICE'])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       YEAR  SALEPRICE  DISCOUNT  UNITPRICE\n0      2014      159.0       0.0        159\n1      2014      159.2       0.2        199\n2      2014      119.2       0.2        149\n3      2014      159.0       0.0        159\n4      2014      159.0       0.0        159\n...     ...        ...       ...        ...\n14962  2016      139.0       0.0        139\n14963  2016      149.0       0.0        149\n14964  2016      125.3       0.3        179\n14965  2016      199.0       0.0        199\n14966  2016      125.1       0.1        139\n\n[14967 rows x 4 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.filter(['YEAR','SALEPRICE', 'DISCOUNT', 'UNITPRICE'])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       YEAR  SALEPRICE  DISCOUNT  UNITPRICE\n0      2014      159.0       0.0        159\n1      2014      159.2       0.2        199\n2      2014      119.2       0.2        149\n3      2014      159.0       0.0        159\n4      2014      159.0       0.0        159\n...     ...        ...       ...        ...\n14962  2016      139.0       0.0        139\n14963  2016      149.0       0.0        149\n14964  2016      125.3       0.3        179\n14965  2016      199.0       0.0        199\n14966  2016      125.1       0.1        139\n\n[14967 rows x 4 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n #RegularExpression(Regex)\ndf_pd.filter(regex =\"PRICE$\") #Ends with Price\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       UNITPRICE  SALEPRICE\n0            159      159.0\n1            199      159.2\n2            149      119.2\n3            159      159.0\n4            159      159.0\n...          ...        ...\n14962        139      139.0\n14963        149      149.0\n14964        179      125.3\n14965        199      199.0\n14966        139      125.1\n\n[14967 rows x 2 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.filter(regex =\"ˆSIZE\") #Starts with SIZE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEmpty DataFrame\nColumns: []\nIndex: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]\n\n[14967 rows x 0 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.filter(regex =\"PRICE\") #Contains the word Price\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       UNITPRICE  SALEPRICE\n0            159      159.0\n1            199      159.2\n2            149      119.2\n3            159      159.0\n4            159      159.0\n...          ...        ...\n14962        139      139.0\n14963        149      149.0\n14964        179      125.3\n14965        199      199.0\n14966        139      125.1\n\n[14967 rows x 2 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.select_dtypes('object')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO        DATE         COUNTRY  ...  GENDER SIZE_EUROPE MONTH\n0         52389    1/1/2014  United Kingdom  ...    Male          44     1\n1         52390    1/1/2014   United States  ...    Male       44-45     1\n2         52391    1/1/2014          Canada  ...    Male       42-43     1\n3         52392    1/1/2014   United States  ...  Female          40     1\n4         52393    1/1/2014  United Kingdom  ...  Female       39-40     1\n...         ...         ...             ...  ...     ...         ...   ...\n14962     65773  12/31/2016  United Kingdom  ...    Male       42-43    12\n14963     65774  12/31/2016   United States  ...  Female       42-43    12\n14964     65775  12/31/2016          Canada  ...    Male       43-44    12\n14965     65776  12/31/2016         Germany  ...  Female          40    12\n14966     65777  12/31/2016         Germany  ...  Female          37    12\n\n[14967 rows x 8 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.select_dtypes('int')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       UNITPRICE  YEAR\n0            159  2014\n1            199  2014\n2            149  2014\n3            159  2014\n4            159  2014\n...          ...   ...\n14962        139  2016\n14963        149  2016\n14964        179  2016\n14965        199  2016\n14966        139  2016\n\n[14967 rows x 2 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.loc[:,df_pd.columns.str.startswith('SIZE')]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       SIZE_US SIZE_EUROPE  SIZE_UK\n0         11.0          44     10.5\n1         11.5       44-45     11.0\n2          9.5       42-43      9.0\n3          9.5          40      7.5\n4          9.0       39-40      7.0\n...        ...         ...      ...\n14962      9.5       42-43      9.0\n14963     12.0       42-43     10.0\n14964     10.5       43-44     10.0\n14965      9.5          40      7.5\n14966      6.5          37      4.5\n\n[14967 rows x 3 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.loc[:,df_pd.columns.str.contains('PRICE')]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       UNITPRICE  SALEPRICE\n0            159      159.0\n1            199      159.2\n2            149      119.2\n3            159      159.0\n4            159      159.0\n...          ...        ...\n14962        139      139.0\n14963        149      149.0\n14964        179      125.3\n14965        199      199.0\n14966        139      125.1\n\n[14967 rows x 2 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd.loc[:,df_pd.columns.str.endswith('PRICE')]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       UNITPRICE  SALEPRICE\n0            159      159.0\n1            199      159.2\n2            149      119.2\n3            159      159.0\n4            159      159.0\n...          ...        ...\n14962        139      139.0\n14963        149      149.0\n14964        179      125.3\n14965        199      199.0\n14966        139      125.1\n\n[14967 rows x 2 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Dropping columns \ndf_pd.drop(columns =['SIZE_EUROPE', 'SIZE_UK'], axis=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO        DATE         COUNTRY  ...  YEAR MONTH SALEPRICE\n0         52389    1/1/2014  United Kingdom  ...  2014     1     159.0\n1         52390    1/1/2014   United States  ...  2014     1     159.2\n2         52391    1/1/2014          Canada  ...  2014     1     119.2\n3         52392    1/1/2014   United States  ...  2014     1     159.0\n4         52393    1/1/2014  United Kingdom  ...  2014     1     159.0\n...         ...         ...             ...  ...   ...   ...       ...\n14962     65773  12/31/2016  United Kingdom  ...  2016    12     139.0\n14963     65774  12/31/2016   United States  ...  2016    12     149.0\n14964     65775  12/31/2016          Canada  ...  2016    12     125.3\n14965     65776  12/31/2016         Germany  ...  2016    12     199.0\n14966     65777  12/31/2016         Germany  ...  2016    12     125.1\n\n[14967 rows x 12 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Dropping columns \ndf_pd.drop(columns =['SIZE_EUROPE', 'SIZE_UK'], axis=1)\\\n    .pipe(lambda x: x.info())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 12 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   INVOICENO  14967 non-null  object \n 1   DATE       14967 non-null  object \n 2   COUNTRY    14967 non-null  object \n 3   PRODUCTID  14967 non-null  object \n 4   SHOP       14967 non-null  object \n 5   GENDER     14967 non-null  object \n 6   SIZE_US    14967 non-null  float64\n 7   UNITPRICE  14967 non-null  int64  \n 8   DISCOUNT   14967 non-null  float64\n 9   YEAR       14967 non-null  int64  \n 10  MONTH      14967 non-null  object \n 11  SALEPRICE  14967 non-null  float64\ndtypes: float64(3), int64(2), object(7)\nmemory usage: 1.4+ MB\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Rearranging columns \n# Sorting Alphabetically\ndf_pd.reindex(sorted(df_pd.columns), axis =1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              COUNTRY        DATE  DISCOUNT  ... SIZE_US UNITPRICE  YEAR\n0      United Kingdom    1/1/2014       0.0  ...    11.0       159  2014\n1       United States    1/1/2014       0.2  ...    11.5       199  2014\n2              Canada    1/1/2014       0.2  ...     9.5       149  2014\n3       United States    1/1/2014       0.0  ...     9.5       159  2014\n4      United Kingdom    1/1/2014       0.0  ...     9.0       159  2014\n...               ...         ...       ...  ...     ...       ...   ...\n14962  United Kingdom  12/31/2016       0.0  ...     9.5       139  2016\n14963   United States  12/31/2016       0.0  ...    12.0       149  2016\n14964          Canada  12/31/2016       0.3  ...    10.5       179  2016\n14965         Germany  12/31/2016       0.0  ...     9.5       199  2016\n14966         Germany  12/31/2016       0.1  ...     6.5       139  2016\n\n[14967 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Rearranging columns \n# Sorting As You Want (ASY)\n\ncol_first = ['YEAR','MONTH']\ncol_rest = df_pd.columns.difference(col_first, sort=False).to_list()\ndf_pd2 = df_pd [col_first +col_rest]\ndf_pd2.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 14 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   YEAR         14967 non-null  int64  \n 1   MONTH        14967 non-null  object \n 2   INVOICENO    14967 non-null  object \n 3   DATE         14967 non-null  object \n 4   COUNTRY      14967 non-null  object \n 5   PRODUCTID    14967 non-null  object \n 6   SHOP         14967 non-null  object \n 7   GENDER       14967 non-null  object \n 8   SIZE_US      14967 non-null  float64\n 9   SIZE_EUROPE  14967 non-null  object \n 10  SIZE_UK      14967 non-null  float64\n 11  UNITPRICE    14967 non-null  int64  \n 12  DISCOUNT     14967 non-null  float64\n 13  SALEPRICE    14967 non-null  float64\ndtypes: float64(4), int64(2), object(8)\nmemory usage: 1.6+ MB\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n:::\n\n\n### 4th Verb - rename () Function \n\n:::{.panel-tabset}\n\n## dplyr \n\n::: {.cell}\n\n:::\n\n\n## pandas \n\n::: {.cell}\n\n```{.python .cell-code}\ndf_pd \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO        DATE         COUNTRY  ...  YEAR MONTH SALEPRICE\n0         52389    1/1/2014  United Kingdom  ...  2014     1     159.0\n1         52390    1/1/2014   United States  ...  2014     1     159.2\n2         52391    1/1/2014          Canada  ...  2014     1     119.2\n3         52392    1/1/2014   United States  ...  2014     1     159.0\n4         52393    1/1/2014  United Kingdom  ...  2014     1     159.0\n...         ...         ...             ...  ...   ...   ...       ...\n14962     65773  12/31/2016  United Kingdom  ...  2016    12     139.0\n14963     65774  12/31/2016   United States  ...  2016    12     149.0\n14964     65775  12/31/2016          Canada  ...  2016    12     125.3\n14965     65776  12/31/2016         Germany  ...  2016    12     199.0\n14966     65777  12/31/2016         Germany  ...  2016    12     125.1\n\n[14967 rows x 14 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\n### 5th Verb - mutate () Function \n\n:::{.panel-tabset}\n\n## dplyr \n\n::: {.cell}\n\n:::\n\n\n## pandas \n\n::: {.cell}\n\n:::\n\n\n:::\n\n### 6th Verbs - group_by () and summarize () Functions \n\n:::{.panel-tabset}\n\n## dplyr \n\n::: {.cell}\n\n:::\n\n\n## pandas \n\n::: {.cell}\n\n:::\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}